//SBGOLOBF JOB (ACCT#),FASTPATH,                                        00010051
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00040051
//HLASM EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF,         00050038
// SYSPARM(STOP522),                                              -DEL- 00070000
// BATCH),REGION=5M                                                     00080000
*PROCESS BATCH,USING(NOMAP,WARN(8))                                     00090000
*PROCESS FLAG(NOPAGE0)                 STACK/RACROUTE                   00100041
*********************************************************************** 00110000
*                                                                     * 00120000
* MODULE NAME = FASTPATH                                              * 00130000
*                                                                     * 00140000
* DESCRIPTIVE NAME = ISPF fast-path command processor                 * 00150000
*                                                                     * 00160000
* STATUS = R150                                                       * 00170050
*                                                                     * 00180000
* FUNCTION = This program allows the use of fast-path commands        * 00190014
*            without requiring customization of the ISPF              * 00200013
*            environment.  It provides two types of functions:        * 00210013
*                                                                     * 00220000
*            1. Initialization                                        * 00230013
*                                                                     * 00240000
*               a. add fast-path commands to the user's               * 00250013
*                  in-storage copy of ISPCMDS                         * 00260013
*               b. pre-load specific modules to enhance performance   * 00270013
*                  and allow access from a private LOAD library       * 00280013
*               c. issue STIMER to prevent S522 time-out abends       * 00290013
*                                                                     * 00300000
*            2. Processing                                            * 00310013
*                                                                     * 00320000
*               a. invoke EDIT, BROWSE, VIEW, WorkPlace and SDSF      * 00330013
*                  with the appropriate NEWAPPL parameter             * 00340013
*               b. store and retrieves parameters associated          * 00350013
*                  with user-specified tags                           * 00360013
*               c. retrieve a dsname under which the cursor           * 00370013
*                  is positionned                                     * 00380013
*                                                                     * 00390000
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  * 00400057
*                                                                     * 00410000
* Documentation = http://gsf-soft.com/Freeware/FASTPATH.shtml         * 00420040
*                                                                     * 00430040
* ENVIRONMENT = SEE BELOW                                             * 00440000
*                                                                     * 00450000
*    DEPENDENCIES: MVS/ESA 4.3 (or above)                             * 00460030
*                  TSO/E 2.4 (or above)                               * 00470033
*                  ISPF/PDF V3 (or above)                             * 00480013
*                  STRING macro R515                                  * 00490046
*                                                                     * 00500000
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               * 00510000
*                                                                     * 00520000
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      * 00530000
*                IBM HIGH LEVEL ASSEMBLER/MVS                         * 00540000
*                                                                     * 00550000
*    MODULE SIZE = 25K                                                * 00560046
*                                                                     * 00570000
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   * 00580012
*                 PROBLEM STATE, KEY 8                                * 00590000
*                 APF AUTHORIZATION: NONE                             * 00600000
*                                                                     * 00610000
* OPERATION = SEE BELOW                                               * 00620000
*                                                                     * 00630000
*   When it is invoked as a command, or without a parm, FASTPATH      * 00640001
*   adds (or replaces) fast path commands to the in-storage copy      * 00650001
*   of the ISPCMDS table.                                             * 00660001
*                                                                     * 00670000
*   When invoked as a program with a PARM, FASTPATH processes a       * 00680001
*   fast path command according to the parameters.                    * 00690001
*                                                                     * 00700000
* PARAMETERS = The parm field is used to pass parameters to the       * 00710001
*              program as a comma-delimited string.                   * 00720001
*                                                                     * 00730000
* RETURN-CODES = SEE BELOW                                            * 00740001
*                                                                     * 00750000
*          0                    OK                                    * 00760001
*          4                    Already Initialized                   * 00770001
*         16                    ISPF not active                       * 00780001
*                                                                     * 00790000
* CHANGE ACTIVITY                                                     * 00800001
*                                                                     * 00810000
*100 Initial release based on PGMEDBRO, DLPGM & CALLCMD           1992* 00820000
*101 Add STIMER function to prevent S522 abends                       * 00830001
*102 Use ISPZ000 message instead of ISRZ000                           * 00840002
*103 VPUT for EDBR0001 fails when EDBR0000 is created                 * 00850003
*104 Add variable for VIEW function of ISPF 4.1                       * 00860004
*105 Implement PRELOAD routine (from ISPTASK5)                        * 00870005
*106 Issue "ISPCMDS Updated" message                                  * 00880006
*107 Reorg initialisation phase                                       * 00890007
*108 Add support for Work-place shell (ISPF 4.2)                  1996* 00900008
*109 Fix addressability problem in PRELOAD routine                    * 00910009
*110 Extract dsn under cursor when a ED/BR/VI/WP command              * 00920010
*    is entered without an option.                                    * 00930010
*111 If Zvprof='' THEN Zvprof=Prof                                    * 00940011
*112 Check for R1=>A(TLD) when invoked from ISPTASK                   * 00950012
*113 Simulate WP with %DSLIST in ISPF V3 or V4R1                      * 00960013
*    Do not issue STIMER if running with TIME=1440                    * 00970013
*114 Add MACLIB function to VIEW MACLIB/MODGEN member                 * 00980014
*115 FSHELP function (Full-screen HELP)                               * 00990015
*116 Name of builtin functions changed (E becomes EDIT)               * 01000016
*    New functions added: E V B (Direct Edit, View and Browse)        * 01010016
*117 FTINCL Function                                                  * 01020017
*    If cursor-driven BROWSE fails, invoke BR (the VSAM Browser)      * 01030017
*118 Replace FSHELP with TSOFS which is more generic                  * 01040018
*    Add CNTL and TIME functions                                      * 01050018
*119 Concatenate PVTMACS to MACLIB/MODGEN if it is cataloged      1997* 01060019
*    Add SYSID function                                               * 01070019
*120 CRASH/LOGON/LOGOFF functions                                     * 01080020
*    Add D function (delete member)                                   * 01090020
*121 Make sure I've been link'd with the RENT attribute               * 01100021
*    Use external copy of ISPLINK module                              * 01110021
*122 Use new CRASH function for LOGON & LOGOFF                        * 01120022
*123 PARMLIB function for OS/390 R2                                   * 01130023
*    Prevent MSGIKJ56400A when CRASH LOGON or CRASH LOGOFF            * 01140023
*    is issued and a CLIST or EXEC command is active                  * 01150023
*    Add NOENQ option to DELMBR function                              * 01160023
*124 Prevent S0C9 in dsname extraction routine when TLDCLSWD=0        * 01170024
*125 Support ZEDITWS and ZVIEWWS variables                            * 01180025
*126 Add PROFILE option on WorkPlace VPUT                             * 01190026
*127 New function: EXECPGM                                            * 01200027
*128 Reset ECTIOWA when CRASH is entered with no operand          1998* 01210028
*129 Rewrite dsname extraction routine.                               * 01220029
*    Use VIEW if user doesn't have update auth to SYS1.PARMLIB        * 01230029
*130 Add CALENDAR function                                            * 01240030
*    Add CONNECT function to start/display connection to WS           * 01250030
*    Add LOAD and UNLOAD functions                                    * 01260030
*    Add NETSTAT function (full-screen NETSTAT)                       * 01270030
*    Add REXXTRY function                                             * 01280030
*    Add VERASE function to delete a variable from profile            * 01290030
*    Add ZDEL function to display/set ZDEL variable.                  * 01300030
*    Enhanced ED/VI/BR/WP functions:                                  * 01310030
*         Data Set Reference List                                     * 01320030
*         Work-station files                                          * 01330030
*         Compatibility with CNAEBROW/CNAEEDIT  *                     * 01340030
*    Delete duplicate entries from SITE and USER command tables       * 01350030
*    Change SYSID function to use ZDEL instead of ";".                * 01360030
*    CRASH * issues command from ZTSICMD                              * 01370030
*    STOP522 code only generated if assembled with SYSPARM(STOP522)   * 01380030
*    FASTPATH can now be link-edited under a different name           * 01390030
*131 Add OPENCMDS and FSPASTE functions                           1999* 01400031
*    LOAD function supports LIBDEF ISPLLIB                            * 01410031
*    Enhance TSOFS and UNLOAD functions                               * 01420031
*    Enhance CRASH: =pli, close ISRxLIST tables                       * 01430031
*    Add LC command                                                   * 01440031
*    Issue RACROUTE to prevent S913 abends in BR/ED/VI                * 01450031
*    Use VARLISTW for WP variables to prevent corruption              * 01460031
*    Restructure the code to work around addressability problems      * 01470031
*132 Check for * and % in EDBR                                        * 01480032
*    Add LIBRARY(ISPSPROF) to TBCLOSE service                         * 01490032
*133 Reorganize initialization code and add SELECT function           * 01500033
*    Detect migrated data sets and allow user to prevent HRECALL      * 01510033
*    Replace relative generation number with .G*V%%                   * 01520033
*    Allow volser in direct ED/BR/VI/WP: ED ISP.SISPPENU/OS39R7       * 01530033
*    Do not prefix &ZPREFIX if the unqualified name is cataloged      * 01540033
*    Add profile on MAClib/PARMLib functions                          * 01550033
*    Add VIEW/EDIT option to PARMLib function                         * 01560033
*    Fix BEGIN_PROC for HLASM R3 (requires STRING 506 or 404)         * 01570033
*134 A + sign at the end of a command starts a new logical screen     * 01580034
*    Prompt user before creating a new Tag entry                      * 01590034
*    Do not issue RACROUTE with ACF2 or Top-Secret                2000* 01600034
*    Remove LOCTR option in STRING GENERATE instruction               * 01610034
*    Replace LINK EP=IEANTxx with BALR to prevent S406-04             * 01620034
*    Init ZREFTYPE and ZWRKVOL variables to X'40'                     * 01630034
*    Drop trailing blank lines in FSPASTE                             * 01640034
*135 Use PGM(ISRDSLST) PARM(PL1 REFLIST) instead of RL1 in ISPF 4.8   * 01650035
*    Check for migrated data sets in all situations                   * 01660035
*    Support ALIAS names on non SMS-managed volumes                   * 01670035
*136 Blank out (*) at end of dsname (B/E/V)                           * 01680036
*    Do not call BR if dsname(member) is too long                     * 01690037
*    Issue error message after BROWSE failure                         * 01700037
*137 Minor technical changes                                      2001* 01710037
*138 FSPASTE functions invokes VIIF instead of EDIF on OS/390 R10     * 01720038
*    Strip off ALIAS--- in LISTCAT function                           * 01730038
*    Expand WSA address to 64 character                               * 01740038
*    Change PROFILE(STD) to PROFILE(CNTL) in CNTL function            * 01750038
*    Check for dsname when EDBR0000 doesn't exist                     * 01760038
*139 Skip ADDCMDS/SETUP when invoked via CALL with PARM=CRASH     2005* 01770039
*140 Support ALIAS Entries when calling BR                            * 01780040
*141 Fix NETSTAT for CS IP stack in OS/390 R5 and above               * 01790041
*142 SYMBOLIC/RESOLVED in LISTCAT                                 2008* 01800042
*    PGSPC in LISTCAT                                                 * 01810042
*143 Add TSOCMD function to invoke LINKMAP via LM                     * 01820043
*144 CNTL command supports ISPF Profile Sharing     (Al Ferguson)     * 01830044
*    PROCLib and JCLLib functions                   (Al Ferguson)     * 01840044
*145 Make TRUNC=0 a default value in ISPCMDS macro                2009* 01850045
*    Pre-load more programs from FILE183.LOAD                         * 01860045
*146 TSOFS - Re-display ISRTSO panel when null cmd is entered         * 01870046
*    Add FSHelp, SHOWDasd & SHOWJpaq commands in ISPCMDS table        * 01880046
*147 Add FSPRint in ISPCMDS table                                     * 01890047
*148 Add Timezone: E.02.00.00 (from CVTTZ/CLOCKxx)                    * 01900048
*    Do not TBCLOSE ISRJLIST/ISRRLIST in ISPF V5                      * 01910048
*149 DSInfo/ISRUDA+ISRDDNPI                                       2010* 01920049
*    Add #@ to CURSOR table                                           * 01930049
*    FSTSO replaces TSOFS                                             * 01940049
*150 Added: http://gsf-soft.com/Freeware/FASTPATH.shtml           2011* 01950050
*    Change LC (LCAT) command to LCA to avoid conflict with PDS       * 01951058
*    command's "LC" subcommand                                        * 01952058
*    Change UT (ISRUTIL) abbreviation to all 4 characters         2018* 01960058
*150 Change table invocation for SHOWzOS so it doesn't abend      2020* 01961062
*                                                                     * 01962062
&REL     SETC  'R150'                                                 * 01970050
*********************************************************************** 01980000
         PUNCH ' ORDER FASTPATH(P),JUL2DAYS,@STRING,ISPCMDS,PRELOAD'    01990034
FASTPATH CSECT                                                          02000000
FASTPATH RMODE ANY                                                      02010000
&YYMMDD  SETC  '&SYSDATE'(7,2)'-'.'&SYSDATE'(1,2)'-'.'&SYSDATE'(4,2)    02020050
&XXX     SETC  '- 20&YYMMDD &SYSTIME '                                  02030050
&XXX     SETC  '&XXX.http://gsf-soft.com/Freeware/FASTPATH.shtml '      02040050
         SAVE  (14,12),,'GSF Utilities - FASTPATH &REL &XXX'         '  02050050
         LR    R11,R15                 1st base reg                     02060000
         USING FASTPATH,R11                                             02070000
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA   02080001
         GETMAIN R,LV=(0)              ALLOCATE DYNAMIC STORAGE         02090001
         ST    R13,4(,R1)                                               02100000
         ST    R1,8(,R13)                                               02110000
         LA    R14,72(,R1)             clear working storage            02120000
         LA    R15,DYNAML-72           clear working storage            02130000
         SLR   R1,R1                   clear working storage            02140000
         MVCL  R14,R0                  clear working storage            02150000
         LM    R13,R1,8(R13)           SET R13, RELOAD R14-R1           02160000
         LR    R9,R1                   save PARM/CPPL address           02170000
         USING DYNAM,R13                                                02180000
         ST    R13,DYNAM               PARM FOR READ ROUTINE            02190031
         MVI   BLANKS,C' '                                              02200000
         MVC   BLANKS+1(L'BLANKS-1),BLANKS                              02210000
         MVC   OPT,BLANKS                                               02220000
*---------------------------------------------------------------------* 02230031
*                                                                     * 02240031
*        Retrieve the address of the LIBDEF ISPLLIB DCB               * 02250031
*                                                                     * 02260031
*---------------------------------------------------------------------* 02270031
FINDDCB  L     R4,PSATOLD-PSA(0,0)     Current TCB                      02280031
         USING TCB,R4                                                   02290031
         L     R1,TCBRBP               current PRB                      02300031
         L     R2,RBGRS15-RBBASIC(,R1) SVC 6 PARM LIST                  02310031
         MVC   LLIBDCB+1(3),5(R2)      addr of LIBDEF DCB or zero       02320033
*---------------------------------------------------------------------* 02330030
*                                                                     * 02340030
*        Locate/validate my CDE on the JPAQ                           * 02350031
*                                                                     * 02360030
*---------------------------------------------------------------------* 02370030
FINDCDE  L     R5,TCBJSTCB             job-step TCB                     02380031
         L     R5,TCBJPQ-TCB(,R5)      first CDE on JPAQ                02390031
         USING CDENTRY,R5                                               02400031
*loop                                                                   02410031
FINDCDE2 CL    R11,CDENTPT             IS IT MY OWN ENTRY?              02420031
         BE    FINDCDE5                YES, EXIT                        02430031
         ICM   R5,B'1111',CDCHAIN      NEXT CDE                         02440031
         BNZ   FINDCDE2                CHECK NEXT CDE                   02450031
*endloop                                                                02460031
         MVC   OWNNAME,=C'*UNKNOWN'    own name not found               02470031
         B     INIT_ERROR              error                            02480031
FINDCDE5 MVC   OWNNAME,CDNAME          save own name                    02490031
         ST    R5,CDE@                 save CDE address                 02500034
         TM    CDATTR,CDREN            RENT module?                     02510031
         BNO   INIT_ERROR              no, error                        02520031
         DROP  R5                      CDENTRY                          02530031
*---------------------------------------------------------------------* 02540030
*                                                                     * 02550030
*        Locate/validate ISPF control blocks: TLD, TSI                * 02560030
*                                                                     * 02570030
*---------------------------------------------------------------------* 02580030
*loop                                                                   02590030
FINDTLD2 L     R1,TCBFSA               first save area                  02600030
         CLI   24(R1),00               24-bit address?                  02610031
         BNE   FINDTLD3                no, ignore                       02620031
         L     R1,24(,R1)              R1 SLOT (ADDR OF TLD PTR)        02630030
         CLI   0(R1),00                24-bit address?                  02640031
         BNE   FINDTLD3                no, ignore                       02650031
         L     R5,0(,R1)               R5 -> TLD                        02660030
         USING TLD,R5                                                   02670030
         CLC   =C'TLD',TLDTBLID        is this the TLD?                 02680030
         BE    FINDTLD5                yes, exit loop                   02690030
FINDTLD3 L     R4,TCBOTC               previous TCB (ISPTASK)           02700031
         CL    R4,TCBJSTCB             am I lost?                       02710030
         BNE   FINDTLD2                no, keep on going                02720030
*endloop                                                                02730030
         B     INIT_ERROR              error                            02740031
FINDTLD5 EQU   *                                                        02750030
         ST    R5,TLD@                 save TLD address                 02760030
         L     R4,TLDTSIP              R4 -> TSI                        02770030
         USING TSI,R4                                                   02780030
         CLC   =C'ISPTSI',TSITBLID     am I lost?                       02790030
         BNE   INIT_ERROR              yes, error                       02800031
         ST    R4,TSI@                 save TSI address                 02810030
         PACK  ISPFVM,TSIRMZ(1)        4.2 -> X'4F'                     02820030
         MVN   ISPFVM,TSIRMZ+2         4.2 -> X'42'                     02830030
*                                                                       02840000
*        Retrieve the current command from the TLD.  The last           02850034
*        character of the cmd is checked for a + sign later on.         02860034
*                                                                       02870000
         L     R6,TLD+092              point at the last command        02880034
         LA    R7,008(,R6)             start of the command             02890034
         ICM   R8,B'1111',004(R6)      length of the command            02900034
         BZ    FINDTLD8                no command, exit                 02910034
*STRING '>',((R6),(R7)),'< ',INTO=COMMAND                         -DEL- 02920034
*TPUT COMMAND,(R15)                                               -DEL- 02930034
         ALR   R8,R7                   end of command                   02940034
         CLI   0(R8),C' '              find last non-blank character    02950034
         BNE   *+8                     find last non-blank character    02960034
         BCT   R8,*-8                  find last non-blank character    02970034
*STRING '>',((R6),1(R7)),'< ',INTO=COMMAND                        -DEL- 02980034
*TPUT COMMAND,(R15)                                               -DEL- 02990034
         STM   R7,R8,CMD@              save addr, end-addr              03000034
*                                                                       03010034
*        Extract the name of the command and save into CMDNAME          03020034
*                                                                       03030034
         LA    R0,L'CMDNAME            loop counter                     03040034
         LR    R1,R7                   start of command                 03050034
         CLI   0(R1),C' '              end of command name?             03060034
         BE    FINDTLD7                yes, exit                        03070034
         LA    R1,1(,R1)               bump index                       03080034
         BCT   R0,*-12                 next character                   03090034
FINDTLD7 EQU   *                                                        03100034
         STRING ((R7),(R1)),INTO=CMDNAME save the cmd name              03110034
FINDTLD8 EQU   *                                                        03120034
         DROP  R4,R5                   TLD,TSI                          03130030
*********************************************************************** 03140000
*                                                                     * 03150000
*        INITIALISATION                                               * 03160007
*                                                                     * 03170000
*        1. invoked from ISPTASK with R1=>A(TLD): perform SETUP       * 03180012
*           (it's too early for ADDCMDS)                              * 03190033
*        2. invoked as a Command processor (R1 points to a CPPL):     * 03200007
*           perform SETUP then re-invoke myself as a program.         * 03210007
*        3. invoked as a program with PARM='' via the CALL command:   * 03220033
*           add commands to ISPCMDS                                   * 03230033
*        4. invoked as a program with a non-null parm:                * 03240007
*           process the requested function                            * 03250007
*                                                                     * 03260000
*********************************************************************** 03270000
INIT00   EQU   *                                                        03280030
         L     R1,0(,R9)               point at PARM/CBUF/TLD           03290030
         CLC   =C'TLD',0(R1)           invoked from ISPTASK4?           03300033
         BE    INIT20                  yes, perform set-up              03310033
*                                                                       03320000
*        ISPEXEC CONTROL ERRORS RETURN                                  03330033
*                                                                       03340000
         LA    R1,=A($CONTROL,$ERRORS,$RETURN+VL)                       03350033
         LINK  SF=(E,ISPLINK$)         CONTROL ERRORS RETURN            03360033
         LTR   R7,R15                  ISPF active?                     03370033
         BNZ   GOBACK                  no, exit                         03380033
*                                                                       03390000
         L     R1,PSATOLD-PSA(0,0)     Current TCB                      03400030
         CLC   TCBFSA-TCB(,R1),4(R13)  invoked via CALL or as a CP?     03410030
         BNE   INIT30                  no, continue                     03420030
         ICM   R1,B'1111',0(R9)        invoked via CALL?                03430039
         BNM   INIT15                  no, continue                     03440039
         ICM   R0,B'0011',0(R1)        PARM='' ?                        03450039
         BZ    INIT15                  yes, continue                    03460039
         CLC   =C'CRASH ',2(R1)        PARM='CRASH ?                    03470039
         BE    INIT30                  yes, skip addcmds/setup          03480039
INIT15   EQU   *                                                        03490039
         BAL   R14,ADDCMDS          <- add commands to ISPCMDS          03500033
*                                                                       03510000
INIT20   EQU   *                                                        03520033
         BAL   R14,SETUP00          <- SETUP (URP)                      03530033
         SLR   R7,R7                   rc=0                             03540033
         B     GOBACK                  exit with rc=0                   03550033
*                                                                       03560000
INIT_ERROR EQU *                                                        03570031
         STRING 'Module ',(OWNNAME,,T),' failed initialization;',      X03580031
               ' CDE=',(CDE@+1,3,X),' TLD=',(TLD@+1,3,X),              X03590034
               ' TSI=',(TSI@+1,3,X),INTO=LONGMSG                        03600034
         TPUT  LONGMSG,(R15)           issue error message              03610031
         LA    R7,16                   rc=16                            03620031
         B     GOBACK                  exit with rc=16                  03630031
*                                                                       03640000
*        Force a PAGEIN of the FASTPATH module                          03650030
*                                                                       03660000
INIT30   L     R7,=V(ISPCMDS)          first table entry                03670031
         PGSER R,LOAD,A=(R11),EA=(R7),ECB=0                             03680018
*                                                                       03690000
         MACRO                                                    macro 03700000
&NAME    ISPLINK &OPRNDS,&ERRET=                                  macro 03710000
&NAME    LINK  SF=(E,ISPLINK$),PARAM=&OPRNDS,MF=(E,PARMLIST),VL=1 macro 03720030
         AIF   (T'&ERRET EQ 'O').MEND                             macro 03730000
         LTR   R15,R15                 Any error?                       03740000
         BNZ   &ERRET                  yes, jump                        03750000
.MEND    MEND                                                     macro 03760000
*---------------------------------------------------------------------* 03770030
*                                                                     * 03780030
*        Retrieve ISPF variables                                      * 03790030
*                                                                     * 03800030
*---------------------------------------------------------------------* 03810030
INIT40   LA    R14,L'ZENVIR            max length                       03820030
         LA    R15,L'ZAPPLID           max length                       03830030
         LA    R0,L'ZUSER              max length                       03840030
         LA    R1,L'ZPREFIX            max length                       03850030
         LA    R2,L'ZSCREEN            max length                       03860030
         LA    R3,L'ZDEL               max length                       03870030
         LA    R4,L'ZSPLIT             max length                       03880030
         LA    R5,L'ZWSCON             max length                       03890030
         STM   R14,R5,TENWORDS         length array                     03900030
&VARS    SETC  'ZENVIR ZAPPLID ZUSER ZPREFIX ZSCREEN'                   03910030
&VARS    SETC  '&VARS ZDEL ZSPLIT ZWSCON'                               03920030
         ISPLINK ($VCOPY,=C'(&VARS)',TENWORDS,ZENVIR,$MOVE)             03930030
         MVC   NEWAPPL,=C'ISR '        new appl (default)               03940030
         MVC   NEWPGM,OWNNAME          NEW PROGRAM                      03950033
*                                                                       03960000
*        Bump my own use count if I haven't been already                03970033
*        made resident at the URP level.                                03980033
*                                                                       03990000
         L     R5,CDE@                 own CDE                          04000033
         LA    R0,1                    R0=1                             04010033
         CH    R0,CDUSE-CDENTRY(,R5)   own CDUSE=1 ?                    04020033
         BNE   INIT50                  no, jump                         04030034
         LOAD  EPLOC=OWNNAME           bump my use count                04040033
         MVC   OWNNAME2,OWNNAME        save OWNNAME for UNLOAD function 04050033
*---------------------------------------------------------------------* 04060000
*                                                                     * 04070000
*        I've been invoked as a program via the SELECT service.       * 04080033
*        The value of ZAPPLID doesn't matter at this point.           * 04090033
*                                                                     * 04100000
*        If PARM='', change to PARM=SELECT to perform initialization. * 04110033
*                                                                     * 04120000
*---------------------------------------------------------------------* 04130000
INIT50   L     R3,0(,R9)               point at parm                    04140030
         LH    R5,0(,R3)               parm length                      04150000
         LTR   R5,R5                   do we have a parm?               04160030
         BP    INIT60                  yes, jump                        04170031
         BAL   R3,INIT55               branch around constant           04180033
         DC    Y(6),C'SELECT'          Simulate PARM(SELECT)            04190033
INIT55   LH    R5,0(,R3)               parm length                      04200033
*---------------------------------------------------------------------* 04210031
*                                                                     * 04220031
*        Parse the parm                                               * 04230031
*                                                                     * 04240031
*              Input:   PARM='EDIT,abcd,efgh,ijkl'                    * 04250031
*                                                                     * 04260031
*              output:  FUNCTION='EDIT '                              * 04270031
*                       OPT='abcd,efgh,ijkl'                          * 04280031
*                       OPT8='ABCD,EFG'                               * 04290031
*                                                                     * 04300031
*---------------------------------------------------------------------* 04310031
INIT60   LA    R4,2(,R3)               parm address                     04320031
*loop                                                                   04330031
INIT61   CLI   0(R4),C','              end of function?                 04340031
         BE    INIT62                  yes, leave                       04350031
         CLI   0(R4),C' '              end of function?                 04360033
         BE    INIT62                  yes, leave                       04370033
         LA    R4,1(,R4)               bump ptr                         04380031
         BCT   R5,INIT61               keep loopin                      04390031
*endloop                                                                04400031
INIT62   STRING (2(R3),(R4)),INTO=FUNCTION                              04410031
         OC    FUNCTION,BLANKS         Convert to upper-case            04420031
         LTR   R5,R5                   any options?                     04430031
         BZ    INIT63                  no, jump                         04440031
         BCTR  R5,0                    yes, subtract length of comma    04450031
         LA    R4,1(,R4)               skip comma                       04460031
INIT63   ST    R4,OPTADDR              save address                     04470031
         ST    R5,OPTLEN               save length                      04480031
         STRING ((R4),(R5)),INTO=OPT   save options                     04490031
         MVC   OPT2,OPT                save options                     04500031
         MVC   OPT8,OPT                Save first 8 bytes               04510031
         OC    OPT8,BLANKS             Convert to upper-case            04520031
*---------------------------------------------------------------------* 04530030
*                                                                     * 04540000
*        Invoke function processor                                    * 04550030
*                                                                     * 04560000
*---------------------------------------------------------------------* 04570030
         MACRO                                                          04580034
        $TABLE &KW,&ADDR,&PLUS                                          04590034
         DC    AL2(&ADDR-*),CL5'&KW',CL1'&PLUS '                        04600034
         MEND                                                           04610034
         BAL   R2,SELFUNC2             branch around table              04620034
        $TABLE B,EDBRVIWP              Direct Browse                    04630034
        $TABLE BROWSE,EDBRVIWP,%       Builtin: Browse                  04640034
        $TABLE CALENDAR,CALENDAR       Display Calendar                 04650034
        $TABLE CNTL,CNTL,+             CNTL,0                           04660034
        $TABLE WSCON,CONNECT           CONNECT to WorkStation           04670034
        $TABLE CRASH,CRASH             CRASH/LOGON/LOGOFF               04680034
        $TABLE D,DELMBR                Delete Member                    04690034
        $TABLE DSINFO,DSINFO,+         Data Set Info                    04700049
        $TABLE E,EDBRVIWP              Direct Edit                      04710034
        $TABLE EDIT,EDBRVIWP,%         Builtin: Edit                    04720034
        $TABLE EXECPGM,EXECPGM         Exec pgm from link-list          04730034
        $TABLE FSPASTE,FSPASTE,+       Full-Screen PASTE                04740034
        $TABLE FSTSO,FSTSO,%           Full-screen TSO                  04750049
        $TABLE FTINCL,FTINCL           FTINCL,&skel,&panel              04760034
        $TABLE ICS,ICS,+               ISPF Command Shell               04770034
        $TABLE LOAD,LOAD00,+           Preload a module                 04780034
        $TABLE MACLIB,MACLIB,+         MACLIB                           04790034
        $TABLE OPENCMDS,OPENCMDS       OPENCMDS                         04800034
        $TABLE NETSTAT,NETSTAT,+       NETSTAT                          04810034
        $TABLE SELECT,SELECT           Start Initial Command            04820034
        $TABLE PARMLIB,PARMLIB,+       PARMLIB                          04830034
        $TABLE PROCLIB,PROCLIB,+       PROCLIB                          04840044
        $TABLE REXXTRY,REXXTRY         REXXTRY                          04850034
        $TABLE SDSF,SDSF,+             SDSF                             04860034
        $TABLE SYSID,SYSID,+           SYSID                            04870034
        $TABLE TIME,TIME,+             TIME                             04880034
        $TABLE TSOCMD,FSTSO,%          TSO Command (Alias)              04890049
        $TABLE TSOFS,FSTSO,%           Full-screen TSO (Alias)          04900049
        $TABLE UNLOAD,UNLOAD00,+       Unload a module                  04910034
        $TABLE UTIL,UTIL,+             PDF Utilities                    04920034
        $TABLE V,EDBRVIWP              Direct View                      04930034
        $TABLE VERASE,VERASE,+         VERASE                           04940034
        $TABLE VIEW,EDBRVIWP,%         Builtin: View                    04950034
        $TABLE WP,EDBRVIWP,%           Builtin: Work-place              04960034
        $TABLE ZDEL,ZDELFUNC,+         ZDEL                             04970034
         DC    X'FF',0Y(0)                                              04980018
*LOOP                                                                   04990016
SELFUNC2 CLC   FUNCTION(5),2(R2)       SAME FUNCTION?                   05000034
         BE    SELFUNC4                YES, EXIT LOOP                   05010031
         LA    R2,2+5+1(,R2)           NEXT TYPE                        05020034
         CLI   0(R2),X'FF'             END OF TABLE?                    05030034
         BNE   SELFUNC2                NOT YET                          05040031
*ENDLOOP                                                                05050016
         STRING 'Unsupported Function',INTO=SHORTMSG                    05060031
         STRING 'FASTPATH release &REL does not support the ',         X05070031
               (FUNCTION,,T),' function.',                             X05080031
               INTO=LONGMSG                                             05090031
         MVI   ALARM,C'Y'              error, beep.                     05100031
         BAL   R14,SETMSG           <- send message                     05110031
         LA    R7,12                   rc=12                            05120031
         B     GOBACK                  unknown function, exit           05130031
*                                                                       05140000
*        Process new-screen option                                      05150034
*                                                                       05160000
SELFUNC4 LM    R7,R8,CMD@              cmd addr, end-addr               05170034
         CLI   0(R8),C'+'              user requested new screen?       05180034
         BNE   SELFUNC8                no, go execute function          05190034
         MVI   PLUSSIGN,C'+'           tell EDBRVIWP and FSTSO          05200034
         CLI   2+5(R2),C'+'            new screen allowed?              05210034
         BE    NEWSCREEN               yes, re-issue the command        05220034
         CLI   2+5(R2),C'%'            new screen allowed?              05230034
         BNE   SELFUNC8                no, go execute function          05240034
*                                                                       05250000
*        Blank out the last + sign for EDBRVIWP                         05260034
*                                                                       05270000
         L     R1,OPTLEN               L'OPT2                           05280034
         LA    R1,OPT2-1(R1)           last char                        05290034
         CLI   0(R1),C'+'              blank out last + sign            05300034
         BE    *+8                     blank out last + sign            05310034
         BCT   R1,*-8                  blank out last + sign            05320034
         MVI   0(R1),C' '              blank out last + sign            05330034
*                                                                       05340000
*        Pass control to functional routine                             05350034
*                                                                       05360000
SELFUNC8 LR    R15,R2                  Pass address of table entry      05370034
         AH    R15,0(,R15)             Add offset to functional rtne    05380034
         BALR  R14,R15              <- EXECUTE FUNCTION                 05390031
         B     *+4(R1)                 take return action based on R1   05400031
         B     XCTL00                  r1=0: invoke ISPF service        05410031
         B     EXIT90                  r1=4: exit with rc=(15)          05420031
         B     APPL_ISR                r1=8: switch to APPL=ISR         05430031
         B     XCTL30                  r1=12: other ISPF service        05440033
         B     NEWSCREEN               r1=16: re-issue the command      05450034
*********************************************************************** 05460030
*                                                                     * 05470000
*        Function=SDSF                                                * 05480018
*                                                                     * 05490000
*********************************************************************** 05500015
SDSF     MVC   NEWAPPL,=C'ISF '        NEW APPL                         05510015
         MVC   NEWPGM,=CL8'ISFISP'     NEW PROGRAM                      05520015
         B     XCTL00                  INVOKE ISPF SERVICE              05530015
*********************************************************************** 05540015
*                                                                     * 05550000
*        Function=UTIL (PDF Utilities)                                * 05560018
*                                                                     * 05570000
*********************************************************************** 05580015
UTIL     MVC   NEWPANEL,=CL8'ISRUTIL'  NEW PANEL                        05590015
         B     XCTL00                  INVOKE ISPF SERVICE              05600015
*                                                                       05610000
BACKLVL  STRING 'Not Supported',INTO=SHORTMSG                           05620031
         STRING 'Function ',(FUNCTION,,T),                             X05630031
               ' is not supported in this environment.',               X05640031
               INTO=LONGMSG                                             05650031
         MVI   ALARM,C'Y'              error, beep.                     05660031
         BAL   R14,SETMSG           <- send message                     05670031
         LR    R7,R15                  pass rc=8                        05680031
         B     GOBACK                  quit with RC=8                   05690031
*                                                                       05700000
ISPG054  ISPLINK ($SETMSG,=C'ISPG054 ') Command Parm is missing         05710031
         LA    R7,8                    pass rc=8                        05720031
         B     GOBACK                                                   05730031
*********************************************************************** 05740000
*                                                                     * 05750000
*        Goback to ISPF                                               * 05760031
*                                                                     * 05770000
*********************************************************************** 05780000
EXIT90   LTR   R7,R15                  DIALOG'S RETURN CODE             05790010
         BZ    GOBACK                  OK, EXIT                         05800031
         LA    R0,L'ZERRMSG            max length                       05810017
         ST    R0,DWD                  max length                       05820004
         ISPLINK ($VCOPY,$ZERRMSG,DWD,ZERRMSG,$MOVE),ERRET=GOBACK       05830031
         ISPLINK ($SETMSG,ZERRMSG)                                      05840000
*                                                                       05850000
GOBACK   LR    R1,R13                  Work area                        05860031
         L     R13,4(,R13)                                              05870000
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA   05880001
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE             05890021
         LR    R15,R7                  Return code                      05900000
         RETURN (14,12),RC=(15)                                         05910000
*********************************************************************** 05920033
*                                                                     * 05930033
*        PARM='SELECT <service>'                                      * 05940033
*                                                                     * 05950033
*        The SELECT function allows FASTPATH to be invoked at ISPF    * 05960033
*        start to perform initialization tasks such as ADDCMDS and    * 05970033
*        PRELOAD; SELECT then starts the main ISPF service,           * 05980033
*        typically a primary option menu such as ISR@PRIM.            * 05990033
*        The main ISPF service is specified as follows:               * 06000033
*                                                                     * 06010033
*        ISPF PGM(FASTPATH) PARM(SELECT PANEL(APRIOPT) NEWAPPL(MVS))  * 06020033
*                                                                     * 06030033
*        If the main ISPF service is not specified, FASTPATH          * 06040033
*        uses the following default:                                  * 06050033
*                                                                     * 06060033
*              SELECT PANEL(ISR@PRIM) NEWAPPL(ISR)                    * 06070033
*                                                                     * 06080033
*********************************************************************** 06090033
SELECT   CLC   =C'1 ',ZSCREEN          FIRST SCREEN?                    06100033
         BNE   SELECT2                 no, jump                         06110033
         BAL   R14,SETUP00          <- perform setup functions          06120033
         BAL   R14,ADDCMDS          <- add commands to ISPCMDS          06130033
SELECT2  EQU   *                                                        06140033
         ICM   R0,B'1111',OPTLEN       any parm specified?              06150033
         BZ    SELECT7                 no, use default panel            06160033
         STRING $SELECT,(OPT,(R0)),INTO=COMMAND                         06170033
         B     XCTL30                  user specified command           06180033
SELECT7  EQU   *                                                        06190033
         MVC   NEWPANEL,=C'ISR@PRIM'   default panel                    06200033
         B     XCTL00                                                   06210034
*********************************************************************** 06220034
*                                                                     * 06230034
*        Start New Screen                                             * 06240034
*                                                                     * 06250034
*********************************************************************** 06260034
NEWSCREEN LM   R7,R8,CMD@              cmd addr, end-addr               06270034
         STRING ((R7),(R8)),INTO=OPT   copy command, drop trailing +    06280034
         ST    R15,OPTLEN              length                           06290034
         MVC   NEWPGM,=CL8'ISPSTRT'    SPLIT NEW                        06300034
*********************************************************************** 06310000
*                                                                     * 06320000
*        Invoke a program, panel or command via the SELECT service.   * 06330000
*                                                                     * 06340000
*********************************************************************** 06350000
XCTL00   STRING 'SELECT PANEL(',(NEWPANEL,,T),                         X06360033
               ') OPT(',(OPT,,T),')',                                  X06370000
               INTO=COMMAND                                             06380006
         CLI   NEWPANEL,0              SELECT PANEL ?                   06390000
         BNE   XCTL20                  YES, JUMP                        06400000
         STRING 'SELECT CMD(',(NEWCMD,,T),')',                         X06410033
               INTO=COMMAND                                             06420013
         CLI   NEWCMD,0                SELECT CMD ?                     06430013
         BNE   XCTL20                  YES, JUMP                        06440013
         STRING 'SELECT PGM(',(NEWPGM,,T),                             X06450033
               ') PARM(',(OPT,,T),')',                                 X06460000
               INTO=COMMAND                                             06470006
XCTL20   CLC   ZAPPLID,NEWAPPL         CURRENT APPLID OK?               06480000
         BE    XCTL30                  YES, JUMP                        06490000
         CLI   NEWAPPL,C' '            New APPLID OK?                   06500033
         BNE   XCTL27                  No, change it                    06510033
         B     XCTL30                  YES, Continue                    06520033
*                                                                       06530000
*        Re-invoke myself with NEWAPPL(ISR)                             06540033
*                                                                       06550000
APPL_ISR L     R3,0(,R9)               point at parm                    06560004
         LH    R5,0(,R3)               parm length                      06570004
         STRING 'SELECT PGM(',(OWNNAME,,T),                            X06580033
               ') PARM(',(2(R3),(R5),T),')',                           X06590033
               INTO=COMMAND                                             06600006
*                                                                       06610000
*        Switch APPLID                                                  06620033
*                                                                       06630000
XCTL27   STRING 'Applid Switched',INTO=SHORTMSG                         06640033
         STRING 'Applid switched from ',(ZAPPLID,,T),' to ',NEWAPPL,   X06650000
               INTO=LONGMSG                                             06660006
         BAL   R14,SETMSG           <- send message                     06670018
         STRING (COMMAND,,T),' NEWAPPL(',NEWAPPL,')',INTO=COMMAND       06680006
*---------------------------------------------------------------------* 06690033
*                                                                     * 06700000
*        XCTL TO ISPEXEC                                              * 06710000
*                                                                     * 06720000
*---------------------------------------------------------------------* 06730033
XCTL30   EQU   *                                                        06740033
         BAL   R14,XCTLGET          <- find XCTL Work Area              06750033
         LR    R8,R1                   A(XCTLWORK)                      06760033
         USING XCTLWORK,R8                                              06770033
*STRING ((R8),,X),INTO=DWD                                        -DEL- 06780033
*TPUT DWD,8                                                       -DEL- 06790033
         STRING (COMMAND,,T),INTO=XCTLCMD                               06800033
         ST    R15,XCTLLEN             STORE LENGTH OF COMMAND          06810000
         LA    R15,XCTLLEN             length of command                06820033
         LA    R0,XCTLCMD              text of command                  06830033
         STM   R15,R0,XCTLPARM         parm list for ISPEXEC            06840033
         OI    XCTLPARM+4,X'80'        parm list for ISPEXEC            06850033
*L R0,DWD                                                         -DEL- 06860033
*TPUT COMMAND,(0)                                                 -DEL- 06870033
         LR    R1,R13                  A(DYNAM)                         06880033
         L     R13,4(,R13)             caller's save area               06890033
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA   06900033
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE             06910033
         LA    R1,XCTLPARM             parm list for ISPEXEC            06920033
         XCTL  (2,12),EPLOC=$ISPEXEC   pass control to ISPEXEC          06930033
         DROP  R8                      was XCTLWORK                     06940033
*---------------------------------------------------------------------* 06950031
*        ISPEXEC routine                                              * 06960031
*---------------------------------------------------------------------* 06970031
ISPEXEC  ST    R15,TOKEN               store length                     06980014
         LA    R15,TOKEN               length of command                06990014
         LA    R0,COMMAND              text of command                  07000014
         STM   R15,R0,PARMLIST         parm list for ISPEXEC            07010031
         OI    PARMLIST+4,X'80'        parm list for ISPEXEC            07020031
         LOAD  EPLOC=$ISPEXEC          V(ISPEXEC)                       07030033
         LR    R15,R0                  V(ISPEXEC)                       07040021
         LA    R1,PARMLIST             parm list for ISPEXEC            07050031
         BR    R15                     invoke ISPEXEC                   07060014
*---------------------------------------------------------------------* 07070031
*        JPASEARCH routine                                            * 07080031
*---------------------------------------------------------------------* 07090031
JPASEARCH BAKR R14,0                                                    07100017
         L     R3,CVTPTR(0,0)          point to CVT                     07110017
         USING CVTMAP,R3                                                07120017
         L     R4,PSATOLD-PSA(0,0)     Current TCB                      07130017
         USING TCB,R4                                                   07140017
         L     R4,TCBJSTCB             point to JS TCB                  07150017
         LA    R8,TCBJPQ               START OF CDE CHAIN               07160017
         LR    R9,R1                   Module name                      07170017
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE               07180017
         BALR  R14,R15              <- USES R0, R1, R8, R9, R11         07190017
         B     JPASCH9-*(,R14)     +0  FOUND, QUIT                      07200017
JPASCH8  LA    R15,4                   RC=4 (not found)                 07210017
         PR                                                             07220017
JPASCH9  SLR   R15,R15                 RC=0 (found)                     07230017
         PR                                                             07240017
         DROP  R3,R4                   CVT,TCB                          07250017
*********************************************************************** 07260000
         MACRO                                                    macro 07270030
&NAME    BEGIN_PROC &SAVE=BAKR,&LVL=,&OPT=,&APPL=                 macro 07280031
$LTORG   LOCTR                                                          07290030
&NAME2   SETC  '&NAME'                                            macro 07300031
         AIF   (T'&LVL EQ 'O').LVL9                               macro 07310031
&NAME2   CLI   ISPFVM,X'&LVL'          function supported in ISPF?      07320031
         BL    BACKLVL                 no, exit                         07330031
&NAME2   SETC  ''                                                 macro 07340031
.LVL9    ANOP                                                     macro 07350031
         AIF   ('&OPT' NE 'YES').OPT9                             macro 07360031
&NAME2   CLI   OPT,C' '                required parm present?           07370031
         BE    ISPG054                 no, exit                         07380031
&NAME2   SETC  ''                                                 macro 07390031
.OPT9    ANOP                                                     macro 07400031
         AIF   (T'&APPL EQ 'O').APPL9                             macro 07410031
&NAME2   CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 07420030
         BNE   APPL_ISR                no, switch applid                07430030
&NAME2   SETC  ''                                                 macro 07440031
.APPL9   ANOP                                                     macro 07450031
&NAME2   BAL   R15,$STRING2         <- =X'4AFF,0000,07FF'               07460033
         DC    Y(&NAME._START-*)                                        07470030
$FARRTNE LOCTR                                                          07480030
         DS    0D                                                       07490030
         AIF   ('&SAVE' EQ 'BAKR').BAKR                                 07500030
&NAME._START SAVE (14,12),,&NAME                                        07510030
         LR    R12,R15                                                  07520030
         USING &NAME._START,R12                                         07530030
         MEXIT                                                    macro 07540030
.BAKR    DC    CL8'&NAME'                                               07550030
&NAME._START BAKR R14,0                SAVE REGISTERS                   07560030
         LR    R12,R15                                                  07570030
         USING &NAME._START,R12                                         07580030
         MEND                                                     macro 07590030
*********************************************************************** 07600030
*                                                                     * 07610030
*        Function=CALENDAR (Display Status Area's Calendar)           * 07620030
*                                                                     * 07630030
*********************************************************************** 07640030
CALENDAR BEGIN_PROC LVL=41,APPL=ISR                                     07650031
         ISPLINK ($VREPLACE,=C'ZSAREAP ',=F'3',=C'CAL')                 07660030
         ISPLINK ($VPUT,=C'ZSAREAP ',$PROFILE)                          07670030
         MVC   NEWPGM,=CL8'ISPSAM'     Status Area program              07680030
         MVC   OPT(3),=C'POP'          PARM(POP)                        07690030
         LA    R1,0                    Execute command                  07700031
         PR                                                             07710031
*********************************************************************** 07720018
*                                                                     * 07730000
*        Function=CNTL (Edit SPFTEMPn)                                * 07740018
*                                                                     * 07750000
*********************************************************************** 07760018
CNTL     BEGIN_PROC APPL=ISR                                            07770031
         BAL   R14,PARSE3           <- parse options                    07780031
         CLI   PARM3,C' '              profile specified?               07790031
         BNE   CNTL2                   yes, jump                        07800018
         MVC   PARM3(4),=C'CNTL'       default profile                  07810031
CNTL2    LA    R0,L'ZTEMPN             LENGTH                           07820018
         ST    R0,DWD                  LENGTH                           07830018
         ISPLINK ($VCOPY,=C'ZTEMPN ',DWD,ZTEMPN,$MOVE)                  07840018
         CLC   =C'0 ',OPT              edit SPFTEMP0 ?                  07850018
         BNE   CNTL10                  no, jump                         07860018
         MVC   ZTEMPN,=C'ISPCTL0 '     ddname for SPFTEMP0.CNTL         07870018
         DEVTYPE ZTEMPN,DWD            check if DD is allocated         07880018
         LTR   R15,R15                 ISPCTL0 allocated?               07890018
         BZ    CNTL10                  yes, jump                        07900018
         LA    R0,L'ZMLPS              LENGTH                           07910044
         ST    R0,DWD                  LENGTH                           07920044
         ISPLINK ($VCOPY,=C'ZMLPS ',DWD,ZMLPS,$MOVE)                    07930044
         LTR   R15,R15                 ZMLPS supported ?                07940044
         BNZ   CNTL3                   no, jump                         07950044
         CLC   =C'YES',ZMLPS           ISPF Profile Sharing on?         07960044
         BNE   CNTL3                   no, jump                         07970044
         LA    R0,L'ZSEQ               LENGTH                           07980044
         ST    R0,DWD                  LENGTH                           07990044
         ISPLINK ($VCOPY,=C'ZSEQ ',DWD,ZSEQ,$MOVE)                      08000044
         STRING (ZUSER,,T),'.ISP',(ZSEQ,,T),'.SPFTEMP0.CNTL',          X08010044
               INTO=ZWRKDSN                                             08020044
         B     CNTL4                                                    08030044
CNTL3    EQU   *                                                        08040044
         STRING (ZUSER,,T),'.SPFTEMP0.CNTL',INTO=ZWRKDSN                08050018
CNTL4    EQU   *                                                        08060044
         STRING 'EDIT DATASET(''',(ZWRKDSN,,T),'''',                   X08070018
               ') PROFILE(',(PARM3,,T),')',                            X08080031
               INTO=COMMAND                                             08090018
         BAL   R14,ISPEXEC          <- execute EDIT command             08100018
         LR    R7,R15                  save return code                 08110018
         B     CNTL90                  exit                             08120018
CNTL10   EQU   *                                                        08130018
         STRING 'LMINIT DATAID(ID1) DDNAME(',ZTEMPN,') ENQ(SHRW)',     X08140018
               INTO=COMMAND                                             08150018
         BAL   R14,ISPEXEC          <- execute LMINIT command           08160018
         LTR   R15,R15                 COMMAND OK ?                     08170018
         BNZ   CNTL99                  NO, EXIT                         08180018
         LA    R0,L'DATAID             max length                       08190018
         ST    R0,DWD                  max length                       08200018
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=CNTL99        08210018
         STRING 'EDIT DATAID(',DATAID,                                 X08220018
               ') PROFILE(',(PARM3,,T),')',                            X08230031
               INTO=COMMAND                                             08240018
         BAL   R14,ISPEXEC          <- execute EDIT command             08250018
         LR    R7,R15                  save return code                 08260018
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND                08270018
         BAL   R14,ISPEXEC          <- execute LMFREE command           08280018
CNTL90   EQU   *                                                        08290018
         LTR   R15,R7                  data saved?                      08300018
         BNZ   CNTL99                  no, jump                         08310018
         STRING 'Data Set Saved',INTO=SHORTMSG                          08320018
         STRING 'Control Data Set Saved: ',ZTEMPN,INTO=LONGMSG          08330018
         BAL   R14,SETMSG           <- send message                     08340018
CNTL99   EQU   *                                                        08350018
         LA    R1,4                    Exit with rc=(15)                08360031
         PR                                                             08370031
*********************************************************************** 08380030
*                                                                     * 08390000
*        Function=CONNECT                                             * 08400030
*                                                                     * 08410000
*********************************************************************** 08420030
CONNECT  BEGIN_PROC LVL=42,APPL=ISR                                     08430031
         CLI   ZWSCON,C' '             already connected?               08440030
         BE    CONNECT5                no, jump                         08450030
         ISPLINK ($SETMSG,=C'ISPO908 ') Already Connected               08460030
CONNECT5 STRING 'SETTINGS',ZDEL,'GUIINIT',INTO=COMMAND                  08470030
         ST    R15,DWD                 store length                     08480019
         ISPLINK ($VREPLACE,=C'CMD ',DWD,COMMAND)                       08490030
         STRING 'DISPLAY PANEL(ISPSTRTP) COMMAND(CMD)',INTO=COMMAND     08500019
         BAL   R14,ISPEXEC          <- execute command                  08510031
         LA    R1,4                    Exit with rc=(15)                08520031
         PR                                                             08530031
*********************************************************************** 08540020
*                                                                     * 08550000
*        PARM='CRASH<,command>'   (Quick exit from ISPF)              * 08560022
*                                                                     * 08570000
*        If you use a REXX exec to invoke ISPF (generally at LOGON    * 08580022
*        time), then you get these messages:                          * 08590022
*                                                                     * 08600000
*      System abend code 222, reason code 00000000.                   * 08610022
*      Abend in host command EXEC or address environment routine TSO. * 08620022
*                                                                     * 08630000
*********************************************************************** 08640020
CRASH    BEGIN_PROC                                                     08650031
*---------------------------------------------------------------------* 08660023
*                                                                     * 08670000
*        Special processing for LOGON & LOGOFF commands               * 08680023
*                                                                     * 08690000
*        This code prevents the TMP from issuing the                  * 08700023
*        IKJ56400A ENTER LOGON OR LOGOFF prompt when the user enters  * 08710023
*        a CRASH LOGON or CRASH LOGOFF command while CLISTs or EXECs  * 08720023
*        are executing in some of the logical screens.                * 08730023
*                                                                     * 08740000
*---------------------------------------------------------------------* 08750023
         CLC   =C'LOGOFF ',OPT8        LOGON/LOGOFF ?                   08760029
         BE    CRASH32                 YES, JUMP                        08770023
         CLC   =C'LOGON ',OPT8         LOGON/LOGOFF ?                   08780029
         BNE   CRASH51                 no, exit                         08790023
         MVC   OPT8+6(2),BLANKS        "LOGON XX" => "LOGON   "         08800029
*                                                                       08810000
CRASH32  L     R2,CVTPTR(0,0)          CVT address                      08820023
         L     R2,CVTLINK-CVTMAP(,R2)  DCB for SYS1.LINKLIB             08830023
         LOAD  EPLOC=OPT8,DCB=(R2)     PRE-LOAD LOGON/LOGOFF            08840029
         STRING 'CMD(TSOEXEC ',(OPT,,T),') MODE(FSCR)',INTO=COMMAND     08850023
         ST    R15,DWD                 STORE LENGTH OF COMMAND          08860023
         LOAD  EPLOC=COMMAND+4,DCB=(R2) PRE-LOAD TSOEXEC                08870029
         ISPLINK ($SELECT,DWD,COMMAND)                                  08880023
         LTR   R7,R15                  DIALOG'S RETURN CODE             08890023
         BZ    CRASH71                 GOOD, CONTINUE                   08900023
         LA    R1,4                    Exit with rc=(15)                08910031
         PR                            command failed                   08920031
*---------------------------------------------------------------------* 08930022
*                                                                     * 08940000
*        STACK a TSO command                                          * 08950022
*                                                                     * 08960000
*---------------------------------------------------------------------* 08970022
CRASH51  EQU   *                                                        08980023
         L     R4,TSI@                 R4->TSI                          08990030
         USING TSI,R4                                                   09000030
         CLC   =C'READY ',OPT8         go back to READY prompt?         09010029
         BE    CRASH71                 yes, skip STACK macro            09020028
         L     R7,OPTADDR              1st byte of command              09030031
         ICM   R8,B'1111',OPTLEN       anything to add to the stack?    09040030
         BZ    CRASH61                 no, jump                         09050028
*                                                                       09060000
         CLI   OPT,C'='                User entered "CRASH ="  ?        09070031
         BE    CRASH53                 yes, jump                        09080031
         BAL   R14,CRASH58          <- build LSD and issue STACK macro  09090031
         B     CRASH71                 continue                         09100031
*                                                                       09110000
*        User entered CRASH =xxx: validate xxx options                  09120031
*                                                                       09130000
CRASH53  EQU   *                                                        09140031
         LA    R0,L'OPT8               max length                       09150031
         CLR   R8,R0                   option string too long?          09160031
         BH    CRASH59                 yes, error                       09170031
         LA    R5,OPT8+1               1st option                       09180031
         LR    R6,R8                   l'opt8                           09190031
         BCTR  R6,0                    skip "="                         09200031
*loop                                                                   09210031
CRASH53B EQU   *                                                        09220031
         CLI   0(R5),C'P'              CRASH =P (PARM)                  09230031
         BE    CRASH53N                yes, jump                        09240031
         CLI   0(R5),C'L'              CRASH =L (LOGONCMD)              09250031
         BE    CRASH53N                yes, jump                        09260031
         CLI   0(R5),C'I'              CRASH =I (ISPF)                  09270031
         BNE   CRASH59                 no, error                        09280031
CRASH53N LA    R5,1(,R5)               next option                      09290031
         BCT   R6,CRASH53B             next option                      09300031
*endloop                                                                09310031
*                                                                       09320000
*        User entered CRASH =xxx: stack commands                        09330031
*                                                                       09340000
         LR    R6,R8                   l'opt8                           09350031
         BCTR  R6,0                    skip "="                         09360031
         LA    R5,OPT8(R6)             last option                      09370031
*loop                                                                   09380031
CRASH54  EQU   *                                                        09390031
         CLI   0(R5),C'L'              CRASH =L (LOGONCMD)              09400031
         BE    CRASH54L                yes, jump                        09410031
         CLI   0(R5),C'I'              CRASH =I (ISPF)                  09420031
         BE    CRASH54I                yes, jump                        09430031
*                                                                       09440000
*        If the user entered CRASH =P, retrieve the PARM                09450031
*        specified in the TSO LOGON procedure.                          09460031
*                                                                       09470000
CRASH54P L     R14,PSATOLD-PSA(0,0)    Current TCB                      09480031
         USING TCB,R14                                                  09490031
         L     R14,TCBJSCB             Job Step Control Block (JSCB)    09500031
         USING IEZJSCB,R14                                              09510031
         L     R14,JSCSCT              Current step's SCT prefix        09520031
         USING INSMSCT-16,R14                                           09530031
         LH    R8,SCTSEXEC             parm length                      09540031
         ICM   R14,B'0111',SCTXBTTR    address of SCTX (SCT extension)  09550031
         USING SCTXIN-16,R14                                            09560031
         LA    R7,SCTXPARM             TMP PARM                         09570031
         LTR   R8,R8                   is there a PARM?                 09580031
         BNZ   CRASH54S                yes, issue STACK                 09590031
         B     CRASH54N                no, continue                     09600031
         DROP  R14                                                      09610033
*                                                                       09620000
*        If the user entered CRASH =L, retrieve the command             09630031
*        the user specified on the TSO/E LOGON panel.                   09640031
*                                                                       09650000
CRASH54L L     R1,PSAAOLD-PSA(0,0)     Current ASCB                     09660031
         L     R2,ASCBASXB-ASCB(,R1)   MY ASXB                          09670031
         L     R3,ASXBLWA-ASXB(,R2)    LOGON WORK AREA                  09680031
         LA    R7,LWALGCMD-LWA(,R3)    LOGON command                    09690031
         LA    R8,L'LWALGCMD           max length                       09700031
         B     CRASH54S                issue STACK                      09710031
*                                                                       09720000
*        If the user entered CRASH =I, retrieve the command             09730031
*        used to invoke ISPF.                                           09740031
*                                                                       09750000
CRASH54I LA    R7,RACFWORK             work area                        09760031
         LA    R8,L'RACFWORK           max length                       09770031
         ST    R8,DWD                  max length                       09780031
         ISPLINK ($VCOPY,=C'ZTSICMD ',DWD,(R7),$MOVE)                   09790031
         L     R8,DWD                  get length of ZTSICMD            09800031
*                                                                       09810000
CRASH54S EQU   *                                                        09820031
         BAL   R14,CRASH58          <- build LSD and issue STACK macro  09830031
CRASH54N EQU   *                                                        09840031
*@SNAP OPT8,((R7),(R8))                                           -DEL- 09850031
         BCTR  R5,0                    prev option                      09860031
         BCT   R6,CRASH54              prev option                      09870031
*endloop                                                                09880031
         B     CRASH71                 continue                         09890031
*                                                                       09900000
*        Build List Source Descriptor (LSD) and issue STACK macro       09910031
*                                                                       09920000
CRASH58  BAKR  R14,0                                                    09930031
         LA    R0,LSD_LENGTH(R8)       length of the LSD + text         09940022
         GETMAIN RU,LV=(0),SP=78,LOC=BELOW                              09950022
         LR    R9,R1                   ADDRESS OF THE LSD               09960022
         USING LSD,R9                                                   09970022
         XC    LSD(LSD_LENGTH),LSD     Clear LSD                        09980022
         LA    R1,LSD+LSD_LENGTH       POINT TO IN-STORAGE LIST         09990022
         ST    R1,LSDADATA             save addr into LSD               10000022
         ST    R1,LSDANEXT             save addr into LSD               10010022
         STH   R8,LSDTOTLN             store total length               10020022
         STH   R8,LSDRCLEN             length of F-len rec              10030022
         STRING ((R7),(R8)),INTO=(LSD+LSD_LENGTH,(R8))                  10040031
         DROP  R9                      LSD                              10050030
*                                                                       10060000
         L     R5,TSIECTP              ECT ADDRESS                      10070030
         L     R6,TSIUPTP              UPT ADDRESS                      10080030
         STACK PARM=STACKL,ECT=(R5),UPT=(R6),ECB=DWD,                  X10090030
               STORAGE=((R9),PROCL),MF=(E,TENWORDS)                     10100022
         LTR   R15,R15                 STACK OK?                  -DEL- 10110022
         BZ    CRASH58X                yes, exit                  -DEL- 10120031
 WTO 'STACK FAILED',ROUTCDE=11                                    -DEL- 10130022
CRASH58X EQU   *                                                  -DEL- 10140031
         PR                                                             10150031
*                                                                       10160000
*        Invalid option string                                          10170031
*                                                                       10180000
CRASH59  EQU   *                                                        10190031
         STRING 'Invalid Option',INTO=SHORTMSG                          10200031
         STRING 'Option "',(OPT,,T),'" is invalid, should be "=pli"',  X10210031
               INTO=LONGMSG                                             10220031
         MVI   ALARM,C'Y'              error, beep.                     10230031
         BAL   R14,SETMSG           <- send message                     10240031
         LA    R1,4                    Exit with rc=(15)                10250031
         PR                                                             10260031
*---------------------------------------------------------------------* 10270028
*                                                                     * 10280000
*        If CRASH is entered without any operand, reset the ECTIOWA   * 10290029
*        field in the primary ECT to the value it contained when ISPF * 10300029
*        was entered.  This ensures that, if ISPF is invoked from a   * 10310029
*        CLIST, processing will resume at the next CLIST statement.   * 10320029
*                                                                     * 10330000
*---------------------------------------------------------------------* 10340028
CRASH61  EQU   *                                                        10350028
         L     R4,TSITPDP              A(TPD)                           10360028
         USING TPD,R4                                                   10370028
         CLC   =C'TPD',TPDTBLID        am I lost?                       10380028
         BNE   CRASH69                 yes, exit                        10390028
         L     R4,TPDDTLDP             A(TLD0)                          10400030
         USING TLD,R4                                                   10410028
         CLC   =C'TLD0',TLDTBLID       am I lost?                       10420028
         BNE   CRASH69                 yes, exit                        10430028
*WTO 'TLD0',ROUTCDE=11                                            -DEL- 10440028
         L     R5,TLDECTP              load ECT Address                 10450028
         USING ECT,R5                                                   10460028
         MVC   ECTIOWA,TLDIOWA         restore ECT Address              10470028
         DROP  R4,R5                   TLD,ECT                          10480029
CRASH69  EQU   *                                                        10490028
*---------------------------------------------------------------------* 10500031
*                                                                     * 10510031
*        Close Referral list tables                                   * 10520031
*                                                                     * 10530031
*---------------------------------------------------------------------* 10540031
CRASH71  EQU   *                                                        10550031
         STRING 'TBCLOSE ISRLLIST LIBRARY(ISPPROF)',INTO=COMMAND        10560032
         BAL   R14,ISPEXEC          <- close referral list              10570031
         STRING 'TBCLOSE ISRPLIST LIBRARY(ISPPROF)',INTO=COMMAND        10580032
         BAL   R14,ISPEXEC          <- close referral list              10590031
*                                                                       10600000
         CLI   ZENVIR+5,C'5'           ISPF V5 or above ?               10610048
         BNL   CRASH81                 NO, SKIP ISRJLIST/ISRRLIST       10620048
         STRING 'TBCLOSE ISRJLIST LIBRARY(ISPPROF)',INTO=COMMAND        10630032
         BAL   R14,ISPEXEC          <- close referral list              10640031
         STRING 'TBCLOSE ISRRLIST LIBRARY(ISPPROF)',INTO=COMMAND        10650032
         BAL   R14,ISPEXEC          <- close referral list              10660031
*---------------------------------------------------------------------* 10670028
*                                                                     * 10680000
*        Terminate ISPF by abending the IKJEFT09 sub-task             * 10690028
*                                                                     * 10700000
*---------------------------------------------------------------------* 10710028
CRASH81  EQU   *                                                        10720031
         LA    R1,CRASH85              address of the abend routine     10730031
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC                10740030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              10750030
         BAL   R14,EXECURP          <- Execute CRASH85 as a URP         10760030
CRASH85  ABEND X'222',,,SYSTEM         This is my URP !!!               10770031
*********************************************************************** 10780020
*                                                                     * 10790000
*        Function='D,dsname,member,NOENQ' (Delete Member)             * 10800023
*                                                                     * 10810000
*********************************************************************** 10820020
DELMBR   BEGIN_PROC                                                     10830031
         BAL   R14,PARSE3           <- parse options                    10840031
         STRING 'LMINIT DATAID(ID1) DATASET(''',(OPT,,T),              X10850020
               '''),ENQ(SHRW)',INTO=COMMAND                             10860020
         BAL   R14,ISPEXEC          <- execute command                  10870020
         LTR   R15,R15                 COMMAND OK ?                     10880020
         BNZ   DELMBR99                NO, EXIT                         10890020
         LA    R0,L'DATAID             max length                       10900020
         ST    R0,DWD                  max length                       10910020
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=DELMBR99      10920020
         STRING 'LMOPEN DATAID(',DATAID,') OPTION(OUTPUT)',            X10930020
               INTO=COMMAND                                             10940020
         BAL   R14,ISPEXEC          <- execute command                  10950020
         LTR   R15,R15                 COMMAND OK ?                     10960020
         BNZ   DELMBR98                NO, EXIT                         10970020
         STRING 'LMMDEL DATAID(',DATAID,') MEMBER(',(PARM3,,T),')',    X10980031
               INTO=COMMAND                                             10990020
         CLI   PARM4,C' '              NOENQ?                           11000023
         BE    DELMBR85                NO, JUMP                         11010023
         CLI   ISPFVM,X'41'            ISPF V4 or up?                   11020023
         BL    DELMBR85                NO, JUMP                         11030023
         STRING (COMMAND,,T),1X,PARM4,INTO=COMMAND                      11040023
DELMBR85 EQU   *                                                        11050023
         BAL   R14,ISPEXEC          <- execute command                  11060020
         LTR   R15,R15                 COMMAND OK ?                     11070020
         BNZ   DELMBR98                NO, EXIT                         11080020
         STRING 'Member Deleted',INTO=SHORTMSG                          11090020
         STRING 'Member ''',(OPT,,T),'(',(PARM3,,T),                   X11100031
               ')'' has been deleted',INTO=LONGMSG                      11110020
         BAL   R14,SETMSG           <- send message                     11120020
DELMBR98 EQU   *                                                        11130020
         LR    R7,R15                  save return code                 11140020
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND                11150020
         BAL   R14,ISPEXEC          <- execute command                  11160020
         LR    R15,R7                  restore return code              11170020
DELMBR99 EQU   *                                                        11180020
         LA    R1,4                    Exit with rc=(15)                11190031
         PR                                                             11200035
*********************************************************************** 11210049
*                                                                     * 11220049
*        PARM='DSINFO,dsname,volser'   (Data-Set Info)                * 11230049
*                                                                     * 11240049
*              opt=&dsname,parm3=&volser                              * 11250049
*                                                                     * 11260049
*********************************************************************** 11270049
DSINFO   BEGIN_PROC                                                     11280049
         BAL   R14,PARSE3           <- parse options                    11290049
         STRING '''GILBERT.JCL''',INTO=ZWRKDSN                          11300049
         STRING 1X,INTO=ZWRKVOL                                         11310049
         STRING OPT,INTO=ZWRKDSN       PARM2/DSN                        11320049
         STRING PARM3,INTO=ZWRKVOL     PARM3/VOL                        11330049
         STRING 'CMD(%PDF34I ',(ZWRKDSN,,T),1X,ZWRKVOL,')',            X11340049
               INTO=COMMAND                                             11350049
         ST    R15,DWD                 store length                     11360049
*                                                                       11370049
         ISPLINK ($SELECT,DWD,COMMAND),ERRET=DSINFO9                    11380049
*                                                                       11390049
DSINFO9  EQU   *                                                        11400049
         LA    R1,4                    Exit with rc=(15)                11410049
         PR                                                             11420049
 AGO .DSI99                                                             11430049
         STRING 1X,INTO=ZWRKVOL                                         11440049
         STRING 'DSN="',(ZWRKDSN,,T),'";',                             X11450049
               'VOL="',ZWRKVOL,'";',                                   X11460049
               'ISPEXEC VPUT (DSN VOL) SHARED;',                       X11470049
               'ISPEXEC CONTROL NONDISPL ENTER;',                      X11480049
               'say dsn vol;',                                         X11490049
               'ISPEXEC SELECT PGM(ISRUDA) PARM(ISRDDNPI);',           X11500049
               'ISPEXEC VERASE (DSN VOL) BOTH;',                       X11510049
               INTO=STRING1                                             11520049
         LA    R14,STRING1             addr of REXX stmt                11530049
         STM   R14,R15,DWD             store addr/len                   11540049
 #SNAP STRING1                                                          11550049
         LA    R1,DWD                  FIRST STMT ADDR/LEN              11560049
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         11570049
         SLR   R2,R2                   No arguments                     11580049
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              11590049
.DSI99 ANOP                                                             11600049
*********************************************************************** 11610027
*                                                                     * 11620000
*        PARM='EXECPGM,pgm<,parm>' (EXEC PGM from Link-list)          * 11630027
*                                                                     * 11640000
*********************************************************************** 11650027
EXECPGM  BEGIN_PROC                                                     11660031
         BAL   R14,PARSE3           <- parse options                    11670031
         STRING (PARM3,,T),INTO=(STRING1+2,L'STRING1-2)                 11680027
         STH   R15,STRING1             length of parm                   11690027
         LA    R0,STRING1              addr of parm                     11700027
         ST    R0,PARMLIST             build parm                       11710027
         OI    PARMLIST,X'80'          build parm                       11720027
         LA    R1,PARMLIST             A(PARM)                          11730027
         L     R2,CVTPTR(0,0)          CVT address                      11740027
         L     R2,CVTLINK-CVTMAP(,R2)  DCB for SYS1.LINKLIB             11750027
         ATTACH EPLOC=OPT,ECB=DWD,TASKLIB=(R2),SF=(E,ATTACHL)           11760027
         ST    R1,DWD+4                save TCB address                 11770027
         WAIT  1,ECB=DWD               wait for completion              11780027
         DETACH DWD+4                  detach sub-task                  11790027
         LH    R15,DWD+2               return code                      11800027
         LA    R1,4                    Exit with rc=(15)                11810031
         PR                                                             11820031
*********************************************************************** 11830031
*                                                                     * 11840031
*        FUNCTION=FSPASTE  (full-screen paste)                        * 11850031
*                                                                     * 11860031
*********************************************************************** 11870031
FSPASTE  BEGIN_PROC                                                     11880031
         GTSIZE ,                      get screen size                  11890031
         ST    R0,ZSCREEND             SCREEN DEPTH (ROWS)              11900031
         ST    R1,ZSCREENW             SCREEN WIDTH (COLUMNS)           11910031
         MR    R0,R0                   screen end = rows * columns      11920031
         LR    R3,R1                   pass screen size                 11930031
         GETMAIN R,LV=(R3)             GET FULL-SCREEN BUFFER           11940031
         LR    R4,R1                   pass address                     11950031
         MVC   PARM3(9),=X'C3,11,4040,13,3C,0,0,40' WCC,SBA,1,1,IC,RA   11960031
         LR    R0,R3                   screen length                    11970031
         BCTR  R0,0                    minus one                        11980031
         STCM  R0,B'0011',PARM3+6      BINARY SCREEN ADDR (14 BITS)     11990031
*-       ISPLINK ($CONTROL,$DISPLAY,$SAVE) CONTROL DISPLAY SAVE         12000046
*-       ISPLINK ($CONTROL,$DISPLAY,=C'LINE START(1)')                  12010046
*-       ISPLINK ($CONTROL,$DISPLAY,$RESTORE) CONTROL DISPLAY RESTORE   12020046
*                                                                       12030000
         STRING 'CONTROL DISPLAY ','SAVE',INTO=COMMAND                  12040031
         BAL   R14,ISPEXEC          <- execute command                  12050031
*                                                                       12060000
*        If we're in 24X80 mode on a model 5,                           12070031
*        tell ISPF to clear the screen                                  12080031
*                                                                       12090000
         L     R1,TLD@                 R1->TLD                          12100031
         L     R1,TLDMPSWD-TLD(,R1)    max line width                   12110031
*@SNAP ZSCREENW                                                   -DEL- 12120031
         CL    R1,ZSCREENW             SIZE=MAX?                        12130031
         BE    FSPASTE3                yes, do not clear screen         12140031
         STRING 'CONTROL DISPLAY ','LINE START(1)',INTO=COMMAND         12150031
         BAL   R14,ISPEXEC          <- execute command                  12160031
**       STFSMODE ON,INITIAL=YES       SWITCH TO FULL-SCREEN MODE -DEL- 12170031
FSPASTE3 EQU   *                                                        12180031
         TPUT  PARM3,9,FULLSCR         CLEAR THE SCREEN WITH SPACES     12190031
         LTR   R15,R15                 TPUT OK?                         12200031
         BNZ   FSPASTE8                NO, EXIT                         12210031
         TGET  (R4),(R3)               READ REPLY                       12220031
         LTR   R15,R15                 TGET OK?                         12230031
         BNZ   FSPASTE8                NO, EXIT                         12240031
         STRING ((R4),(R1),T),INTO=((R4),(R3)) find end of data         12250034
         SLR   R14,R14                                                  12260034
         D     R14,ZSCREENW            calculate number of lines        12270034
         ST    R15,DWD+4               save it for RDRTNE               12280034
*@SNAP ((R4),(R3))                                                -DEL- 12290034
*        TPUT  PARM3,9,FULLSCR         CLEAR THE SCREEN           -DEL- 12300031
         ST    R4,DWD                  PASS BUFFER ADDRESS              12310031
*                                                                       12320038
*        Invoke EDIF (ISPF V2-V4)                                       12330038
*                                                                       12340038
         CLI   ISPFVM,X'50'            ISPF V5 or up?                   12350038
         BNL   FSPASTE5                yes, jump                        12360038
         ISPLINK (=C'EDIF',            ISPF SERVICE                    X12370031
               FSPASTE7,               Title                           X12380031
               =C'FSPASTE ',           PROFILE NAME                    X12390031
               =C'F ',                 RECFM                           X12400031
               ZSCREENW,               LRECL                           X12410031
               =A(RDRTNE),             READ ROUTINE                    X12420031
               =A(WRITERTN),           WRITE ROUTINE                   X12430031
               0,                      COMMAND EXIT                    X12440031
               DYNAM)                  PARM FOR READ ROUTINE            12450031
         B     FSPASTE8                                                 12460038
WRITERTN SLR   R15,R15                 simulate successful write        12470038
         BR    R14                     GOBACK                           12480038
*                                                                       12490000
*        Invoke VIIF (ISPF V5)                                          12500038
*                                                                       12510000
FSPASTE5 EQU   *                                                        12520038
         ISPLINK (=C'VIIF',            ISPF SERVICE                    X12530038
               FSPASTE7,               Title                           X12540038
               =C'FSPASTE ',           PROFILE NAME                    X12550038
               =C'F ',                 RECFM                           X12560038
               ZSCREENW,               LRECL                           X12570038
               =A(RDRTNE),             READ ROUTINE                    X12580038
               0,                      COMMAND EXIT                    X12590038
               DYNAM)                  PARM FOR READ ROUTINE            12600038
*                                                                       12610000
FSPASTE8 EQU   *                                                        12620031
         STRING 'CONTROL DISPLAY ','RESTORE',INTO=COMMAND               12630031
         BAL   R14,ISPEXEC          <- execute command                  12640031
*                                                                       12650000
         FREEMAIN R,LV=(R3),A=(R4)     FREE FULL-SCREEN BUFFER          12660031
         LA    R1,4                    exit                             12670031
         PR                                                             12680031
*                                                                       12690000
FSPASTE7 DC    C'Full-Screen PASTE '   TITLE                            12700031
*                                                                       12710000
*        Read exit routine for EDIF/VIIF                                12720031
*                                                                       12730000
         PUSH  USING                                                    12740031
         DROP                                                           12750031
RDRTNE   SAVE  (14,12),,FSPASTE-RDRTNE                                  12760031
         LR    R12,R15                                                  12770031
         USING RDRTNE,R12                                               12780031
         L     R11,12(,R1)             PTR TO DIALOG DATA AREA          12790031
         L     R11,0(,R11)             A(DYNAM)                         12800031
         USING DYNAM,R11                                                12810031
         L     R6,00(,R1)              RECORD ADDR                      12820031
         L     R5,CURRLINE             CURRENT LINE NUMBER              12830031
         CL    R5,ZSCREEND             LAST LINE ?                      12840031
         BE    RDRTN88                 YES, EXIT                        12850031
 ORG *-8                                                                12860034
         CL    R5,DWD+4                LAST LINE ?                      12870034
         BH    RDRTN88                 YES, EXIT                        12880034
         LA    R0,1(,R5)               NEXT LINE                        12890031
         ST    R0,CURRLINE             NEXT RECORD                      12900031
         MH    R5,ZSCREENW+2           MULT BY LINE LENGTH              12910031
         AL    R5,DWD                  CHANGE OFFSET TO ADDRESS         12920031
         ST    R5,0(,R6)               PASS DATA ADDRESS                12930031
         RETURN (14,12),RC=0           GOBACK TO EDIT                   12940031
*                                                                       12950000
RDRTN88  RETURN (14,12),RC=8           GOBACK TO BRIF                   12960031
         POP   USING                                                    12970031
*********************************************************************** 12980017
*                                                                     * 12990000
*        PARM='FTINCL,&skel,&panel,&applid'                           * 13000018
*                                                                     * 13010031
*              opt=&skel,parm3=&panel,parm4=&applid                   * 13020031
*                                                                     * 13030000
*********************************************************************** 13040017
FTINCL   BEGIN_PROC                                                     13050031
         BAL   R14,PARSE3           <- parse options                    13060031
         CLI   PARM4,C' '              APPLID SPECIFIED?                13070018
         BE    FTINCL2                 NO, DO NOT SWITCH APPLID         13080018
         MVC   NEWAPPL,PARM4           MOVE APPLID                      13090018
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 13100018
         BE    FTINCL2                 yes, continue                    13110031
         LA    R1,8                    no, switch to APPL=PARM4         13120031
         PR                                                             13130031
FTINCL2  EQU   *                                                        13140030
         CLI   PARM3,C' '              ENTER PANEL?                     13150031
         BE    FTINCL3                 NO, JUMP                         13160017
* ISPEXEC DISPLAY PANEL(&panel)                                         13170030
         STRING 'DISPLAY PANEL(',(PARM3,,T),')',INTO=COMMAND            13180031
         BAL   R14,ISPEXEC          <- execute command                  13190017
         LTR   R15,R15                                                  13200031
         BNZ   FTINCL9                 RC>0 (ERROR)                     13210017
* ISPEXEC FTOPEN TEMP                                                   13220030
FTINCL3  STRING 'FTOPEN TEMP',INTO=COMMAND                              13230017
         BAL   R14,ISPEXEC          <- execute command                  13240017
         CH    R15,=H'8'                                                13250017
         BH    FTINCL9                 RC>8 (ERROR)                     13260017
* ISPEXEC FTINCL &skel                                                  13270030
         STRING 'FTINCL ',OPT,INTO=COMMAND                              13280017
         BAL   R14,ISPEXEC          <- execute command                  13290017
         LR    R7,R15                  SAVE RETURN CODE                 13300017
* ISPEXEC FTCLOSE                                                       13310017
         STRING 'FTCLOSE ',INTO=COMMAND                                 13320017
         BAL   R14,ISPEXEC          <- execute command                  13330017
         LTR   R15,R7                  ERROR IN FTINCL?                 13340031
         BNZ   FTINCL9                 RC>0 (ERROR)                     13350031
* ISPEXEC SELECT PGM(FASTPATH) PARM(CNTL)                               13360020
         MVC   NEWPGM,OWNNAME          PGM(FASTPATH)                    13370030
         STRING 'CNTL',INTO=OPT        PARM(CNTL)                       13380030
         LA    R1,0                    Execute command                  13390031
         PR                                                             13400031
FTINCL9  EQU   *                                                        13410020
         LA    R1,4                    Exit with rc=(15)                13420031
         PR                                                             13430031
*********************************************************************** 13440015
*                                                                     * 13450000
*        Function=ICS   (ISPF Command Shell)                          * 13460018
*                                                                     * 13470000
*********************************************************************** 13480015
ICS      BEGIN_PROC                                                     13490031
         MVC   NEWPGM,=CL8'ISRRCL'     NEW PROGRAM                      13500015
         MVC   OPT(2),=C'C1'           PARM                             13510015
         CLI   ISPFVM,X'40'            ISPF 4.1 or up?                  13520015
         BH    ICS8                    yes, jump                        13530015
         MVC   NEWPGM,=CL8'ISRPTC'     NEW PROGRAM (ISPF 3.x)           13540015
         MVC   OPT,BLANKS              NO PARM                          13550015
ICS8     LA    R1,0                    Invoke ISPF service              13560031
         PR                                                             13570031
*********************************************************************** 13580000
*                                                                     * 13590000
*        FUNCTION=EDIT, BROWSE, VIEW, WP                              * 13600018
*                                                                     * 13610000
*********************************************************************** 13620000
EDBRVIWP BEGIN_PROC                                                     13630031
         BAL   R14,PARSE3           <- parse options                    13640031
         MVC   PROF,PARM3              EDIT profile                     13650031
         CLI   FUNCTION,C'W'           PARM=WP?                         13660031
         BNE   EDBR010                 no, jump                         13670031
         CLI   ISPFVM,X'42'            ISPF 4.2 or up?                  13680014
         BNL   EDBR010                 yes, jump                        13690017
         STRING '%DSLIST',INTO=NEWCMD  TSO %DSLIST                      13700013
         B     EDBR980                 execute command                  13710031
*                                                                       13720000
EDBR010  CLI   OPT,C' '                OPT=''?                          13730017
         BE    EDBR700                 yes, jump                        13740030
         CLI   FUNCTION+1,C' '         PARM=E/B/V  direct browse/edit   13750031
         BE    EDBR800                 yes, jump there                  13760031
*                                                                       13770034
         CLI   PLUSSIGN,C'+'           start new screen?                13780034
         BE    EDBR9816                yes, do it                       13790034
*---------------------------------------------------------------------* 13800000
*                                                                     * 13810000
*        I've been invoked with PARM='EDIT,opt' or 'BROWSE,opt'.      * 13820031
*                                                                     * 13830000
*---------------------------------------------------------------------* 13840001
EDBR020  CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 13850004
         BNE   EDBR_ISR                no, jump                         13860031
         OC    OPT,BLANKS              convert to uppercase             13870000
*                                                                       13880000
*        Define profile variables used on EDIT/BROWSE panels            13890030
*                                                                       13900000
         ISPLINK ($VDEFINE,VARLIST,PRJ1,$CHAR,=F'8')                    13910004
*$$      ISPLINK ($VDEFINE,VARLISTW,ZREFTYPE,$CHAR,=F'8')         -DEL- 13920034
         ISPLINK ($VDEFINE,=C'ZWRKVOL ',ZWRKVOL,$CHAR,=F'6')            13930034
         ISPLINK ($VDEFINE,=C'ZREFTYPE ',ZREFTYPE,$CHAR,=F'1')          13940034
         ISPLINK ($VDEFINE,=C'ZWRKDSN ',ZWRKDSN,$CHAR,=A(L'ZWRKDSN))    13950008
*                                                                       13960000
*        Check for ED MY.DATA.SET or ED CLIST(MBR)                      13970030
*                                                                       13980000
         CLC   =C'* ',OPT              previous data set?               13990030
         BE    EDBR620                 yes, jump                        14000030
         CLI   OPT,C''''               fully-qualified dsname?          14010030
         BE    EDBR660                 yes, jump                        14020030
         CLC   =C'/ ',OPT              reflist?                         14030030
         BE    EDBR580                 yes, jump                        14040030
         CLI   OPT+0,C'/'              work-station file (UNIX) ?       14050030
         BE    EDBR900                 yes, jump                        14060030
         CLI   OPT+0,C'~'              work-station file (?) ?          14070030
         BE    EDBR900                 yes, jump                        14080030
         CLI   OPT+1,C':'              work-station file (DOS, OS/2) ?  14090030
         BE    EDBR900                 yes, jump                        14100030
         CLI   OPT+6,C':'              volser:dsname?                   14110033
         BE    EDBR670                 yes, exit                        14120033
         LA    R1,OPT                  1st pos of dsname                14130030
         LA    R2,9                    search 9 characters              14140030
*loop                                                                   14150030
EDBR031  CLI   0(R1),C'.'              does this look like a dsname?    14160030
         BE    EDBR670                 yes, exit                        14170030
         CLI   0(R1),C'*'              does this look like a dsname?    14180032
         BE    EDBR670                 yes, exit                        14190032
         CLI   0(R1),C'%'              does this look like a dsname?    14200032
         BE    EDBR670                 yes, exit                        14210032
         CLI   0(R1),C'('              does this look like a dsname?    14220030
         BE    EDBR670                 yes, exit                        14230030
         CLI   0(R1),C'/'              volser at the end?               14240033
         BE    EDBR670                 yes, exit                        14250033
         LA    R1,1(,R1)               bump index up                    14260030
         BCT   R2,EDBR031              scan rest of dsname              14270030
*endloop                                                                14280030
*                                                                       14290000
*        Get the value of the EDBR0000 profile variable.  It contains   14300000
*        the highest nnnn ever assigned to an EDBRnnnn variable.        14310000
*                                                                       14320000
EDBR080  ISPLINK ($VDEFINE,$EDBR0000,EDBR0000,$CHAR,=F'4')              14330030
         LA    R6,1                    index                            14340000
         MVC   EDBRNNNN,$EDBR0000      EDBR0000                         14350003
         MVI   EDBRNNNN+7,C'1'         EDBR0001                         14360003
         LA    R1,=A($VGET,$EDBR0000+VL)                                14370000
         LINK  SF=(E,ISPLINK$)         VGET EDBR0000                    14380021
         LTR   R15,R15                 first time ever?                 14390003
         BNZ   EDBR191                 yes, jump                        14400038
         PACK  DWD,EDBR0000            Z'0123' -> P'123'                14410000
         CVB   R7,DWD                  high water-mark                  14420000
*TPUT EDBR0000,4                                                  -DEL- 14430006
*---------------------------------------------------------------------* 14440000
*                                                                     * 14450000
*        Scan all EDBRnnnn variables for &OPT                         * 14460000
*                                                                     * 14470000
*---------------------------------------------------------------------* 14480000
*LOOP                                                                   14490001
EDBR111  CVD   R6,DWD                  NNN%                             14500003
         OI    DWD+7,15                NNNN                             14510000
         UNPK  EDBRNNNN+4(4),DWD       EDBRNNNN                         14520000
*TPUT EDBRNNNN,8                                                  -DEL- 14530006
         ISPLINK ($VGET,EDBRNNNN),ERRET=EDBR180                         14540000
*TPUT EDBRNNNN,8                                                  -DEL- 14550006
         LA    R0,L'STRING1            max length of variable           14560000
         ST    R0,DWD                  max length of variable           14570000
         ISPLINK ($VCOPY,EDBRNNNN,DWD,STRING1,$MOVE),                  X14580000
               ERRET=EDBR180                                            14590000
*TPUT EDBRNNNN,8                                                  -DEL- 14600006
         LA    R4,STRING1              VARIABLE VALUE                   14610000
         L     R5,DWD                  VARIABLE LENGTH                  14620000
         BAL   R14,PARSE_PARM       <- split OPT2                       14630030
         DC    S(L'OPT2,OPT2)          search argument                  14640000
         DC    S(L'PRJ1,PRJ1)                                           14650000
         DC    S(L'LIB1,LIB1)                                           14660000
         DC    S(L'LIB2,LIB2)                                           14670000
         DC    S(L'LIB3,LIB3)                                           14680000
         DC    S(L'LIB4,LIB4)                                           14690000
         DC    S(L'TYP1,TYP1)                                           14700000
         DC    S(L'PROF,PROF)                                           14710000
         DC    S(L'MIX,MIX)                                             14720000
         DC    S(L'FNAM,FNAM)                                           14730000
         DC    S(L'ZEDLOCK,ZEDLOCK)                                     14740004
         DC    S(L'ZEDLOCKP,ZEDLOCKP)                                   14750000
         DC    S(L'ZPCFMCN,ZPCFMCN)                                     14760004
         DC    S(L'ZVIEW,ZVIEW)                                         14770004
         DC    S(L'ZVIMAC,ZVIMAC)                                       14780004
         DC    S(L'ZVPROF,ZVPROF)                                       14790004
         DC    S(L'ZREFTYPE,ZREFTYPE)  WP SHELL                         14800008
         DC    S(L'ZWRKVOL,ZWRKVOL)    WP SHELL                         14810008
         DC    S(L'ZWRKDSN,ZWRKDSN)    WP SHELL                         14820008
         DC    S(L'ZEDITWS,ZEDITWS)    view/edit 4.2                    14830025
         DC    S(L'ZVIEWWS,ZVIEWWS)    view/edit 4.2                    14840025
*TPUT OPT,L'OPT                                                   -DEL- 14850006
*TPUT OPT2,L'OPT2                                                 -DEL- 14860006
*TPUT PRJ1,L'PRJ1                                                 -DEL- 14870006
         CLC   OPT,OPT2                IS THIS WHAT I'M LOOKING FOR?    14880000
         BNE   EDBR190                 NO, TRY NEXT ONE                 14890000
*VTMV - ED U then =11  zreftype=8x'00'                            -DEL- 14900034
         OC    ZREFTYPE(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN),BLANKS          14910034
         CLI   ZREFTYPE,C' '           FIRST TIME?                      14920009
         BNE   *+8                     NO, JUMP                         14930009
         MVI   ZREFTYPE,C'L'           YES, DEFAULT TYPE IS LIBRARY     14940009
         CLI   ZVPROF,C' '             FIRST TIME?                      14950011
         BNE   *+10                    NO, JUMP                         14960011
         MVC   ZVPROF,PROF             YES, COPY EDIT PROFILE           14970011
         CLI   PROF,C' '               FIRST TIME?                      14980011
         BNE   *+10                    NO, JUMP                         14990011
         MVC   PROF,ZVPROF             YES, COPY VIEW PROFILE           15000011
         B     EDBR200                 exit loop                        15010031
*                                                                       15020000
EDBR180  ICM   R0,B'1111',GAP          first gap?                       15030000
         BNZ   EDBR190                 no, jump                         15040000
         ST    R6,GAP                  yes, remember it                 15050000
EDBR190  LA    R6,1(,R6)               increment index                  15060000
         CLR   R6,R7                   hwm reached yet?                 15070000
         BNH   EDBR111                 next EDBRnnnn variable           15080000
*ENDLOOP                                                                15090001
*---------------------------------------------------------------------* 15100000
*                                                                     * 15110000
*        &OPT has not been found in the profile variables;            * 15120001
*        Check if it's a user data set such as CLIST                  * 15130030
*                                                                     * 15140000
*---------------------------------------------------------------------* 15150030
EDBR191  EQU   *                                                        15160038
         CLI   ZPREFIX,C' '            ZPREFIX=''?                      15170030
         BE    EDBR192                 yes, jump                        15180030
         STRING (ZPREFIX,,T),'.',(OPT,,T),INTO=ZWRKDSN                  15190030
         BAL   R14,LISTDSI          <- check existence of data set      15200030
         LTR   R15,R15                 RC=0 from LOCATE?                15210030
         BNZ   EDBR192                 no, jump                         15220030
         MVC   OPT2,OPT                restore dsname                   15230030
         B     EDBR677                 yes, jump                        15240035
*---------------------------------------------------------------------* 15250030
*                                                                     * 15260000
*        Assign the next available EDBRnnn number.                    * 15270001
*                                                                     * 15280000
*---------------------------------------------------------------------* 15290000
EDBR192  EQU   *                                                        15300030
         STRING 'Tag ',(OPT,,T),INTO=STRING1,                          X15310034
               ' does not exist; enter Y to create it:'                 15320034
         TPUT  STRING1,(R15),ASIS      write message (WRITENR)          15330034
         TGET  DWD,1                   get reply (one byte only)        15340034
         OI    DWD,C' '                uppercase                        15350034
         CLI   DWD,C'Y'                REPLY=Y ?                        15360034
         BNE   EDBR998                 no, exit with rc=8               15370034
*                                                                       15380034
         ICM   R0,B'1111',GAP          did we find a gap?               15390000
         BNZ   EDBR194                 yes, jump                        15400000
*                                                                       15410000
*        no gap found, use hwm+1 and update EDBR0000                    15420000
*                                                                       15430000
EDBR193  CVD   R6,DWD                  NNN%                             15440000
         OI    DWD+7,15                NNNN                             15450000
         UNPK  EDBR0000,DWD            NNNN                             15460003
         LA    R1,=A($VPUT,$EDBR0000,$PROFILE+VL)                       15470000
         LINK  SF=(E,ISPLINK$)         VPUT EDBR0000 PROFILE            15480021
         LR    R0,R6                   gap=hwm+1                        15490003
*                                                                       15500000
*        reuse first gap                                                15510000
*                                                                       15520000
EDBR194  CVD   R0,DWD                  NNN%                             15530000
         OI    DWD+7,15                NNNN                             15540000
         UNPK  EDBRNNNN+4(4),DWD       EDBRNNNN                         15550000
*TPUT EDBRNNNN,4                                                  -DEL- 15560006
*                                                                       15570000
EDBR196  XC    STRING1,STRING1         clear work area                  15580000
         BAL   R14,ZVIEW00          <- set ZVIEW to YES/NO for VI/BR    15590004
         BAL   R14,VPUT00           <- update EDBRnnnn variable         15600000
         B     EDBR500                 do edit/browse                   15610000
*---------------------------------------------------------------------* 15620000
*                                                                     * 15630000
*        &OPT has been found in the profile.                          * 15640000
*        pass PRJ1-ZEDLOCKP values to edit/browse                     * 15650000
*                                                                     * 15660000
*---------------------------------------------------------------------* 15670000
EDBR200  BAL   R14,ZVIEW00          <- set ZVIEW to YES/NO for VI/BR    15680004
         LA    R1,=A($VPUT,VARLIST+VL)                                  15690004
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLIST)                  15700021
         LA    R1,=A($VPUT,VARLISTW+VL)                                 15710031
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLISTW)                 15720031
*TPUT PRJ1,72                                                     -DEL- 15730006
*---------------------------------------------------------------------* 15740000
*                                                                     * 15750000
*        Display the EDIT, BROWSE or VIEW Entry Panel                 * 15760030
*                                                                     * 15770000
*---------------------------------------------------------------------* 15780000
EDBR500  STRING 'PGM(ISREDIT) PARM(P,ISREDM01)',INTO=COMMAND            15790006
         CLI   FUNCTION,C'E'           FUNCTION=E?                      15800000
         BE    EDBR530                 yes, jump                        15810000
         STRING 'PGM(ISRUDA) PARM(ISRWORK)',INTO=COMMAND                15820008
         CLI   FUNCTION,C'W'           FUNCTION=W?                      15830008
         BE    EDBR530                 yes, jump                        15840008
         STRING 'PGM(ISRBRO) PARM(ISRBRO01)',INTO=COMMAND               15850006
EDBR530  ISPLINK ($SELECT,=A(L'COMMAND),COMMAND)                        15860006
*                                                                       15870000
*        The user has modified the values of PRJ1-ZEDLOCKP              15880000
*        Update the corresponding EDBRnnnn variable                     15890000
*                                                                       15900000
         BAL   R14,VPUT00           <- update EDBRnnnn variable         15910000
*                                                                       15920000
*        Delete all variables in function pool                          15930000
*                                                                       15940000
         LA    R1,=A($VRESET+VL)                                        15950000
         LINK  SF=(E,ISPLINK$)         VRESET                           15960021
         B     EDBR990                 exit                             15970031
*********************************************************************** 15980030
*                                                                     * 15990030
*        Edit, Browse and View with data-set reference list           * 16000030
*                                                                     * 16010030
*          PARM='EDIT,/'                                              * 16020030
*                                                                     * 16030030
*********************************************************************** 16040030
EDBR580  CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 16050030
         BNE   EDBR_ISR                no, switch applid                16060031
         ISPLINK ($VREPLACE,=C'ZREFMDE ',=F'2',=C'ON')  ZREFMDE='ON'    16070030
         STRING 'PGM(ISRDSLST) PARM(PL1 REFLIST) SUSPEND',INTO=COMMAND  16080035
         CLI   ISPFVM,X'48'            ISPF 4.8 or up?                  16090035
         BNL   EDBR581                 yes, jump                        16100035
         STRING 'PGM(ISRDSLST) PARM(RL1) SUSPEND',INTO=COMMAND          16110030
EDBR581  EQU   *                                                        16120035
         ISPLINK ($SELECT,=A(L'COMMAND),COMMAND)                        16130030
         ISPLINK ($VGET,=C'(ZRDSN ZRVOL)',=C'SHARED')                   16140030
         LA    R0,L'OPT                max length                       16150030
         ST    R0,OPTLEN               max length                       16160030
         ISPLINK ($VCOPY,=C'ZRDSN ',OPTLEN,OPT,$MOVE),ERRET=EDBR920     16170030
*LR R2,R15                                                        -DEL- 16180030
*STRING 'RC=',((R2),,L),' ZRDSN=''',(OPT,(R3)),'''',INTO=COMMAND  -DEL- 16190030
*TPUT COMMAND,(R15)                                               -DEL- 16200030
         LA    R0,L'BRVOL              max length                       16210030
         ST    R0,DWD                  max length                       16220030
         ISPLINK ($VCOPY,=C'ZRVOL ',DWD,BRVOL,$MOVE)                    16230030
         STRING 'VERASE ','(ZRDSN ZRVOL ZREFMDE) SHARED',INTO=COMMAND   16240030
         BAL   R14,ISPEXEC          <- execute command                  16250030
**       ISPLINK ($VREPLACE,=C'ZREFMDE ',=F'1',BLANKS) ZREFMDE='' -DEL- 16260030
**       ISPLINK ($VREPLACE,=C'ZRDSN ',=F'1',BLANKS) ZRDSN=''     -DEL- 16270030
**       ISPLINK ($VREPLACE,=C'ZRVOL ',=F'1',BLANKS) ZRVOL=''     -DEL- 16280030
*                                                                       16290000
         CLI   OPT,C' '                dsname returned?                 16300031
         BE    EDBR994                 no, exit with rc=4               16310031
*                                                                       16320000
*        check for a work-station file name                             16330031
*                                                                       16340000
         CLI   OPT+0,C'/'              work-station file (UNIX) ?       16350030
         BE    EDBR900                 yes, jump                        16360030
         CLI   OPT+0,C'~'              work-station file (?) ?          16370030
         BE    EDBR900                 yes, jump                        16380030
         CLI   OPT+1,C':'              work-station file (DOS, OS/2) ?  16390030
         BE    EDBR900                 yes, jump                        16400030
 ORG *-24 WSFN can't happen in ISPF 4.5                                 16410031
         MVC   OPT2,OPT                copy dsname                      16420030
         CLI   OPT,C''''               dsname enclosed in apostrophes?  16430030
         BE    EDBR660                 yes, remove them                 16440030
         B     EDBR670                 no, add prefix                   16450030
*********************************************************************** 16460030
*                                                                     * 16470000
*        Direct Edit, Browse and View (CNAEBROW/CNAEEDIT)             * 16480030
*                                                                     * 16490000
*          PARM='EDIT,CLIST(MBR)'                                     * 16500030
*                                                                     * 16510000
*********************************************************************** 16520030
*                                                                       16530000
*        Retrieve BRDSN/BRMEM when invoked with 'EDIT,*'                16540030
*                                                                       16550000
EDBR620  EQU   *                                                        16560030
         LA    R0,L'OPT                max length                       16570030
         ST    R0,OPTLEN               max length                       16580030
         ISPLINK ($VCOPY,=C'BRDSN ',OPTLEN,OPT,$MOVE),ERRET=EDBR920     16590030
         LA    R0,L'OPT8               max length                       16600030
         ST    R0,DWD                  max length                       16610030
         ISPLINK ($VCOPY,=C'BRMEM ',DWD,OPT8,$MOVE),ERRET=EDBR626       16620030
         CLI   OPT8,C' '               do we have a member name?        16630030
         BE    EDBR626                 yes, jump                        16640030
         STRING (OPT,,T),'(',(OPT8,,T),')',INTO=OPT                     16650030
         ST    R15,OPTLEN              update length                    16660030
EDBR626  EQU   *                                                        16670030
         LA    R0,L'BRVOL              max length                       16680030
         ST    R0,DWD                  max length                       16690030
         ISPLINK ($VCOPY,=C'BRVOL ',DWD,BRVOL,$MOVE)                    16700030
         B     EDBR800                                                  16710030
*                                                                       16720000
*        Remove apostrophes that surround a fully-qualified dsname      16730030
*                                                                       16740000
EDBR660  EQU   *                                                        16750030
         L     R1,OPTLEN               get L'&OPT                       16760030
         BCTR  R1,0                    minus 1                          16770030
         BCTR  R1,0                    minus 2                          16780030
         STRING (OPT2+1,(R1)),INTO=OPT remove surrounding quotes        16790030
         ST    R15,OPTLEN              update length                    16800030
         BAL   R14,EDBR690          <- Extract /VOLSER                  16810033
         B     EDBR680                                                  16820030
*                                                                       16830000
*        Prefix &zprefix to a non fully-qualified dsname                16840033
*                                                                       16850000
EDBR670  EQU   *                                                        16860030
         BAL   R14,EDBR690          <- Extract /VOLSER                  16870033
         CLI   BRVOL,C' '              BRVOL=''?                        16880033
         BH    EDBR680                 no, jump                         16890033
*STRING ZPREFIX,BRVOL,OPT,INTO=COMMAND                            -DEL- 16900033
*TPUT COMMAND,(R15)                                               -DEL- 16910033
         CLI   ZPREFIX,C' '            ZPREFIX=''?                      16920030
         BE    EDBR680                 yes, jump                        16930030
         STRING (ZPREFIX,,T),'.',(OPT,,T),INTO=ZWRKDSN                  16940033
         BAL   R14,LISTDSI          <- check catalog status             16950033
         LTR   R15,R15                 found in catalog?                16960033
         BZ    EDBR677                 yes, jump                        16970033
         MVC   ZWRKDSN,OPT2            no prefix                        16980033
*TPUT ZWRKDSN,44                                                  -DEL- 16990033
         BAL   R14,LISTDSI          <- check catalog status             17000033
         LTR   R15,R15                 found in catalog?                17010033
         BNZ   EDBR800                 no, quit                         17020035
*TPUT ZWRKDSN,44                                                  -DEL- 17030033
EDBR677  EQU   *                                                        17040033
         STRING (ZPREFIX,,T),'.',(OPT2,,T),INTO=OPT                     17050030
         STRING (ZWRKDSN,,T),INTO=OPT                                   17060035
         ST    R15,OPTLEN              update length                    17070030
*                                                                       17080000
*        Update BRDSN/BRMEM/BRVOL in profile                            17090030
*                                                                       17100000
EDBR680  EQU   *                                                        17110030
         OC    OPT,BLANKS              UPPER-CASE                       17120033
         OC    BRVOL,BLANKS            UPPER-CASE                       17130033
*L R1,OPTLEN                                                      -DEL- 17140030
*STRING '''',(OPT,(R1)),'''',INTO=COMMAND                         -DEL- 17150030
*TPUT COMMAND,(R15)                                               -DEL- 17160030
         ISPLINK ($VREPLACE,=C'BRDSN ',OPTLEN,OPT)                      17170030
         ISPLINK ($VREPLACE,=C'BRMEM ',=F'1',BLANKS)    BRMEM=''        17180030
         ISPLINK ($VREPLACE,=C'BRVOL ',=F'6',BRVOL)                     17190031
         ISPLINK ($VPUT,=C'(BRDSN BRMEM BRVOL)',$PROFILE)               17200030
         B     EDBR800                 invoke PDF service               17210030
*                                                                       17220000
*        Extract volser if dsname ends in /VOLSER                       17230033
*                                                                       17240000
EDBR690  EQU   *                                                        17250033
         L     R1,OPTLEN               length of dsname                 17260033
         SH    R1,=H'7'                length of /SYSRES                17270033
         CLI   OPT+6,C':'              volser:dsname?                   17280033
         BE    EDBR692                 yes, jump                        17290033
         LA    R15,OPT(R1)             point to / in AA.BB.CC/SYSRES    17300033
         CLI   0(R15),C'/'             volser present at end of dsname? 17310033
         BNER  R14                     no, goback                       17320033
         MVC   BRVOL,1(R15)            save volser                      17330033
         MVC   0(7,R15),BLANKS         blank out /VOLSER                17340033
         B     EDBR697                                                  17350033
EDBR692  EQU   *                                                        17360033
         MVC   BRVOL,OPT               save volser                      17370033
         MVC   OPT(L'OPT-7),OPT+7      blank out VOLSER:                17380033
EDBR697  EQU   *                                                        17390033
         ST    R1,OPTLEN               adjust length                    17400033
         MVC   OPT2,OPT                update copy of dsname            17410033
         BR    R14                     goback                           17420033
*********************************************************************** 17430030
*                                                                     * 17440000
*        No dsn or tag has been specified (OPT='').                   * 17450030
*        Check for a cursor-driven invocation                         * 17460030
*                                                                     * 17470000
*********************************************************************** 17480030
* GILBERT.ARCHIVE(+CHANGES)                                       -DEL- 17490049
EDBR700  BAL   R14,CURSOR           <- get dsn at cursor location       17500030
         LTR   R1,R1                   Dsname extracted?                17510030
         BNP   EDBR920                 no, jump                         17520030
         STRING ((R1),(R0)),INTO=OPT                                    17530030
         ST    R15,OPTLEN              update length                    17540030
*TPUT OPT,(15)                                                    -DEL- 17550049
*---------------------------------------------------------------------* 17560033
*                                                                     * 17570033
*        Check if the dsname contains a relative generation number    * 17580033
*        such as AA.BB(+1) or CC.DD(-2).  If one is found, replace    * 17590033
*        it with .G*V%% and force FUNCTION=W to allow the user to     * 17600033
*        obtain a dslist of all the generations in the catalog.       * 17610033
*                                                                     * 17620033
*---------------------------------------------------------------------* 17630033
*DSN=PSCASXS.DETSTATT.HSDTSTST(+1),                               -DEL- 17640033
*DSN=PSCASXS.DETSTATT.HSDTSTST(-1)                                -DEL- 17650033
         LA    R1,OPT                  START OF DSNAME                  17660033
EDBR721  CLI   0(R1),C'('              member name?                     17670033
         BE    EDBR723                 yes, exit loop                   17680033
         LA    R1,1(,R1)               bump pointer                     17690033
         BCT   R15,EDBR721             next character                   17700033
         B     EDBR729                 exit                             17710033
EDBR723  CLI   1(R1),C'+'              AA.BB.CC(+1) ?                   17720033
         BE    EDBR725                 yes, jump                        17730033
         CLI   1(R1),C'-'              AA.BB.CC(-1) ?                   17740033
*ORG *-8                                                          -DEL- 17750033
         BNE   EDBR729                 no, exit                         17760033
EDBR725  EQU   *                                                        17770049
         CLI   1+1(R1),C'0'            AA.BB.CC(-1) ?                   17780049
         BL    EDBR729                 no, exit                         17790049
         STRING (OPT,(R1)),'.G*V%%',INTO=OPT                            17800049
         ST    R15,OPTLEN              length of new dsname             17810034
         CLI   FUNCTION,C'W'           function=WP ?                    17820033
         BE    EDBR729                 yes, exit                        17830033
         STRING 'Relative Generation',INTO=SHORTMSG                     17840033
&STR   SETC 'because the dsname contains a relative generation number.' 17850033
         STRING 'The ISPF WorkPlace has been invoked instead of ',     X17860033
               (FUNCTION,,T),' &STR',INTO=LONGMSG                       17870033
         MVI   ALARM,C'Y'              error, beep.                     17880033
         BAL   R14,SETMSG           <- send message                     17890033
         MVI   FUNCTION,C'W'           change B/E/V to W                17900033
         MVI   CMDNAME,C'W'            change BR/ED/VI to WP            17910034
         MVI   CMDNAME+1,C'P'          change BR/ED/VI to WP            17920034
EDBR729  EQU   *                                                        17930033
*                                                                       17940034
*        If we have to start a new screen, build new cmd and exit       17950034
*                                                                       17960034
         CLI   PLUSSIGN,C'+'           start new screen?                17970034
         BNE   EDBR749                 no, continue                     17980034
         STRING (CMDNAME,,T),1X,(OPT,,T),INTO=LONGMSG                   17990034
         LA    R14,LONGMSG             FSTSO command ds.name            18000034
         STM   R14,R15,CMD@            update command for NEWSCREEN     18010034
         LA    R1,16                   r1=16: start new screen          18020034
         PR                                                             18030034
EDBR749  EQU   *                                                        18040034
*                                                                       18050000
         CLI   PROF,C' '               profile specified?               18060030
         BNE   EDBR800                 yes, jump                        18070030
         MVC   PROF(3),=C'STD'         no, use default profile          18080030
*********************************************************************** 18090016
*                                                                     * 18100000
*        Direct Edit, Browse and View                                 * 18110018
*                                                                     * 18120000
*          PARM='E,GILBERT.JCL(XYZ),STD'                              * 18130017
*                                                                     * 18140000
*********************************************************************** 18150016
EDBR800  EQU   *                                                        18160016
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 18170016
         BNE   EDBR_ISR                no, switch applid                18180031
*                                                                       18190000
*        Check for a migrated data set (B/E/V/W)                        18200033
*                                                                       18210000
*  STEPLIB3.PDS                                                   -DEL- 18220033
         CLI   BRVOL,0                 volser supplied?                 18230033
         BNE   EDBR815                 yes, skip LISTDSI                18240035
         MVC   ZWRKDSN,OPT             move dsname for LISTDSI          18250033
         BAL   R14,LISTDSI          <- check catalog status             18260033
         LTR   R15,R15                 found in catalog?                18270033
         BNZ   EDBR817                 no, exit                         18280033
         MVC   OPT,ZWRKDSN             true dsname                      18290040
         MVC   BRVOL,CATVOL            volser                           18300040
*TPUT OPT,(15)                                                    -DEL- 18310033
EDBR815  EQU   *                                                        18320033
         BAL   R14,CHKMIGR          <- check for a migrated data set    18330033
         LTR   R15,R15                 HRECALL denied?                  18340033
         BZ    EDBR817                 no, exit                         18350033
         CLI   FUNCTION,C'W'           FUNCTION=W?                      18360033
         BNE   EDBR998                 no, exit with rc=8               18370034
EDBR817  EQU   *                                                        18380033
*                                                                       18390000
*        delete () at end of dsname if no member has been specified     18400017
*                                                                       18410000
         L     R6,OPTLEN               L'&OPT                           18420030
         LA    R1,OPT-2(R6)            last 2 chars of dsname           18430030
         CLI   0(R1),C'('              GILBERT.JCL()   ?                18440030
         BNE   EDBR818                 NO, JUMP                         18450034
         MVC   0(2,R1),BLANKS          blank out ()                     18460034
         BCTR  R6,0                    yes, delete ()                   18470030
         BCTR  R6,0                    yes, delete ()                   18480030
         ST    R6,OPTLEN               L'&OPT                           18490034
EDBR818  EQU   *                                                        18500034
*                                                                       18510000
         CLI   FUNCTION,C'W'           FUNCTION=W?                      18520030
         BE    EDBR950                 yes, invoke Workplace            18530030
*                                                                       18540036
*        delete (*) at end of dsname if pattern(*) has been specified   18550036
*                                                                       18560036
         LA    R1,OPT-3(R6)            last 3 chars of dsname           18570036
         CLC   =C'(*)',0(R1)           GILBERT.JCL(*)   ?               18580036
         BNE   EDBR822X                NO, JUMP                         18590036
         MVC   0(3,R1),BLANKS          yes, blank out (*)               18600036
         BCTR  R6,0                    yes, delete (*)                  18610036
         BCTR  R6,0                    yes, delete (*)                  18620036
         BCTR  R6,0                    yes, delete (*)                  18630036
         ST    R6,OPTLEN               L'&OPT                           18640036
EDBR822X EQU   *                                                        18650036
*                                                                       18660000
*        Check RACF authorization; change EDIT to VIEW if ACCESS(READ)  18670031
*                                                                       18680000
         STRING (OPT,(R6)),INTO=ZWRKDSN                                 18690031
         BAL   R14,RACHECK          <- check authorization              18700031
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?                18710031
         BH    EDBR827                 ACCESS(UPDATE), jump             18720033
         BL    EDBR890                 ACCESS(NONE), quit               18730037
         CLI   FUNCTION,C'E'           EDIT?                            18740031
         BNE   EDBR827                 no, jump                         18750033
         MVI   FUNCTION,C'V'           EDIT->VIEW if ACCESS(READ)       18760031
EDBR827  EQU   *                                                        18770033
*                                                                       18780000
*        Set up the BROWSE, EDIT or VIEW command                        18790030
*                                                                       18800000
         CLI   FUNCTION,C'B'           BROWSE?                          18810016
         BE    EDBR870                 yes, execute command             18820033
         STRING 'EDIT DATASET(''',(OPT,(R6)),''')',INTO=COMMAND         18830033
         CLI   FUNCTION,C'E'           EDIT?                            18840016
         BE    EDBR855                 yes, jump                        18850018
         CLI   ISPFVM,X'41'            ISPF 4.1 or up?                  18860018
         BL    EDBR855                 no, jump                         18870018
         MVC   COMMAND(4),=C'VIEW'     EDIT->VIEW                       18880016
EDBR855  EQU   *                                                        18890018
         CLI   PROF,C' '               profile specified?               18900016
         BE    EDBR856                 no, jump                         18910030
         STRING (COMMAND,,T),' PROFILE(',(PROF,,T),')',INTO=COMMAND     18920016
EDBR856  EQU   *                                                        18930030
         CLI   BRVOL,C' '              volser available?                18940030
         BNH   EDBR857                 no, jump                         18950030
         STRING (COMMAND,,T),' VOLUME(',(BRVOL,,T),')',INTO=COMMAND     18960033
EDBR857  EQU   *                                                        18970030
         B     EDBR880                 invoke EDIT or VIEW              18980037
*DSN=CORTEX.WRK.NJM.XREF32.AMS2S420.NEWTXT(JOBSET),                     18990038
*                                                                       19000000
*        If PGM(BR) is available, invoke it in case it's a VSAM file.   19010033
*                                                                       19020000
EDBR870  EQU   *                                                        19030033
         CH    R6,=H'44'               long dsname(member) ?            19040037
         BH    EDBR875                 yes, do not try to call BR       19050037
         LA    R1,OPT-1(R6)            last char of dsname              19060037
         CLI   0(R1),C')'              short dsname(member) ?           19070037
         BE    EDBR875                 yes, do not try to call BR       19080037
         MVC   NEWPGM,=CL8'BR'         VSAM BROWSE PGM                  19090030
         LA    R1,NEWPGM               VSAM BROWSE PGM                  19100030
         BAL   R14,JPASEARCH        <- Check for PGM(BR)                19110030
         LTR   R15,R15                 PGM(BR) available?               19120030
         BNZ   EDBR875                 no, use BROWSE service           19130033
         MVC   OPT2,OPT                fully-qualified dsname           19140033
         STRING (OPT2,,T),',',BRVOL,INTO=OPT for BR command             19150033
         B     EDBR980                 invoke PGM(BR) PARM(&dsn,&vol)   19160033
*                                                                       19170000
*        If PGM(BR) is not available, use the BROWSE service.           19180033
*                                                                       19190000
EDBR875  EQU   *                                                        19200033
         STRING 'BROWSE DATASET(''',(OPT,(R6)),''')',INTO=COMMAND       19210033
         CLI   BRVOL,C' '              volser available?                19220033
         BNH   EDBR876                 no, jump                         19230033
         STRING (COMMAND,,T),' VOLUME(',(BRVOL,,T),')',INTO=COMMAND     19240033
EDBR876  EQU   *                                                        19250033
*TPUT COMMAND,(R15)                                               -DEL- 19260033
*                                                                       19270037
*        Invoke the BROWSE, EDIT or VIEW service.                       19280037
*                                                                       19290037
EDBR880  LA    R15,L'COMMAND           length of command                19300037
         BAL   R14,ISPEXEC          <- execute command                  19310037
         LTR   R7,R15                  DIALOG'S RETURN CODE             19320037
         BZ    EDBR907                 zero, jump                       19330037
         B     EDBR990                 error, exit with rc=(r7)         19340037
*                                                                       19350000
EDBR890  EQU   *                                                        19360037
         ISPLINK ($SETMSG,=C'ISPG132 ') Authorization Failed            19370031
         LA    R15,12                  DIALOG'S RETURN CODE             19380031
         B     EDBR990                 exit                             19390031
*********************************************************************** 19400030
*                                                                     * 19410030
*        Process a workstation file (EDIT/VIEW only)                  * 19420031
*                                                                     * 19430030
*********************************************************************** 19440030
EDBR900  CLI   FUNCTION,C'B'           BROWSE?                          19450030
         BE    EDBR909                 yes, error                       19460030
         CLI   FUNCTION,C'W'           FUNCTION=W?                      19470030
         BE    EDBR909                 yes, error                       19480030
         L     R6,OPTLEN               L'&OPT                           19490030
         ISPLINK ($VREPLACE,=C'WSFN ',OPTLEN,OPT)                       19500030
         STRING 'EDIT WSFN(WSFN) PROFILE(WS)',INTO=COMMAND              19510030
         CLI   FUNCTION,C'E'           EDIT?                            19520030
         BE    EDBR905                 yes, jump                        19530030
         MVC   COMMAND(4),=C'VIEW'     EDIT->VIEW                       19540030
EDBR905  LA    R15,L'COMMAND           length of command                19550030
         BAL   R14,ISPEXEC          <- execute command                  19560030
         LTR   R7,R15                  Check EDIT/VIEW return code      19570030
         BNZ   EDBR990                 non-zero, exit                   19580031
*                                                                       19590000
*        If EDIT returns RC=0, display "file saved" message             19600030
*                                                                       19610000
EDBR907  EQU   *                                                        19620030
         CLI   FUNCTION,C'E'           EDIT?                            19630030
         BNE   EDBR990                 NO, EXIT                         19640031
         STRING 'File Saved',INTO=SHORTMSG                              19650030
         STRING (OPT,(R6)),' has been saved',INTO=LONGMSG               19660030
         BAL   R14,SETMSG           <- send message                     19670030
         LR    R15,R7                  DIALOG'S RETURN CODE             19680030
         B     EDBR990                 exit                             19690031
*                                                                       19700000
EDBR909  STRING 'Not Supported',INTO=SHORTMSG                           19710030
         STRING 'This Service does not support Work-station Files.',   X19720030
               INTO=LONGMSG                                             19730030
         MVI   ALARM,C'Y'              error, beep.                     19740030
         BAL   R14,SETMSG           <- send message                     19750030
         B     EDBR998                 quit with RC=8                   19760031
*********************************************************************** 19770030
*                                                                     * 19780000
*        Not a cursor-driven invocation                               * 19790030
*        XCTL to ISREDIT/ISRBRO/ISRUDA directly                       * 19800030
*                                                                     * 19810000
*********************************************************************** 19820030
EDBR920  CLI   PLUSSIGN,C'+'           start new screen?                19830034
         BE    EDBR9816                yes, do it                       19840034
         CLI   FUNCTION,C'W'           FUNCTION=W?                      19850034
         BE    EDBR960                 invoke ISPF service              19860030
         MVC   NEWPGM,$ISREDIT         EDIT PGM                         19870030
         MVC   OPT(10),=C'P,ISREDM01'  EDIT PARM                        19880030
         CLI   FUNCTION,C'E'           FUNCTION=E?                      19890030
         BE    EDBR980                 invoke ISPF service              19900031
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 19910030
         BNE   EDBR_ISR                no, jump                         19920031
         MVC   NEWPGM,$ISRBRO          BROWSE PGM                       19930030
         MVC   OPT(10),=C'ISRBRO01  '  BROWSE PARM                      19940030
         BAL   R14,ZVIEW00          <- set ZVIEW to YES/NO for VI/BR    19950030
         ISPLINK ($VREPLACE,=C'ZVIEW ',=F'3',ZVIEW)                     19960030
         ISPLINK ($VPUT,=C'ZVIEW ',$PROFILE)                            19970030
         B     EDBR980                 invoke ISPF service              19980031
*********************************************************************** 19990030
*                                                                     * 20000000
*        Invoke the Work-place                                        * 20010030
*                                                                     * 20020000
*********************************************************************** 20030030
EDBR950  STRING '''',(OPT,,T),INTO=ZWRKDSN                              20040033
         ST    R15,DWD                 length of dsname                 20050030
         ISPLINK ($VREPLACE,=C'ZWRKDSN ',DWD,ZWRKDSN)                   20060030
         ISPLINK ($VREPLACE,=C'ZWRKVOL ',=F'6',BRVOL)   Volser          20070033
         ISPLINK ($VREPLACE,=C'ZREFTYPE ',=F'1',=C'D')  view=dataset    20080033
         LA    R1,=A($VPUT,VARLISTW,$PROFILE+VL)                        20090034
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLISTW) PROFILE         20100034
EDBR960  MVC   NEWPGM,$ISRUDA          Work-place                       20110030
         STRING 'ISRWORK',INTO=OPT     WP PARM                          20120030
EDBR980  EQU   *                                                        20130031
         LA    R1,0                    invoke ISPF service              20140031
         PR                                                             20150031
EDBR990  EQU   *                       rc=(15)                          20160031
         LA    R1,4                    exit                             20170031
         PR                                                             20180031
EDBR994  LA    R15,4                   rc=4                             20190033
         LA    R1,4                    exit                             20200031
         PR                                                             20210031
EDBR998  LA    R15,8                   rc=8                             20220033
         LA    R1,4                    exit                             20230031
         PR                                                             20240031
EDBR_ISR EQU   *                                                        20250031
         LA    R1,8                    R1=8:switch to APPL=ISR          20260033
         PR                                                             20270031
EDBR_SVC LA    R1,12                   R1=12: other ISPF service        20280033
         PR                                                             20290033
EDBR9816 EQU   *                                                        20300034
*LM R14,R15,CMD@                                                  -DEL- 20310034
*@SNAP ((R14),28)                                                 -DEL- 20320034
**       STRING 'FSTSO ',((R7),(R8)),INTO=LONGMSG                       20330034
**       LA    R14,LONGMSG             FSTSO command ds.name            20340034
**       STM   R14,R15,CMD@            update command for NEWSCREEN     20350034
*@SNAP ((R14),60)                                                 -DEL- 20360034
*TPUT LONGMSG,(R15)                                               -DEL- 20370034
         LA    R1,16                   r1=16: start new screen          20380034
         PR                                                             20390034
*********************************************************************** 20400000
*                                                                     * 20410000
*        Update the EDBRnnnn profile variable                         * 20420000
*                                                                     * 20430000
*          1.  retrieve the values the user has entered on the        * 20440000
*              EDIT/BROWSE panel or, if FUNCTION=WP, retrieve the     * 20450031
*              variables for the current view (data set or Library)   * 20460031
*                                                                     * 20470000
*          2.  compare with the previous values in STRING1;           * 20480000
*              if different, issue VREPLACE/VPUT                      * 20490017
*                                                                     * 20500000
*********************************************************************** 20510000
VPUT00   BAKR  R14,0                   save return address              20520001
         CLI   FUNCTION,C'W'           FUNCTION=W?                      20530031
         BNE   VPUT26                  no, jump                         20540031
         LA    R1,=A($VGET,VARLISTW+1+VL)                               20550031
         LINK  SF=(E,ISPLINK$)         VGET (ZREFTYPE)                  20560031
         CLI   ZREFTYPE,C'L'           VIEW=LIBRARY ?                   20570031
         BE    VPUT26                  yes, handle like EDIT            20580031
         LA    R1,=A($VGET,VARLISTW+VL)                                 20590031
         LINK  SF=(E,ISPLINK$)         VGET (&VARLISTW)                 20600031
* If user starts to create tags in an ISPF environment where WP   -DEL- 20610034
* variables have never been initialised (opt 11 was never used)   -DEL- 20620034
* then VGET fails and the EDBRnnnn variable contains null values. -DEL- 20630034
* If the user invokes the WP or opt11, it fails because the       -DEL- 20640034
* variables contain 8X'00' which is too long.                     -DEL- 20650034
         OC    ZREFTYPE(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN),BLANKS          20660034
         B     VPUT28                                                   20670031
VPUT26   EQU   *                                                        20680031
         LA    R1,=A($VGET,VARLIST+VL)                                  20690000
         LINK  SF=(E,ISPLINK$)         VGET (&VARLIST)                  20700021
VPUT28   EQU   *                                                        20710031
         STRING (OPT,,T),',',(PRJ1,,T),',',(LIB1,,T),',',(LIB2,,T),',',X20720000
               (LIB3,,T),',',(LIB4,,T),',',(TYP1,,T),',',(PROF,,T),',',X20730000
               (MIX,,T),',',(FNAM,,T),',',(ZEDLOCK,,T),',',            X20740004
               (ZEDLOCKP,,T),',',(ZPCFMCN,,T),',',(ZVIEW,,T),',',      X20750004
               (ZVIMAC,,T),',',(ZVPROF,,T),',',                        X20760004
               (ZREFTYPE,,T),',',(ZWRKVOL,,T),',',(ZWRKDSN,,T),',',    X20770008
               (ZEDITWS,,T),',',(ZVIEWWS,,T),',', view/edit 4.2        X20780025
               INTO=LONGMSG                                             20790030
         ST    R15,DWD                 length                           20800000
         CLC   STRING1,LONGMSG         any variable changed?            20810030
         BE    VPUT99                  no, exit                         20820000
         ISPLINK ($VREPLACE,EDBRNNNN,DWD,LONGMSG)                       20830030
         ISPLINK ($VPUT,EDBRNNNN,$PROFILE)                              20840000
VPUT99   PR                            return                           20850001
VARLIST  DC    C'(PRJ1 LIB1 LIB2 LIB3 LIB4 TYP1 PROF MIX FNAM ZEDLOCK  X20860031
               ZEDLOCKP ZPCFMCN ZVIEW ZVIMAC ZVPROF ZEDITWS ZVIEWWS)'   20870031
VARLISTW DC    C'(ZREFTYPE ZWRKVOL ZWRKDSN)' Work-place                 20880031
*********************************************************************** 20890000
*                                                                     * 20900000
*        Set ZVIEW to YES/NO for VIEW/BROWSE                          * 20910004
*                                                                     * 20920000
*********************************************************************** 20930000
ZVIEW00  CLI   FUNCTION,C'B'           FUNCTION=BROWSE?                 20940004
         BNE   *+10                    no, jump                         20950004
         MVC   ZVIEW(3),=C'NO '        yes, set ZVIEW=NO                20960004
         CLI   FUNCTION,C'V'           FUNCTION=VIEW?                   20970004
         BNER  R14                     no, goback                       20980004
         MVC   ZVIEW(3),=C'YES'        yes, set ZVIEW=YES               20990004
         BR    R14                     goback                           21000004
*********************************************************************** 21010000
*                                                                     * 21020000
*        Function=LOAD (preload a REUS module)                        * 21030030
*                                                                     * 21040000
*********************************************************************** 21050000
LOAD00   BEGIN_PROC OPT=YES                                             21060031
         ICM   R2,B'1111',LLIBDCB      LIBDEF ISPLLIB DCB               21070031
         BZ    LOAD11                  no LIBDEF DCB                    21080031
*WTO 'LLIBDCB/=0 1'                                               -DEL- 21090033
         LOAD  EPLOC=OPT8,DCB=(R2),ERRET=LOAD11 check for S806-04       21100031
*WTO 'LLIBDCB/=0 2'                                               -DEL- 21110033
         B     LOAD12                                                   21120031
LOAD11   LOAD  EPLOC=OPT8,ERRET=LOAD20 check for S806-04                21130031
*WTO 'LOAD11 OK'                                                  -DEL- 21140033
LOAD12   CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +21150031
               INEPNAME=OPT8,          EP name                         +21160030
               OUTATTR1=ATTR1,         CDATTR                          +21170030
               OUTLOADPT=LOADLEN,      load-point                      +21180031
               OUTLENGTH=LOADLEN+4,    length                          +21190031
               OUTVALID=GAP,           valid fields               -DEL-+21200030
               MF=(E,CSVQRYWK)         WORK AREA                        21210030
         TM    ATTR1,CDSER             REUS module?                     21220030
         BZ    LOAD30                  no, quit                         21230030
         LA    R1,LOAD75               address of the LOAD routine      21240030
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC                21250030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              21260030
         BAL   R14,EXECURP          <- Execute LOAD75 as a URP          21270030
         DELETE EPLOC=OPT8             delete at ISPTASK level          21280030
         STRING (OPT8,,T),' loaded',INTO=SHORTMSG                       21290030
         STRING 'Module ',(OPT8,,T),                                   X21300031
               ' loaded at address ',(LOADLEN,,X),                     X21310031
               ', length ',(LOADLEN+5,3,X),'.',                        X21320031
               1X,(GAP,,X),                                       -DEL-X21330030
               ' DCB=',(LLIBDCB+1,3,X),                           -DEL-X21340033
               INTO=LONGMSG                                             21350030
         B     LOAD49                  send message, set r15=0          21360031
*                                                                       21370000
*        Module not found (S806-04)                                     21380031
*                                                                       21390000
LOAD20   LR    R0,R15                  reason code                      21400031
         STRING ((R1),,X),((R0),,X),INTO=STRING1     00000806,00000004  21410031
         STRING 'Module not loaded',INTO=SHORTMSG                       21420031
         STRING 'Module ',(OPT8,,T),' was not loaded, abend S',        X21430031
               (STRING1+5,3),'-',(STRING1+14,2),                       X21440031
               ' DCB=',(LLIBDCB+1,3,X),                           -DEL-X21450033
               INTO=LONGMSG                                             21460031
         B     LOAD48                  issue message, exit rc=8         21470031
*                                                                       21480000
*        Module is NOREUS                                               21490030
*                                                                       21500000
LOAD30   DELETE EPLOC=OPT8             delete at ISPTASK level          21510030
         STRING 'Not reusable',INTO=SHORTMSG                            21520030
         STRING 'Module ',(OPT8,,T),' is not reusable.',               X21530030
               INTO=LONGMSG                                             21540030
*                                                                       21550000
LOAD48   EQU   *                                                        21560031
         MVI   ALARM,C'Y'              error, beep.                     21570030
LOAD49   EQU   *                                                        21580031
         BAL   R14,SETMSG           <- send message, set r15            21590031
*                                                                       21600000
LOAD50   LA    R1,4                    r1=4: exit                       21610031
         PR                                                             21620031
*                                                                       21630000
*        This code executes as a URP                                    21640031
*                                                                       21650000
         PUSH  USING                                                    21660030
         DROP                                                           21670030
LOAD75   BAKR  R14,0                   save regs                        21680030
         L     R10,4(,R1)              A(DYNAM)                         21690030
         L     R10,0(,R10)             A(DYNAM)                         21700030
         USING DYNAM,R10                                                21710030
         LOAD  EPLOC=OPT8              load at TMP level                21720030
         PR                                                             21730030
         POP   USING                                                    21740030
*********************************************************************** 21750015
*                                                                     * 21760000
*        Function=(MACLIB,&member,&profile)                           * 21770033
*                                                                     * 21780000
*            ALLOC DD($$MACLIB) DS('SYS1.MACLIB' 'SYS1.MODGEN') SHR   * 21790015
*            LMINIT DATAID(ID1) DDN($$MACLIB) ENQ(SHRW)               * 21800015
*            VIEW DATAID(&ID1) MEMBER(&OPT) PROFILE(STD)              * 21810015
*            LMFREE DATAID(ID1)                                       * 21820015
*                                                                     * 21830000
*        Check for the existence of additional macro libraries        * 21840019
*        based on the dsname table.                                   * 21850019
*                                                                     * 21860000
*********************************************************************** 21870015
MACLIB   BEGIN_PROC APPL=ISR                                            21880031
         BAL   R14,PARSE3           <- parse options                    21890033
         BAL   R3,MACLIB10          <- branch around dsname table       21900031
         DC    CL8'$$MACLIB'           DDNAME                           21910044
         DC    CL8'MACLIB'             Name of default profile          21920044
         DC    AL1(11),C'SYS1.MACLIB'                                   21930031
         DC    AL1(11),C'SYS1.MODGEN'                                   21940031
         DC    AL1(14),C'TCPIP.SEZACMAC'                                21950031
         DC    AL1(15),C'.PVTMACS.MACLIB'                         -DEL- 21960031
         DC    AL1(12),C'SYS1.PVTMACS'                                  21970031
         DC    AL1(11),C'CEE.SCEEMAC'                                   21980031
         DC    AL1(12),C'SYS1.AMODGEN'                                  21990031
         DC    AL1(12),C'SYS1.AMACLIB'                                  22000031
         DC    AL1(08),C'.PVTMACS'                                -DEL- 22010031
         DC    X'FF',0H'0'             end of table                     22020031
*                                                                       22030000
*        Function=(PROCLIB,&member,&profile)                            22040044
*                                                                       22050044
PROCLIB  BEGIN_PROC APPL=ISR                                            22060044
         BAL   R14,PARSE3           <- parse options                    22070044
         BAL   R3,MACLIB10             branch around dsname table       22080031
         DC    CL8'$PROCLIB'           DDNAME                           22090044
         DC    CL8'PROCLIB'            Name of default profile          22100044
         DC    AL1(12),C'SYS1.PROCLIB'                                  22110044
         DC    X'FF',0H'0'             end of table                     22120044
*                                                                       22130000
MACLIB10 EQU   *                                                        22140044
         BALR  R12,0                   local base register              22150000
         USING *,R12                                                    22160000
         MVC   MACLIBDD,0(R3)          MOVE DDNAME                      22170044
         MVC   VIEWEDIT,=C'VIEW'       USE VIEW FOR MACLIB              22180023
         CLI   PARM3,C' '              profile specified?               22190033
         BNE   *+10                    yes, jump                        22200033
         MVC   PARM3,8(R3)             no, use default profile          22210044
         DEVTYPE MACLIBDD,DWD                                           22220023
         LTR   R15,R15                 ALREADY ALLOCATED?               22230015
         BZ    MACLIB20                YES, JUMP                        22240015
         LA    R3,8+8(,R3)             skip DDN & PROF                  22250044
         SLR   R4,R4                   init length                      22260044
         SLR   R5,R5                   init dsn count                   22270031
         STRING BLANKS,INTO=STRING1    init work area                   22280031
*LOOP                                                                   22290031
MACLIB11 IC    R4,0(,R3)               length of dsname                 22300031
         STRING (1(R3),(R4)),INTO=ZWRKDSN expand dsn to 44 chars        22310031
         CLI   1(R3),C'.'              .PVTMACS ?                       22320031
         BNE   MACLIB12                no, jump                         22330031
         STRING (ZUSER,,T),(1(R3),(R4)),INTO=ZWRKDSN                    22340031
MACLIB12 XC    CATVOL,CATVOL           force LISTDSI to issue LOCATE    22350033
         BAL   R14,LISTDSI          <- check existence of PVTMACS       22360033
         LTR   R15,R15                 RC=0 from LOCATE?                22370019
         BNZ   MACLIB18                no, ignore                       22380031
         BAL   R14,RACHECK          <- check authorization              22390031
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?                22400031
         BL    MACLIB18                no, ignore                       22410031
         STRING (STRING1,,T),' ''',(ZWRKDSN,,T),'''',INTO=STRING1       22420031
         LA    R5,1(,R5)               count libraries                  22430031
         CH    R5,=H'4'                ISPF maximum reached?            22440031
         BE    MACLIB20                yes, exit                        22450031
MACLIB18 LA    R3,1(R4,R3)             next dsname                      22460031
         CLI   0(R3),X'FF'             end of table?                    22470031
         BNE   MACLIB11                no, try next dsname              22480031
*ENDLOOP                                                                22490031
MACLIB20 EQU   *                                                        22500015
         LTR   R5,R5                   any library selected?            22510034
         BZ    MACLIB98                no, exit                         22520034
         BAL   R14,LMVIEW           <- VIEW/BROWSE                      22530031
         LA    R1,4                    exit with rc=(15)                22540031
         PR                                                             22550031
*                                                                       22560000
*        User doesn't have READ access to SYS1.MACLIB                   22570034
*                                                                       22580000
MACLIB98 MVI   ALARM,C'Y'              error, beep.                     22590034
         BAL   R14,SETMSG           <- send message, set r15=8          22600034
         LA    R1,4                    exit with rc=(15)                22610034
         PR                                                             22620034
*********************************************************************** 22630030
*                                                                     * 22640030
*        Function=NETSTAT (full-screen NETSTAT)                       * 22650030
*                                                                     * 22660030
*          "NETSTAT STACK" opt                                        * 22670030
*          PUSH;DO i=1 TO QUEUED();PARSE PULL l.i;END;l.i=""          * 22680030
*          CALL STEMDISP "BROWSE","L.",,i,"NETSTAT" opt               * 22690030
*                                                                     * 22700037
*        Note: as of OS/390 R5, the NETSTAT command is authorized and * 22710037
*        this will no longer work (see PQ23072).  Use FSTSO NETSTAT   * 22720037
*        instead, or change the definition of the command to:         * 22730037
*                                                                     * 22740037
*          ACT='SELECT PGM(FASTPATH) PARM(FSTSO,NETSTAT &&ZPARM)',    * 22750037
*                                                                     * 22760030
*********************************************************************** 22770030
NETSTAT  BEGIN_PROC                                                     22780031
         L     R1,CVTPTR(0,0)          CVT address                      22790030
         L     R2,CVTECVT-CVTMAP(,R1)  ECVT address                     22800030
         ICM   R0,B'1111',ECVTTCP-ECVT(R2) TCP/IP 3.2 or above?         22810030
         BZ    NETSTAT8                no, exit                         22820030
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 22830030
         BNE   NETSTAT7                no, switch applid                22840030
         TM    CVTOSLV2-CVTMAP(R1),CVTH6605 OS/390 R5 ?                 22850041
         BO    NETSTAT5                yes, jump                        22860041
         STRING '"NETSTAT STACK ',(OPT,,T),'";cc=rc;PUSH;',            X22870030
               'DO i=1 TO QUEUED();PARSE PULL l.i;END;l.i="";',        X22880030
               'CALL STEMDISP "BROWSE","l.",,i,"NETSTAT ',(OPT,,T),    X22890030
               '";EXIT cc',                                            X22900030
               INTO=STRING1                                             22910030
         B     NETSTAT6                                                 22920041
NETSTAT5 EQU   *                       CS IP Stack - OS/390 R5 and up   22930041
         STRING 'rc=OUTTRAP("L.");',                                   X22940041
               '"NETSTAT ',(OPT,,T),'";',                              X22950041
               'cc=rc;',                                               X22960041
               'rc=OUTTRAP("OFF");',                                   X22970041
               'CALL STEMDISP "BROWSE","L.",,,"',                      X22980041
               'NETSTAT ',(OPT,,T),'";',                               X22990041
               'EXIT cc',                                              X23000041
               INTO=STRING1                                             23010041
NETSTAT6 EQU   *                                                        23020041
         LA    R14,STRING1             addr of REXX stmt                23030030
         STM   R14,R15,DWD             store addr/len                   23040030
         LA    R1,DWD                  FIRST STMT ADDR/LEN              23050030
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         23060030
         SLR   R2,R2                   No arguments                     23070030
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              23080031
         B     NETSTAT9                exit                             23090031
NETSTAT7 EQU   *                                                        23100031
         LA    R1,8                    switch to APPL=ISR               23110031
         PR                                                             23120031
NETSTAT8 STRING 'Not Available',INTO=SHORTMSG                           23130030
         STRING 'TCP/IP is not installed on this system.',             X23140030
               INTO=LONGMSG                                             23150030
         MVI   ALARM,C'Y'              error, beep.                     23160030
         BAL   R14,SETMSG           <- send message, set r15            23170031
NETSTAT9 EQU   *                                                        23180031
         LA    R1,4                    exit with rc=(15)                23190031
         PR                                                             23200031
*********************************************************************** 23210031
*                                                                     * 23220031
*        Function=OPENCMDS (open user/site cmd table)                 * 23230031
*                                                                     * 23240031
*              OPENCMDS,USERCMDS,U,AFTER                              * 23250031
*              OPENCMDS,SITECMDS,L                                    * 23260031
*                                                                     * 23270031
*********************************************************************** 23280031
OPENCMDS BEGIN_PROC LVL=42                                              23290031
         L     R4,TSI@                 R4->TSI                          23300031
         USING TSI,R4                                                   23310031
         MVC   LIB2,TSILCTAB           name of current table (local)    23320031
         CLI   PARM3,C'U'              User table?                      23330031
         BNE   *+10                    no, jump                         23340031
         MVC   LIB2,TSIUCTAB           name of current table (user)     23350031
*                                                                       23360000
         CLC   OPT8,BLANKS             any new table name?              23370031
         BE    OPENCMD4                no, exit                         23380031
         SLR   R15,R15                 force rc=0                       23390031
         CLC   OPT8,LIB2               same table?                      23400031
         BE    OPENCMD9                yes, exit                        23410031
*                                                                       23420000
*        Open new table to make sure it exists                          23430031
*                                                                       23440000
         STRING 'TBOPEN ',OPT8,' SHARE NOWRITE',INTO=COMMAND            23450031
         BAL   R14,ISPEXEC          <- open new table                   23460031
         LTR   R15,R15                 TBOPEN OK?                       23470031
*@SNAP COMMAND                                                    -DEL- 23480031
         BZ    OPENCMD2                no, exit                         23490031
*                                                                       23500000
*        new table does not exist, display an error message             23510031
*                                                                       23520000
         CH    R15,=H'8'               zerrmsg set?                     23530031
         BH    OPENCMD9                yes, exit                        23540031
         STRING (OPT8,,T),' not found',INTO=SHORTMSG                    23550031
         STRING (OPT8,,T),' command table could not be opened',        X23560031
               INTO=LONGMSG                                             23570031
         MVI   ALARM,C'Y'              error, beep.                     23580031
         BAL   R14,SETMSG           <- send message                     23590031
         B     OPENCMD9                exit                             23600031
*                                                                       23610000
OPENCMD2 EQU   *                                                        23620031
         STRING (OPT8,,T),' open',INTO=SHORTMSG                         23630031
         STRING 'Local command table ',(OPT8,,T),' is now open.',      X23640031
               INTO=LONGMSG                                             23650031
         BAL   R14,SETMSG           <- send message                     23660031
*                                                                       23670000
OPENCMD4 EQU   *                                                        23680031
         CLC   LIB2,BLANKS             any old table name?              23690031
         BE    OPENCMD6                no, jump                         23700031
         STRING 'TBCLOSE ',LIB2,INTO=COMMAND                            23710031
         BAL   R14,ISPEXEC          <- close current table, if any      23720031
         LTR   R15,R15                 TBCLOSE OK?                      23730031
*@SNAP COMMAND                                                    -DEL- 23740031
         BNZ   OPENCMD8                no, jump                         23750031
         CLC   OPT8,BLANKS             any new table name?              23760031
         BNE   OPENCMD6                yes, update TSI                  23770031
         STRING (LIB2,,T),' closed',INTO=SHORTMSG                       23780031
         STRING 'Local command table ',(LIB2,,T),' is now closed.',    X23790031
               INTO=LONGMSG                                             23800031
         BAL   R14,SETMSG           <- send message                     23810031
*                                                                       23820000
*        Store new cmd table name into TSIxCTAB field                   23830031
*                                                                       23840000
OPENCMD6 SLR   R15,R15                 force rc=0                       23850031
         MVC   TSILCTAB,OPT8           new table name (local)           23860031
         CLI   PARM3,C'U'              User table?                      23870031
         BNE   OPENCMD9                no, jump                         23880031
         MVC   TSIUCTAB,OPT8           new table name (user)            23890031
*AFTER   NI    TSIUCTAB,255-8          reset AFTER flag                 23900031
         CLI   PARM4,C'A'              User table AFTER ISP table?      23910031
         BNE   OPENCMD9                no, jump                         23920031
*AFTER   OI    TSIUCTAB,8              yes, set AFTER flag              23930031
         B     OPENCMD9                exit                             23940031
*                                                                       23950000
*        Close new table when we couldn't close the old one             23960031
*                                                                       23970000
OPENCMD8 CLC   OPT8,BLANKS             any new table name?              23980031
         BNE   OPENCMD9                yes, update TSI                  23990031
         STRING 'TBCLOSE ',OPT8,INTO=COMMAND                            24000031
         BAL   R14,ISPEXEC          <- close current table, if any      24010031
*                                                                       24020000
OPENCMD9 EQU   *                                                        24030031
         LA    R1,4                    exit with rc=(15)                24040031
         PR                                                             24050031
         DROP  R4                      TSI                              24060031
*********************************************************************** 24070023
*                                                                     * 24080000
*        Function=(PARMLIB,&member,&profile,&view)                    * 24090033
*                                                                     * 24100000
*        In OS/390 R2 and above, issue IEFPRMLB REQUEST=ALLOCATE      * 24110023
*        to access the PARMLIB concatenation.  Otherwise, use:        * 24120023
*                                                                     * 24130000
*            ALLOC DD($PARMLIB) DS('SYS1.PARMLIB') SHR                * 24140023
*                                                                     * 24150000
*********************************************************************** 24160023
         CVT DSECT=YES,LIST=NO         Define CVT for PARMLIB function  24170031
PARMLIB  BEGIN_PROC APPL=ISR                                            24180031
         BAL   R14,PARSE3           <- parse options                    24190033
         CLI   PARM3,C' '              profile specified?               24200033
         BNE   *+10                    yes, jump                        24210033
         MVC   PARM3,=CL8'PARMLIB'     no, use default profile          24220033
         MVC   MACLIBDD,=CL8'$PARMLIB' MOVE DDNAME                      24230023
         MVC   VIEWEDIT,=C'VIEW'       USE VIEW FOR PARMLIB             24240029
         STRING 'SYS1.PARMLIB',INTO=ZWRKDSN                             24250029
         BAL   R14,RACHECK          <- check authorization              24260031
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?                24270031
         BL    PARMLIB8                no, error                        24280031
         CLI   RACHECK_ACCESS,ACCESS_UPDATE ACCESS(UPDATE) ?            24290031
         BL    PARMLIB2                NO, USE VIEW                     24300031
         CLI   PARM4,C'V'              PARM=(,,,VIEW) ?                 24310033
         BE    PARMLIB2                YES, USE VIEW                    24320033
         MVC   VIEWEDIT,=C'EDIT'       YES, USE EDIT                    24330031
PARMLIB2 EQU   *                                                        24340029
         DEVTYPE MACLIBDD,DWD          Prevent IEF761I                  24350023
         LTR   R15,R15                 ALREADY ALLOCATED?               24360023
         BZ    PARMLIB6                YES, JUMP                        24370031
         AIF   (NOT D'CVTPARMC).PARMLIB5                                24380023
*AGO .PARMLIB5                                                    -DEL- 24390029
         L     R1,CVTPTR(0,0)          CVT address                      24400023
         TM    CVTOSLV1-CVTMAP(R1),CVTPARMC OS/390 R2?                  24410023
         BNO   PARMLIB5                no, jump                         24420023
         IEFPRMLB REQUEST=ALLOCATE,                                    X24430023
               ALLOCDDNAME=MACLIBDD,                                   X24440023
               CALLERNAME=OWNNAME,                                     X24450023
               MF=(E,STRING1,COMPLETE)                                  24460023
         CH    R15,=H'4'               ALLOCATED?                       24470023
         BNH   PARMLIB6                YES, JUMP                        24480031
PARMLIB5 EQU   *                                                        24490023
.PARMLIB5 ANOP                                                          24500023
         STRING '''SYS1.PARMLIB''',INTO=STRING1                         24510031
PARMLIB6 EQU   *                                                        24520031
         BAL   R14,LMVIEW           <- VIEW/BROWSE                      24530031
         LA    R1,4                    exit with rc=(15)                24540031
         PR                                                             24550031
*                                                                       24560000
PARMLIB8 MVI   ALARM,C'Y'              error, beep.                     24570031
         BAL   R14,SETMSG           <- send message, set r15=8          24580031
         LA    R1,4                    exit with rc=(15)                24590031
         PR                                                             24600031
*                                                                       24610044
         AIF   (D'CVTH6605).CVT2                                        24620044
CVTH6605 EQU   X'40'         OS/390 R5                             @MFA 24630044
.CVT2    ANOP                                                           24640044
*********************************************************************** 24650030
*                                                                     * 24660030
*        Function=REXXTRY                                             * 24670030
*                                                                     * 24680030
*              PARM='REXXTRY,SAY DATE(,98222,J)'                      * 24690030
*                                                                     * 24700000
*********************************************************************** 24710030
REXXTRY  BEGIN_PROC OPT=YES                                             24720031
         LA    R1,OPTADDR              FIRST STMT ADDR/LEN              24730031
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         24740030
         SLR   R2,R2                   No arguments                     24750030
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              24760031
         LTR   R15,R15                 return code from IRXEXEC         24770031
         BNZ   REXXT50                 error, exit                      24780030
         LTR   R1,R1                   any value returned?              24790030
         BNP   REXXT50                 error, exit                      24800030
         STRING 'RC=',((R1),,L),INTO=SHORTMSG                           24810030
         STRING 'The EXEC ended with return-code ',((R1),,L),          X24820030
               INTO=LONGMSG                                             24830030
         BAL   R14,SETMSG           <- send message                     24840030
*                                                                       24850000
REXXT50  LA    R1,4                    r1=4: exit rc=(15)               24860031
         PR                                                             24870031
*********************************************************************** 24880019
*                                                                     * 24890000
*        Function=SYSID (ISPF 4.2 or up)                              * 24900000
*                                                                     * 24910000
*        The SYSID function uses SCRNAME to permanently display the   * 24920030
*        SMF system-id in the upper left-hand corner of the screen.   * 24930030
*                                                                     * 24940000
*        I learned the trick from Henrik Salminen who posted his      * 24950019
*        THSCRNAM EXEC on the ISPF Cforum on TALKLINK.                * 24960019
*                                                                     * 24970000
*********************************************************************** 24980019
SYSID    BEGIN_PROC LVL=42                                              24990031
         STRING 'SCRNAME OFF',INTO=COMMAND                              25000030
         CLC   =C'OFF ',OPT8           SYSID OFF ?                      25010029
         BE    SYSIDCMD                yes, jump                        25020019
         L     R1,CVTPTR(0,0)          CVT address                      25030019
         L     R4,CVTSMCA-CVTMAP(,R1)  SMCA ADDRESS                     25040019
         USING SMCABASE,R4                                              25050019
         STRING 'PANELID OFF',ZDEL,'SCRNAME ON',ZDEL,                  X25060031
               'SCRNAME ',(SMCASID,,T),'$',ZSCREEN,' PERM',            X25070031
               INTO=COMMAND                                             25080031
         DROP  R4                      was SMCA                         25090029
SYSIDCMD EQU   *                                                        25100019
         ST    R15,DWD                 store length                     25110019
         ISPLINK ($VREPLACE,=C'CMD ',DWD,COMMAND)                       25120030
         STRING 'DISPLAY PANEL(ISPSTRTP) COMMAND(CMD)',INTO=COMMAND     25130019
         BAL   R14,ISPEXEC          <- execute command                  25140031
         LA    R1,4                    r1=4: exit rc=(15)               25150031
         PR                                                             25160031
*********************************************************************** 25170018
*                                                                     * 25180000
*        Function=TIME                                                * 25190018
*                                                                     * 25200000
*        The TIME function displays the time and date in a short      * 25210019
*        message, and the Julian date in the long message.            * 25220019
*                                                                     * 25230000
*********************************************************************** 25240018
TIME     BEGIN_PROC                                                     25250031
         TIME  DEC                                                      25260018
         STM   R0,R1,TENWORDS          HHMMSSHH 0CYYDDDF                25270018
         STRING (TENWORDS+4,P,YYYY-MM-DD),1X,                          X25280018
               (TENWORDS+0,1,X),':',   HH:                             X25290048
               (TENWORDS+1,1,X),':',   HH:MM:                          X25300048
               (TENWORDS+2,1,X),       HH:MM:SS                        X25310048
               INTO=SHORTMSG                                            25320018
         L     R15,=V(JUL2DAYS)        julian-days calc rtne            25330018
         BALR  R14,R15              <- calc num of days since 1901.001  25340018
         LR    R6,R1                   POINT TO DAY-OF-THE-WEEK         25350018
         PACK  DWD,SHORTMSG+5(2)       MM                               25360018
         CVB   R1,DWD                  R1=MM                            25370018
         MH    R1,=H'3'                mult by 3                        25380018
         LA    R7,MONTHTBL-3(R1)       point at month name              25390018
*                                                                       25400048
*        Timezone: E 02.00.00 (from CVTTZ/CLOCKxx)                      25410048
*                                                                       25420048
         MVI   DWD,C'E'                east                             25430048
         L     R1,CVTPTR(0,0)          point to CVT                     25440048
         ICM   R1,B'1111',CVTTZ-CVTMAP(R1) diff between local and GMT   25450048
         BP    *+8                     positive difference              25460048
         MVI   DWD,C'W'                negative (or zero)               25470048
         SLR   R0,R0                                                    25480048
         LPR   R1,R1                   negative (or zero)               25490048
         SLDL  R0,20                   mult by 1048576                  25500048
         D     R0,=F'10000'            difference in 1/100th of a sec.  25510048
         SLR   R0,R0                                                    25520048
         D     R0,=F'00360000'         GET HOURS                        25530048
         LR    R3,R1                   HH                               25540048
         LR    R1,R0                   REMAINDER                        25550048
         SLR   R0,R0                                                    25560048
         D     R0,=F'6000'             GET MINUTES IN R1                25570048
         LR    R2,R1                   MM                               25580048
         LR    R1,R0                   REMAINDER                        25590048
         SLR   R0,R0                                                    25600048
         D     R0,=F'100'              GET SECONDS IN R1                25610048
*                                                                       25620048
         STRING ((R6),9,T),1X,         Wednesday                       X25630018
               (SHORTMSG+08,2),1X,     Wednesday 19                    X25640018
               ((R7),3),1X,            Wednesday 19 Nov                X25650018
               (SHORTMSG+0,4),2X,      Wednesday 19 Nov 1995           X25660018
               (SHORTMSG+0,4),'.',     1995.                           X25670018
               (TENWORDS+6,P,R3Z),2X,  1995.033                        X25680018
               (SHORTMSG+11,8),        HH:MM:SS                        X25690048
               '  Timezone: ',(DWD,1),'.', E/W                         X25700048
               ((R3),,R2Z),'.',        HH                              X25710048
               ((R2),,R2Z),'.',        MM                              X25720048
               ((R1),,R2Z),            SS                              X25730048
               INTO=LONGMSG                                             25740018
*                                                                       25750048
         BAL   R14,SETMSG           <- send message                     25760018
         LA    R1,4                    r1=4: exit rc=0                  25770031
         PR                                                             25780031
MONTHTBL DC    C'JanFebMarAprMayJunJulAugSepOctNovDec'                  25790018
*********************************************************************** 25800015
*                                                                     * 25810000
*        Function=FSTSO (Full-Screen TSO)                             * 25820049
*                                                                     * 25830000
*          rc=OUTTRAP("L.")                                           * 25840031
*          "command"                                                  * 25850018
*          cc=rc                                                      * 25860030
*          rc=OUTTRAP("OFF")                                          * 25870031
*          CALL STEMDISP "BROWSE","L.",,,command                      * 25880018
*          EXIT cc                                                    * 25890030
*                                                                     * 25900000
*********************************************************************** 25910015
FSTSO    BEGIN_PROC APPL=ISR                                            25920049
         LM    R7,R8,OPTADDR           addr/len of command              25930031
         LTR   R8,R8                   any parm?                        25940031
         BZ    FSTSO2P                 no, display panel(isrtso)        25950031
         CLI   PLUSSIGN,C'+'           SPLIT NEW requested?             25960034
         BNE   FSTSO1K                 no, jump                         25970034
         CH    R8,=H'1'                1-char command?                  25980034
         BE    FSTSO60                 yes, exit                        25990034
FSTSO1K  EQU   *                                                        26000034
*                                                                       26010000
*        replace %DSNAME with dsname under cursor                       26020031
*                                                                       26030000
FSTSO2   LM    R2,R3,OPTADDR           addr/len of command              26040031
*loop                                                                   26050031
FSTSO2B  CLC   =C'%DSNAME',0(R2)       Search for %DSNAME               26060031
         BE    FSTSO2F                 Search for %DSNAME               26070031
         LA    R2,1(,R2)               Search for %DSNAME               26080031
         BCT   R3,FSTSO2B              Search for %DSNAME               26090031
*endloop                                                                26100031
         B     FSTSO2X                 %DSNAME not found                26110031
*                                                                       26120000
*        Move command to work area                                      26130044
*                                                                       26140000
FSTSO2F  EQU   *                                                        26150031
         BAL   R14,CURSOR           <- get dsn at cursor location       26160031
         LTR   R1,R1                   Dsname extracted?                26170031
         BNP   FSTSO2R                 no, error                        26180031
         ALR   R8,R7                   end of command                   26190031
         STRING ((R7),(R2)),((R1),(R0)),(7(R2),(R8)),INTO=RACFWORK      26200031
         LA    R7,RACFWORK             update addr                      26210031
         LR    R8,R15                  update length                    26220031
         B     FSTSO2X                                                  26230031
*                                                                       26240000
*        Display ISRTSO panel if user did not specify a command         26250031
*                                                                       26260000
FSTSO2P  EQU   *                                                        26270031
         ISPLINK ($VGET,ISRPTCV,$PROFILE)                               26280031
*LOOP                                                                   26290046
FSTSO2Q  EQU   *                                                        26300046
         STRING 'DISPLAY PANEL(','ISRTSO)',INTO=COMMAND                 26310031
         BAL   R14,ISPEXEC          <- execute command                  26320031
         LTR   R1,R15                  END/RETURN?                      26330031
         BNZ   FSTSO50                 yes, exit                        26340031
         ISPLINK ($VPUT,ISRPTCV,$PROFILE)                               26350031
         LA    R0,L'RACFWORK           max length                       26360031
         ST    R0,DWD                  max length                       26370031
         ISPLINK ($VCOPY,=C'ZCMD ',DWD,RACFWORK,$MOVE)                  26380031
         LA    R7,RACFWORK             update addr                      26390031
         L     R8,DWD                  update length                    26400031
         LTR   R8,R8                   length=0 ?                       26410046
         BZ    FSTSO2Q                 yes, display ISRTSO panel again  26420046
*ENDLOOP                                                                26430046
         B     FSTSO2X                                                  26440031
ISRPTCV  DC    C'(PTCRET01 PTCRET02 PTCRET03 PTCRET04 PTCRET05 PTCRET06-26450031
                PTCRET07 PTCRET08 PTCRET09 PTCRET10 PTCAMODE PTCDMODE  -26460031
                PTCFMODE PTCZAO   PTCSELM  PTCWCMD)'                    26470031
*                                                                       26480000
*        Execute the command                                            26490031
*                                                                       26500000
FSTSO2X  EQU   *                                                        26510031
         CLI   PLUSSIGN,C'+'           SPLIT NEW requested?             26520034
         BE    FSTSO61                 yes, exit                        26530034
         STRING '"',((R7),(R8)),'"',INTO=LONGMSG                        26540043
         CLC   =C'FSTSO ',FUNCTION     TSO Full-screen command?         26550043
         BNE   FSTSO2Y                 no, jump                         26560043
         STRING 'rc=OUTTRAP("L.");"',                                  X26570031
               ((R7),(R8)),'";',                                       X26580031
               'cc=rc;',                                               X26590031
               'rc=OUTTRAP("OFF");',                                   X26600031
               'CALL STEMDISP "BROWSE","L.",,,"',((R7),(R8)),'";',     X26610031
               'EXIT cc',                                              X26620031
               INTO=LONGMSG                                             26630031
FSTSO2Y  EQU   *                                                        26640043
         LA    R14,LONGMSG             addr of REXX stmt                26650031
         STM   R14,R15,DWD             store addr/len                   26660015
         LA    R1,DWD                  FIRST STMT ADDR/LEN              26670015
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         26680015
         SLR   R2,R2                   No arguments                     26690018
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              26700031
         B     FSTSO50                 exit                             26710031
*                                                                       26720000
FSTSO2R  EQU   *                                                        26730031
         STRING 'Dsname not found',INTO=SHORTMSG                        26740031
         STRING 'You must position the cursor under a dsname before entX26750031
               ering this command.',                                   X26760031
               INTO=LONGMSG                                             26770031
         MVI   ALARM,C'Y'              error, beep.                     26780031
         BAL   R14,SETMSG           <- send message, set r15            26790031
FSTSO50  LA    R1,4                    r1=4: exit rc=(15)               26800031
         PR                                                             26810031
*                                                                       26820000
*        Build an updated command for ISPSTRT                           26830034
*                                                                       26840000
FSTSO60  EQU   *                                                        26850034
         SLR   R8,R8                   no command                       26860034
FSTSO61  EQU   *                                                        26870034
*LM R14,R15,CMD@                                                  -DEL- 26880034
*@SNAP ((R14),28)                                                 -DEL- 26890034
         STRING 'FSTSO ',((R7),(R8)),INTO=LONGMSG                       26900034
         LA    R14,LONGMSG             FSTSO command ds.name            26910034
         STM   R14,R15,CMD@            update command for NEWSCREEN     26920034
*@SNAP ((R14),60)                                                 -DEL- 26930034
*TPUT LONGMSG,(R15)                                               -DEL- 26940034
         LA    R1,16                   r1=16: start new screen          26950034
         PR                                                             26960034
*********************************************************************** 26970000
*                                                                     * 26980000
*        Function=UNLOAD (unload a module)                            * 26990030
*                                                                     * 27000000
*********************************************************************** 27010000
UNLOAD00 BEGIN_PROC OPT=YES                                             27020031
         CLC   OWNNAME,OPT8            is this FASTPATH?                27030031
         BNE   UNLOAD02                no, error                        27040031
         DELETE EPLOC=OWNNAME2         save OWNNAME for UNLOAD function 27050033
         L     R5,CDE@                 own CDE                          27060031
         LA    R0,1                    R0=1                             27070033
         CH    R0,CDUSE-CDENTRY(,R5)   own CDUSE=1 ?                    27080033
         BE    UNLOAD20                yes, error                       27090031
UNLOAD02 EQU   *                                                        27100031
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +27110030
               INEPNAME=OPT8,          ADDRESS                         +27120030
               OUTLOADPT=LOADLEN+0,    LOAD POINT                      +27130031
               OUTLENGTH=LOADLEN+4,    MODULE LENGTH IN BYTES          +27140031
               MF=(E,CSVQRYWK)         WORK AREA                        27150030
         LTR   R15,R15                 module currently loaded?         27160030
         BNZ   UNLOAD20                no, exit                         27170030
         LM    R0,R1,LOADLEN           loadpt,length                    27180031
         ALR   R1,R0                   R1=end address                   27190031
         STM   R0,R1,LOADLEN           loadpt,endaddr                   27200031
*@SNAP OPT8                                                       -DEL- 27210031
         LA    R1,UNLOAD75             address of the UNLOAD routine    27220030
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC                27230030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              27240030
         BAL   R14,EXECURP          <- Execute UNLOAD75 as a URP        27250030
         LA    R1,DYNAM                pass A(DYNAM) to timer rtne      27260031
         BAL   R14,UNLOAD80         <- cancel timer                     27270031
UNLOAD17 DELETE EPLOC=OPT8             delete at ISPTASK level          27280030
         LTR   R15,R15                 LLCOUNT=0?                       27290030
         BZ    UNLOAD17                not yet, do it once more.        27300030
*                                                                       27310000
*        check if the module is still loaded                            27320031
*                                                                       27330000
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +27340031
               INEPNAME=OPT8,          ADDRESS                         +27350031
               MF=(E,CSVQRYWK)         WORK AREA                        27360031
         LTR   R15,R15                 module still loaded?             27370031
         BNZ   UNLOAD19                no, we're OK                     27380031
         CLC   OWNNAME,OPT8            is this FASTPATH?                27390031
         BNE   UNLOAD22                no, error                        27400031
         L     R5,CDE@                 own CDE                          27410033
         LA    R0,1                    R0=1                             27420031
         CH    R0,CDUSE-CDENTRY(,R5)   own CDUSE=1 ?                    27430033
         BNE   UNLOAD22                no, error                        27440031
UNLOAD19 EQU   *                                                        27450031
         STRING (OPT8,,T),' unloaded',INTO=SHORTMSG                     27460030
         STRING 'Module ',(OPT8,,T),' unloaded',                       X27470030
               INTO=LONGMSG                                             27480030
         B     UNLOAD49                issue msg, exit rc=0             27490031
*                                                                       27500000
UNLOAD20 STRING (OPT8,,T),' not found',INTO=SHORTMSG                    27510031
         STRING 'Module ',(OPT8,,T),' is not in memory at this time.', X27520030
               INTO=LONGMSG                                             27530030
         B     UNLOAD48                issue msg, exit rc=8             27540031
*                                                                       27550000
UNLOAD22 STRING (OPT8,,T),' not unloaded',INTO=SHORTMSG                 27560031
         STRING 'Module ',(OPT8,,T),' could not be unloaded.',         X27570031
               INTO=LONGMSG                                             27580031
*                                                                       27590000
UNLOAD48 EQU   *                                                        27600031
         MVI   ALARM,C'Y'              error, beep.                     27610030
UNLOAD49 EQU   *                                                        27620031
         BAL   R14,SETMSG           <- send message, set r15            27630030
*                                                                       27640000
UNLOAD50 LA    R1,4                    r1=4: exit rc=(15)               27650031
         PR                                                             27660031
*---------------------------------------------------------------------* 27670031
*                                                                     * 27680031
*        This code executes as a URP to delete modules                * 27690031
*        loaded by the PRELOAD routine.                               * 27700031
*                                                                     * 27710031
*---------------------------------------------------------------------* 27720031
         PUSH  USING                                                    27730030
         DROP                                                           27740030
UNLOAD75 BAKR  R14,0                   save regs                        27750030
         L     R10,4(,R1)              A(DYNAM)                         27760030
         L     R10,0(,R10)             A(DYNAM)                         27770030
         USING DYNAM,R10                                                27780030
         LR    R12,R15                 A(UNLOAD75)                      27790030
         USING UNLOAD75,R12                                             27800030
         LA    R1,DYNAM                pass A(DYNAM) to timer rtne      27810031
         BAL   R14,UNLOAD80         <- cancel timer                     27820031
UNLOAD77 DELETE EPLOC=OPT8             load at TMP level                27830030
         LTR   R15,R15                 LLCOUNT=0?                       27840030
         BZ    UNLOAD77                not yet, do it once more.        27850030
         PR                                                             27860030
         DROP                                                           27870031
*---------------------------------------------------------------------* 27880031
*                                                                     * 27890031
*        Cancel timer if exit addr points to module being unloaded.   * 27900031
*                                                                     * 27910031
*---------------------------------------------------------------------* 27920031
UNLOAD80 BAKR  R14,0                   save regs                        27930031
         BALR  R12,0                   base regs                        27940031
         USING *,R12                                                    27950031
         LR    R10,R1                  A(DYNAM)                         27960031
         USING DYNAM,R10                                                27970031
         L     R4,PSATOLD-PSA(0,0)     Current TCB                      27980031
         USING TCB,R4                                                   27990031
         ICM   R5,B'1111',TCBTME       any timer here?                  28000031
         BZ    UNLOAD89                no, jump                         28010031
         USING TQE,R5                                                   28020031
*loop                                                                   28030031
UNLOAD81 L     R1,TQEEXIT              EXIT ADDRESS                     28040031
         LA    R1,0(,R1)               clean up AMODE bit               28050031
         CL    R1,LOADLEN              compare to load-point            28060031
*@SNAP (LOADLEN,8),(TQE,96)                                       -DEL- 28070031
         BL    UNLOAD85                too low, iterate                 28080031
         CL    R1,LOADLEN+4            compare to end address           28090031
         BH    UNLOAD85                too high, iterate                28100031
         STIMERM CANCEL,ID=TQEID,MF=(E,STIMERL)                         28110031
*@SNAP (STIMERL,16)                                               -DEL- 28120031
         LTR   R15,R15                 STIMERM CANCEL OK?               28130031
         BNZ   UNLOAD85                no, iterate                      28140031
         LA    R5,TCBTME-(TQELINK-TQE) yes, go back to start of chain   28150031
UNLOAD85 ICM   R5,B'1111',TQELINK      end of chain?                    28160031
         BNZ   UNLOAD81                no, loop                         28170031
*endloop                                                                28180031
UNLOAD89 PR                                                             28190031
         POP   USING                                                    28200030
*********************************************************************** 28210030
*                                                                     * 28220000
*        Function=VERASE                                              * 28230030
*                                                                     * 28240000
*        This function issues VERASE to delete a variable from        * 28250030
*        the shared and/or profile pool.                              * 28260030
*                                                                     * 28270000
*********************************************************************** 28280030
VERASE   BEGIN_PROC                                                     28290031
         STRING 'VERASE ',(OPT,,T),INTO=COMMAND                         28300030
         BAL   R14,ISPEXEC          <- execute command                  28310030
         LTR   R15,R15                                                  28320030
         BNZ   VERASE6                 RC>0 (ERROR)                     28330030
         STRING 'Variable(s) deleted',INTO=SHORTMSG                     28340030
      STRING 'The specified variables have been successfully deleted.',X28350030
               INTO=LONGMSG                                             28360030
         B     VERASE49                issue message and exit with rc=0 28370031
VERASE6  CH    R15,=H'8'               severe error?                    28380030
         BH    VERASE50                RC>8 (ERROR)                     28390030
         STRING 'Variable(s) not found',INTO=SHORTMSG                   28400030
         STRING 'At least one specified variable does not exist',      X28410030
               INTO=LONGMSG                                             28420030
         MVI   ALARM,C'Y'              error, beep.                     28430030
VERASE49 BAL   R14,SETMSG           <- send message, set r15            28440030
VERASE50 LA    R1,4                    r1=4: exit rc=(15)               28450031
         PR                                                             28460031
*********************************************************************** 28470030
*                                                                     * 28480000
*        Function=ZDEL                                                * 28490030
*                                                                     * 28500000
*        This function uses an undocumented interface to retrieve     * 28510030
*        and set the command delimiter character.                     * 28520030
*                                                                     * 28530000
*        Tested in 3.5, 4.2 and 4.4.                                  * 28540030
*                                                                     * 28550000
*********************************************************************** 28560030
ZDELFUNC BEGIN_PROC                                                     28570031
         CLC   OPTLEN,=F'1'            one char specified?              28580030
         BNE   ZDELSHOW                no, display                      28590030
*                                                                       28600000
*        validate new character: anything but A-Z 0-9 = .               28610030
*                                                                       28620000
         CLI   OPT8,C'.'               valid char?                      28630030
         BE    ZDELBADC                no, bad parm                     28640030
         CLI   OPT8,C'='               valid char?                      28650030
         BE    ZDELBADC                no, bad parm                     28660030
         CLI   OPT8,C'A'               valid char? 41-C0                28670030
         BL    ZDELUPD                 yes, update                      28680030
         CLI   OPT8,C'I'               valid char?  A-I                 28690030
         BNH   ZDELBADC                no, bad parm                     28700030
         CLI   OPT8,C'J'               valid char? CA-D0                28710030
         BL    ZDELUPD                 yes, update                      28720030
         CLI   OPT8,C'R'               valid char?  J-R                 28730030
         BNH   ZDELBADC                no, bad parm                     28740030
         CLI   OPT8,C'S'               valid char? DA-E1                28750030
         BL    ZDELUPD                 yes, update                      28760030
         CLI   OPT8,C'Z'               valid char?  S-Z                 28770030
         BNH   ZDELBADC                no, bad parm                     28780030
         CLI   OPT8,C'0'               valid char? EA-EF                28790030
         BL    ZDELUPD                 yes, update                      28800030
         CLI   OPT8,C'9'               valid char?  0-9                 28810030
         BH    ZDELUPD                 yes, update                      28820030
ZDELBADC ISPLINK ($SETMSG,=C'ISPO903 ') Invalid Character               28830030
         LA    R15,8                   rc=8                             28840031
         B     ZDELF50                 exit with RC=(15)                28850031
*                                                                       28860000
*        update ZDEL in the TSV and update ISPSPROF                     28870030
*                                                                       28880000
ZDELUPD  L     R4,TLD@                 load TLD address                 28890030
         USING TLD,R4                                                   28900030
         L     R5,TLDTSVP              System Variables Table           28910030
         USING TSV,R5                                                   28920030
         MVC   TSVZDEL,OPT8            update ZDEL field in TSV         28930030
         LA    R1,TLD@                 TLD pointer                      28940030
         L     R15,TLDTSCP             ISPTSC0                          28950030
         L     R15,272(,R15)           ISPCUP (Update Profile)          28960030
         BALR  R14,R15              <- refresh ZDEL                     28970030
         STRING 'Delimiter set to ',TSVZDEL,INTO=SHORTMSG               28980030
         STRING 'Command Delimiter changed from ',ZDEL,                X28990030
               ' to ',TSVZDEL,INTO=LONGMSG                              29000030
         B     ZDELF49                 send msg, exit with RC=0         29010031
         DROP  R4,R5                   TLD,TSV                          29020030
*                                                                       29030000
*        Display current ZDEL value                                     29040030
*                                                                       29050000
ZDELSHOW CLI   OPT8,C' '               ZDEL display?                    29060030
         BNE   ZDELLENG                no, bad parm                     29070030
         STRING 'Delimiter is ',ZDEL,INTO=SHORTMSG                      29080030
         STRING 'Command Delimiter is currently set to ',ZDEL,         X29090030
               INTO=LONGMSG                                             29100030
         B     ZDELF49                 send msg, exit with RC=0         29110031
*                                                                       29120000
*        Specified parameter has invalid format                         29130030
*                                                                       29140000
ZDELLENG STRING 'Invalid Parameter',INTO=SHORTMSG                       29150030
         STRING 'Parameter must be specified as a single character.',  X29160030
               INTO=LONGMSG                                             29170030
*                                                                       29180000
ZDELF48  EQU   *                                                        29190031
         MVI   ALARM,C'Y'              error, beep.                     29200030
ZDELF49  EQU   *                                                        29210031
         BAL   R14,SETMSG           <- send message, set r15            29220030
*                                                                       29230000
ZDELF50  LA    R1,4                    r1=4: exit rc=(15)               29240031
         PR                                                             29250031
*********************************************************************** 29260038
*                                                                     * 29270031
*        Parse the parm options into OPT,PARM3,PARM4                  * 29280031
*                                                                     * 29290031
*              Input:   PARM='EDIT,abcd,efgh,ikjl'                    * 29300031
*                                                                     * 29310031
*              output:  FUNCTION='EDIT '                              * 29320031
*                       OPT='abcd'                                    * 29330031
*                       PARM3='efgh'                                  * 29340031
*                       PARM4='ijkl'                                  * 29350031
*                                                                     * 29360031
*********************************************************************** 29370038
PARSE3   BEGIN_PROC                                                     29380031
         LA    R4,OPT2                 saved options                    29390031
         L     R5,OPTLEN               length of options                29400031
         BAL   R14,PARSE_PARM       <- parse parm into function,opt     29410031
         DC    S(L'OPT,OPT)            second operand                   29420031
         DC    S(L'PARM3,PARM3)        third operand                    29430031
         DC    S(L'PARM4,PARM4)        fourth operand                   29440031
         STRING (OPT,,T),INTO=OPT2     count characters                 29450031
         ST    R15,OPTLEN              length of &OPT                   29460031
         PR                                                             29470031
         TITLE 'CURSOR: Extract Data Set Name from Screen Buffer'       29480029
*********************************************************************** 29490010
*                                                                     * 29500000
*        Scan data at the cursor position for a dsname                * 29510010
*                                                                     * 29520000
*        Some of this code has been lifted from ISPCDSN,              * 29530010
*        in file 270 of the CBT tape.                                 * 29540029
*                                                                     * 29550000
*********************************************************************** 29560010
CURSOR   BEGIN_PROC                                                     29570030
         L     R6,TLD@                 R6->TLD                          29580030
         USING TLD,R6                                                   29590028
*L R1,TLDTLSP                                                     -DEL- 29600034
*@SNAP TLDCLSWD,TLDCSR,((R1),320)                                 -DEL- 29610034
*                                                                       29620000
*        Retrieve screen buffer address and cursor position.            29630029
*                                                                       29640000
         ICM   R15,B'1111',TLDCLSWD    screen width (zero if ISPSTRT)   29650024
         BZ    CURSOR98                zero, exit to prevent S0C9       29660024
         SLR   R0,R0                   prepare "DR"                     29670023
         L     R1,TLDCSR               get cursor offset                29680023
         DR    R0,R15                  get line $ (R0) and offset (R1)  29690024
         LR    R5,R0                   cursor offset in line            29700010
         M     R0,TLDCLSWD             get offset to current line       29710023
         AL    R1,TLDTLSP              change offset to addr            29720023
         LR    R4,R1                   Current line in screen image     29730010
*---------------------------------------------------------------------* 29740010
*                                                                     * 29750000
*        Build scan table for TRT.                                    * 29760029
*                                                                     * 29770000
*---------------------------------------------------------------------* 29780010
CURSOR21 MVI   TRNTBL,255              fill table with X'FF'            29790029
         MVC   TRNTBL+1(255),TRNTBL    fill table with X'FF'            29800029
         BAL   R1,CURSOR22             branch around table, set R1      29810010
         DC    C'$',AL1(1)             $                                29820029
         DC    C'.',AL1(1)             .                                29830029
         DC    C'#',AL1(2)             #@                               29840049
         DC    C'a',AL1(9)             a-i                              29850029
         DC    C'j',AL1(9)             j-r                              29860029
         DC    C's',AL1(8)             s-z                              29870029
         DC    C'{',AL1(1)             C0                               29880010
         DC    C'-',AL1(1)             60                               29890018
*DC C'+',AL1(1)             4E                                    -DEL- 29900049
         DC    C'A',AL1(9)             A-I                              29910029
         DC    C'J',AL1(9)             J-R                              29920029
         DC    C'S',AL1(8)             S-Z                              29930029
         DC    C'0',AL1(10)            0-9                              29940029
         DC    X'00',0H'0'             end of table                     29950010
*LOOP                                                                   29960010
CURSOR22 SLR   R3,R3                   clear work reg                   29970029
         IC    R3,0(,R1)               FIRST BYTE                       29980029
         LA    R2,TRNTBL(R3)           point to TRNTBL+X'4A'            29990029
         IC    R3,1(,R1)               length                           30000029
         SLR   R15,R15                 padding=X'00'                    30010029
         MVCL  R2,R14                  clear (R3) bytes                 30020029
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE              30030010
         CLI   0(R1),0                 END OF TABLE?                    30040010
         BNE   CURSOR22                NEXT STRING                      30050010
*ENDLOOP                                                                30060010
*---------------------------------------------------------------------* 30070029
*                                                                     * 30080000
*        Extend current line to facilitate dsname extraction          * 30090029
*                                                                     * 30100000
*---------------------------------------------------------------------* 30110029
         L     R1,TLDCLSWD             line length                      30120029
         STRING 56X,((R4),(R1)),INTO=LONGMSG                            30130029
         LA    R4,LONGMSG              new line                         30140029
         LA    R5,56(R5,R4)            cursor address                   30150029
         SLR   R7,R7                   no left paren                    30160029
         DROP  R6                      was TLD                          30170029
*---------------------------------------------------------------------* 30180028
*                                                                     * 30190000
*        If the cursor is placed under DSN= or DSNAME= then           * 30200028
*        move it under the 1st char to the right of the = sign.       * 30210028
*                                                                     * 30220000
*---------------------------------------------------------------------* 30230028
CURSOR30 BAL   R2,CURSOR31             branch around table              30240028
         DC    AL1(3),C'DSN='          JCL                              30250028
         DC    AL1(6),C'DSNAME='       JCL                              30260028
         DC    X'00',0H'0'             end of table                     30270029
*loop                                                                   30280028
CURSOR31 SLR   R3,R3                                                    30290028
         IC    R3,0(,R2)               length of literal                30300029
         LA    R0,1(,R3)               length of scan area              30310029
         LR    R1,R5                   current position                 30320029
         SR    R1,R3                   start of scan area               30330029
*--loop                                                                 30340028
CURSOR32 EX    R3,CURSOR36             execute CLC                      30350028
         BE    CURSOR38                found, exit                      30360028
         LA    R1,1(,R1)               bump index                       30370028
         BCT   R0,CURSOR32             scan further                     30380028
*--endloop                                                              30390028
         LA    R2,1+1(R3,R2)           next entry in literal table      30400028
         CLI   0(R2),0                 end of table?                    30410029
         BNE   CURSOR31                no, search for next literal      30420028
*endloop                                                                30430028
         B     CURSOR39                                                 30440028
CURSOR36 CLC   0(*-*,R1),1(R2)         scan for "DSN="                  30450028
CURSOR38 LA    R5,1(R3,R1)             start of dsname                  30460029
CURSOR39 EQU   *                                                        30470028
*---------------------------------------------------------------------* 30480028
*                                                                     * 30490000
*        If the cursor is positionned under a parenthesis, ignore it. * 30500029
*                                                                     * 30510000
*---------------------------------------------------------------------* 30520029
CURSOR42 EQU   *                                                        30530029
         CLI   0(R5),C'('              Is it left paren?                30540029
         BNE   CURSOR43                no, jump                         30550029
         LA    R5,1(,R5)               yes, skip to next char           30560029
         B     CURSOR42                there may be several of them     30570029
CURSOR43 EQU   *                                                        30580029
         CLI   0(R5),C')'              Is it right paren?               30590029
         BNE   CURSOR44                no, jump                         30600029
         BCTR  R5,0                    yes, try char to the left        30610029
         B     CURSOR43                there may be several of them     30620029
CURSOR44 EQU   *                                                        30630029
*---------------------------------------------------------------------* 30640029
*                                                                     * 30650000
*        Check that the cursor is under a valid dsname character      * 30660029
*                                                                     * 30670000
*---------------------------------------------------------------------* 30680029
         TRT   0(1,R5),TRNTBL          cursor under a data set name?    30690029
         BZ    CURSOR50                Yes, begin scanning for start    30700029
         CLI   0(R5),C''''             Is it a quote?                   30710029
         BNE   CURSOR98                No, cursor invalid               30720029
         MVI   QFLAG,X'80'             Yes, indicate left quote         30730010
         TRT   1(1,R5),TRNTBL          Is dsn to right of quote?        30740029
         BZ    CURSOR59                Yes, prepare to extract it       30750029
         BCTR  R5,0                    No,  check left of quote         30760029
         CLI   0(R5),C')'              'my.dsn(mymbr)' ?                30770029
         BE    CURSOR48                Yes, accept it                   30780033
         TRT   0(1,R5),TRNTBL          Was it there?                    30790029
         BNZ   CURSOR98                No,  cursor invalid              30800010
CURSOR48 MVI   QFLAG,X'01'             Yes, indicate right quote        30810029
*---------------------------------------------------------------------* 30820029
*                                                                     * 30830000
*        Scan backwards to locate beginning of dsname                 * 30840029
*                                                                     * 30850000
*        If we pass over a left parenthesis, look for a period        * 30860033
*        to determine if the parenthesis marks the beginning of       * 30870033
*        the dsname or of the member name.                            * 30880033
*                                                                     * 30890000
*---------------------------------------------------------------------* 30900029
CURSOR50 LR    R2,R5                   current position                 30910029
         SR    R2,R4                   subtract addr of pos 1           30920029
*loop                                                                   30930029
CURSOR52 BCTR  R5,0                    R5-> cursor location             30940029
         TRT   0(1,R5),TRNTBL          valid dsn char?                  30950029
         BZ    CURSOR54                yes, iterate                     30960029
         CLI   0(R5),C'('              Was delimiter left paren?        30970029
         BNE   CURSOR56                No, include parens in dsn        30980029
         MVI   TRNTBL+C'.',255         set period invalid for scan      30990029
         TRT   1(9,R5),TRNTBL          find delimiter                   31000029
         MVI   TRNTBL+C'.',0           reset period in scan table       31010029
         BZ    CURSOR54                no dlm, continue                 31020029
         CLI   0(R1),C'.'              period found?                    31030029
         BE    CURSOR61                yes, must be dsn                 31040029
         LTR   R7,R7                   first left paren?                31050029
         BNZ   CURSOR61                no, leave                        31060029
         LR    R7,R5                   yes, remember it                 31070029
CURSOR54 BCT   R2,CURSOR52             Yes, decr offset; check next     31080029
*endloop                                                                31090029
CURSOR56 LA    R0,1(,R5)               1st byte of dsname               31100029
         CLR   R0,R7                   left paren at start of dsn?      31110029
         BNE   CURSOR59                No, jump                         31120029
         SLR   R7,R7                   yes, forget all about it         31130029
         LA    R5,1(,R5)               make "(" the dlm                 31140029
*                                                                       31150000
*        R5 now points to start of dsname                               31160029
*                                                                       31170000
CURSOR59 EQU   *                                                        31180029
         CLI   0(R5),C''''             Was delimiter a quote?           31190029
         BNE   CURSOR61                No,  leave bits unchanged        31200029
         OI    QFLAG,X'80'             Yes, indicate left quote         31210010
*---------------------------------------------------------------------* 31220029
*                                                                     * 31230000
*        scan dsname to locate its right boundary                     * 31240029
*                                                                     * 31250000
*---------------------------------------------------------------------* 31260029
CURSOR61 LA    R5,1(,R5)               R5-> start of dsname             31270029
         LTR   R7,R7                   do we have a member name?        31280029
         BNZ   CURSOR65                no, do not look for right paren  31290029
*                                                                       31300000
*        no mbr name found yet, check for a left parenthesis            31310029
*                                                                       31320000
         TRT   0(56,R5),TRNTBL         Scan until not in table          31330029
         BZ    CURSOR98                end dlm not found, exit          31340029
         LR    R2,R1                   R2-> right delimiter             31350029
         CLI   0(R1),C'('              Was delimiter a left paren?      31360029
         BNE   CURSOR66                no, this is the end of the dsn   31370029
         LR    R7,R1                   R7-> start of mbr name           31380029
         CLI   1(R7),C'+'              AA.BB.CC(+1)                     31390033
         BNE   *+8                     no, jump                         31400033
 ORG *-4                                                                31410049
         BNE   CURSOR63                no, jump                         31420049
         CLI   1+1(R7),C'0'            AA.BB.CC(+1)                     31430049
         BL    CURSOR63                no, jump                         31440049
         LA    R7,1(,R7)               SKIP + SIGN                      31450033
CURSOR63 EQU   *                                                        31460049
*GILBERT.GSF.SOURCE(FA*H)                                               31470033
         MVI   TRNTBL+C'*',0           member name can be generic       31480033
         MVI   TRNTBL+C'%',0           member name can be generic       31490033
*                                                                       31500000
*        Find end of member name                                        31510029
*                                                                       31520000
CURSOR65 TRT   1(9,R7),TRNTBL          Scan for right paren             31530029
         BZ    CURSOR98                not found, ignore mbr name       31540029
         CLI   0(R1),C')'              Was delimiter a right paren?     31550029
         BNE   CURSOR98                no, ignore mbr name              31560029
         LA    R2,1(,R1)               point R2 past right paren        31570029
*                                                                       31580000
CURSOR66 EQU   *                                                        31590029
         CLI   0(R2),C''''             Was delimiter a quote?           31600010
         BNE   CURSOR68                No,  leave bits unchanged        31610029
         OI    QFLAG,X'01'             Yes, indicate right quote        31620010
CURSOR68 TM    QFLAG,X'81'             Quotes surrounding dsname ?      31630029
         BM    CURSOR98                no matching quotes               31640010
*---------------------------------------------------------------------* 31650029
*                                                                     * 31660000
*        remove LISTCAT header                                        * 31670029
*                                                                     * 31680000
*---------------------------------------------------------------------* 31690029
CURSOR80 BAL   R1,CURSOR81             branch around table              31700029
         DC    C'AIX------'                                             31710033
         DC    C'ALIAS----'                                             31720038
         DC    C'CLUSTER--'                                             31730029
         DC    C'DATA-----'                                             31740029
         DC    C'GDG------'                                             31750033
         DC    C'INDEX----'                                             31760029
         DC    C'NONVSAM--'                                             31770029
         DC    C'PATH-----'                                             31780033
         DC    C'USERCAT--'                                             31790031
         DC    C'SYMBOLIC-'            ALIAS ASSOCIATIONS               31800042
         DC    C'RESOLVED-'            ALIAS ASSOCIATIONS               31810042
         DC    C'PGSPC----'            PAGE SPACE                       31820042
         DC    X'00',0H'0'             end of table                     31830029
*loop                                                                   31840029
CURSOR81 CLC   0(9,R1),0(R5)           compare header                   31850029
         BE    CURSOR82                found, exit                      31860029
         LA    R1,9(,R1)               next entry in header table       31870029
         CLI   0(R1),0                 end of table?                    31880029
         BNE   CURSOR81                no, check next header            31890029
*endloop                                                                31900029
         B     CURSOR90                                                 31910029
CURSOR82 LA    R5,9(,R5)               skip header                      31920029
*---------------------------------------------------------------------* 31930029
*                                                                     * 31940000
*        return dsname address and length to invoking routine         * 31950029
*                                                                     * 31960000
*---------------------------------------------------------------------* 31970029
CURSOR90 LR    R0,R2                   R0 = first byte after dsname     31980029
         LR    R1,R5                   R1 = first byte of dsname        31990029
         SLR   R0,R1                   R0 = length                      32000010
         PR                            exit                             32010028
*                                                                       32020000
CURSOR98 SLR   R0,R0                   no dsname                        32030010
         SLR   R1,R1                   no dsname                        32040010
*                                                                       32050000
CURSOR99 PR                            GOBACK                           32060028
*********************************************************************** 32070023
         MACRO                                                    macro 32080023
&NAME   $LINK  &EP=,&PARAM=,&ERRET=                               macro 32090023
&NAME    LA    R0,=CL8'&EP'            EP name                          32100023
         L     R1,CVTPTR(0,0)          CVT                              32110023
         L     R1,CVTLINK-CVTMAP(,R1)  SYS1.LINKLIB                     32120023
         STM   R0,R1,12(R13)           SF=L                             32130023
         LINK  SF=(E,12(,R13)),PARAM=&PARAM,VL=1,MF=(E,TENWORDS)        32140023
         AIF   (T'&ERRET EQ 'O').MEND                             macro 32150023
         LTR   R15,R15                 Any error?                       32160023
         BNZ   &ERRET                  yes, jump                        32170023
.MEND    MEND                                                     macro 32180023
         TITLE 'SETUP: Perform Initialization'                          32190029
*********************************************************************** 32200000
*                                                                     * 32210000
*        SETUP (first time only)                                      * 32220000
*                                                                     * 32230000
*        1. Make myself permanently resident in memory.               * 32240000
*                                                                     * 32250000
*        2. Call the PRELOAD routine                                  * 32260007
*                                                                     * 32270000
*        3. Define the RESET edit macro                               * 32280000
*                                                                     * 32290000
*********************************************************************** 32300000
SETUP00  BEGIN_PROC                                                     32310030
*TPUT OWNNAME,8                                                   -DEL- 32320033
         LA    R1,SETUP500             SETUP URP                        32330030
         STRING ((R1),,X),INTO=URPNAME SETUP URP                        32340030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              32350030
         LTR   R15,R15                 First time?                      32360007
         BNZ   SETUP99                 NO, EXIT                         32370007
*TPUT URPNAME,8                                                   -DEL- 32380033
*                                                                       32390000
*        Invoke the PRELOAD routine.  If I've been invoked via CALL,    32400007
*        the tasklib will be first in the search sequence.              32410007
*                                                                       32420000
SETUP20  L     R15,=A(PRELOAD)         pre-load routine                 32430007
         BALR  R14,R15              <- invoke it                        32440007
*                                                                       32450000
*        Execute the SETUP500 routine as a URP to issue LOAD and        32460030
*        ensure that I stay in memory until ISPF terminates.            32470030
*                                                                       32480000
         LA    R1,SETUP500             init routine                     32490030
         BAL   R14,EXECURP          <- Execute SETUP500 as a URP        32500030
         LTR   R15,R15                 OK?                              32510000
         BNZ   SETUP90                 no, jump                         32520007
         DELETE EPLOC=OWNNAME          reduce use cnt at ISPTASK level  32530000
*---------------------------------------------------------------------* 32540007
*                                                                     * 32550000
*        Define the "RESET" EDIT macro                                * 32560007
*                                                                     * 32570000
*        Note that this will prevent you from accessing a program     * 32580007
*        or TSO CP called RESET; if it is a problem, comment out      * 32590007
*        the IDENTIFY macro below.                                    * 32600007
*                                                                     * 32610000
*---------------------------------------------------------------------* 32620007
SETUP90  EQU   *                                                        32630007
         IDENTIFY EP=RESET,ENTRY=SETUP800                               32640007
*                                                                       32650000
SETUP99  PR                                                             32660007
*---------------------------------------------------------------------* 32670030
*                                                                     * 32680030
*        Execute the routine at (R1) as a URP                         * 32690031
*                                                                     * 32700030
*        Invoke the Un-authorized Resource Processor Service Routine. * 32710030
*        It schedules an IRB at the IKJEFT09 level to execute the     * 32720030
*        routine whose address is passed in R1.                       * 32730030
*                                                                     * 32740030
*---------------------------------------------------------------------* 32750030
EXECURP  BEGIN_PROC                                                     32760030
         ST    R13,TOKEN               pass A(DYNAM)                    32770030
         L     R4,TSI@                 V(TSI)                           32780030
         USING TSI,R4                                                   32790030
        $LINK  EP=IKJURPS,                                             +32800030
               PARAM=(TSIECTP,    1    ECT ADDRESS                     +32810030
               URPNAME,           2    EP name                         +32820030
               TOKEN,             3    parameter                       +32830030
               RETCODE,           4    RETCODE FROM SETUP500           +32840030
               REASON,            5    REASON CODE FROM SETUP500       +32850030
               RETCODE2,          6    RETCODE FROM IKJURPS            +32860030
               DUMMY,             7    *DUMMY*                         +32870031
               DUMMY,             8    *DUMMY*                         +32880031
               DUMMY,             9    *DUMMY*                         +32890031
               =F'1')            10    issue messages                   32900030
         PR                                                             32910030
         DROP  R4,R12                  TSI,base                         32920033
         PUSH  USING                                                    32930000
         DROP                                                           32940016
*---------------------------------------------------------------------* 32950000
*                                                                     * 32960000
*        RESET EDIT macro                                             * 32970000
*                                                                     * 32980000
*---------------------------------------------------------------------* 32990000
SETUP800 BAKR  R14,0                   LOCAL BASE                       33000021
         LR    R12,R15                 base reg                         33010031
         USING SETUP800,R12                                             33020031
         L     R11,BASEADDR-SETUP800(,R15) literal pool                 33030031
         USING FASTPATH,R11                                             33040031
*  ISREDIT MACRO                                                        33050000
         LA    R1,ISREDIT1             ISREDIT MACRO                    33060000
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO                    33070021
*  ISREDIT RESET                                                        33080000
         LA    R1,ISREDIT2             ISREDIT RESET                    33090000
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO                    33100021
*  RETURN TO SYSTEM                                                     33110000
         SLR   R15,R15                 RETURN CODE                      33120000
         PR                            GOBACK WITH RC=00                33130021
         DROP                                                           33140000
ISREDIT1 DC    AL4($ISREDIT,F5,*+X'80000004'),C'MACRO'                  33150000
ISREDIT2 DC    AL4($ISREDIT,F5,*+X'80000004'),C'RESET'                  33160000
F5       DC    FL4'5'                                                   33170000
         DROP                                                           33180016
*---------------------------------------------------------------------* 33190000
*                                                                     * 33200000
*        URP Routine (executes under the IKJEFT09 TCB)                * 33210007
*                                                                     * 33220000
*        1. make myself resident                                      * 33230007
*        2. invoke the PRELOAD routine                                * 33240007
*        3. prime the timer to prevent S522 abends                    * 33250007
*                                                                     * 33260000
*---------------------------------------------------------------------* 33270000
SETUP500 BAKR  R14,0                   save regs                        33280030
         LR    R12,R15                 A(SETUP500)                      33290031
         USING SETUP500,R12                                             33300031
         L     R11,BASEADDR-SETUP500(,R15) literal pool                 33310031
         USING FASTPATH,R11                                             33320031
         L     R10,4(,R1)              A(DYNAM)                         33330030
         L     R10,0(,R10)             A(DYNAM)                         33340030
         USING DYNAM,R10                                                33350030
*                                                                       33360000
*        Prime the timer (unless we have TIME=1440)                     33370013
*                                                                       33380000
         L     R14,PSATOLD-PSA(0,0)    TCB of my task                   33390013
         USING TCB,R14                                                  33400013
         L     R14,TCBJSCB             job step control block           33410013
         USING IEZJSCB,R14                                              33420013
         L     R14,JSCSCT              Current step's SCT prefix        33430013
         USING INSMSCT-16,R14                                           33440013
         ICM   R14,B'0111',SCTXBTTR    address of SCTX (SCT extension)  33450013
         USING SCTXIN-16,R14                                            33460013
         CLC   SCTXSTL,=A(1440*60*100) TIME=1440?                       33470016
         BE    SETUP520                yes, do not issue STIMER         33480013
         DROP  R14                     temp base                        33490033
         L     R15,=A(STOP522)         PRIME TIMER                      33500030
         BALR  R14,R15              <- PRIME TIMER                      33510001
*WTO 'XX',ROUTCDE=11                                              -DEL- 33520013
SETUP520 EQU   *                                                        33530013
*                                                                       33540000
         LOAD  EPLOC=OWNNAME           bump my use count                33550000
*                                                                       33560000
         L     R15,=A(PRELOAD)         jpa modules                      33570016
         BALR  R14,R15              <- preload some ISP/ISR modules     33580005
         SLR   R15,R15                 RC=0                             33590000
         PR                            goback                           33600000
BASEADDR DC    A(FASTPATH)             base addr for literal pool       33610018
         DROP                                                           33620009
*---------------------------------------------------------------------* 33630000
*                                                                     * 33640000
*        TIMER EXIT RTNE                                              * 33650001
*                                                                     * 33660000
*---------------------------------------------------------------------* 33670000
STOP522  BAKR  R14,0                   save regs                        33680030
&STOP522 SETC  'NO'                    STOP522(NO)                      33690030
         AIF   ('&SYSPARM' NE 'STOP522').STOP522X                       33700030
&STOP522 SETC  'YES'                   STOP522(YES)                     33710030
         LR    R12,R15                 A(STOP522)                       33720030
         USING STOP522,R12                                              33730030
         TIME  DEC                     R0=HHMMSSHH                      33740001
         CLM   R0,B'1100',STOP522T     PAST 19:00 ?                     33750030
         BH    STOP522X                YES, ALLOW S522 AGAIN            33760030
         LA    R10,DYNAML              length of dynamic storage area   33770016
         GETMAIN R,LV=(R10)            get dynamic storage              33780016
         LR    R13,R1                                                   33790001
         USING DYNAM,R13                                                33800009
         L     R1,CVTPTR(0,0)          CVT Address                      33810001
         L     R1,CVTSMCA-CVT(,R1)     SMF SMCA                         33820001
         L     R1,SMCAJWT-SMCABASE(,R1) JWT BIT 31 IS 1.048576 SECONDS  33830005
         LA    R0,100                  prepare MR                       33840005
         MR    R0,R0                   APPROX TIME IN 1/100 TH OF A SEC 33850005
         ST    R1,DWD                  STORE FOR STOP522 RTNE           33860030
         STIMERM SET,                                                  X33870001
               ID=DUMMY,               dummy parm                      X33880031
               BINTVL=DWD,             interval                        X33890001
               EXIT=STOP522,           exit addr                       X33900030
               MF=(E,STIMERL)                                           33910001
         FREEMAIN R,LV=(R10),A=(R13)   free dynamic storage             33920016
.STOP522X ANOP                                                          33930034
STOP522X PR                            GOBACK                           33940030
*                                                                       33950000
STOP522T DC    X'1900'                 19:00                            33960030
*                                                                       33970000
         POP   USING                                                    33980000
*********************************************************************** 33990000
*                                                                     * 34000000
*        Add Fast-path commands to ISPCMDS                            * 34010000
*                                                                     * 34020000
*********************************************************************** 34030000
ADDCMDS  BEGIN_PROC                                                     34040030
         L     R7,=V(ISPCMDS)          first table entry                34050031
         STRING ($ISPCMDS,,T),' updated',INTO=SHORTMSG                  34060043
&REST    SETC  'The following fast-path commands have been installed:'  34070007
         STRING (OWNNAME,,T),' &REL STOP522(&STOP522) - &REST',        X34080030
               INTO=LONGMSG                                             34090030
*LOOP                                                                   34100000
ADDCMDS1 LA    R1,=A($TBTOP,$ISPCMDS+VL)                                34110007
         LINK  SF=(E,ISPLINK$)         TBTOP ISPCMDS                    34120021
*                                                                       34130000
*        Build Command String for opening message                       34140018
*                                                                       34150000
         STRING (LONGMSG,,T),1X,((R7),8),INTO=LONGMSG                   34160018
*                                                                       34170000
         MVC   DWD,0(R7)               move verb                        34180018
         OC    DWD,BLANKS              ALL CAPS                         34190018
         ISPLINK ($VREPLACE,$ZCTVERB,=F'8',DWD)                         34200018
         LA    R7,8(,R7)               skip verb                        34210000
*                                                                       34220000
*        delete the table entry if it exists in ISPCMDS already         34230030
*                                                                       34240000
         LA    R1,=A($TBSCAN,$ISPCMDS,$ZCTVERB+VL)                      34250000
         LINK  SF=(E,ISPLINK$)         TBSCAN ISPCMDS ZCTVERB           34260021
         LTR   R15,R15                                                  34270000
         BNZ   ADDCMDS3                                                 34280007
         LA    R1,=A($TBDELETE,$ISPCMDS+VL)                             34290000
         LINK  SF=(E,ISPLINK$)         TBDELETE ISPCMDS                 34300021
*                                                                       34310000
*        Delete duplicate entries from SITE and USER command tables     34320030
*                                                                       34330000
ADDCMDS3 EQU   *                                                        34340030
         CLI   ISPFVM,X'42'            ISPF 4.2 or up?                  34350031
         BL    ADDCMDS5                no, jump                         34360031
         L     R4,TSI@                 R4->TSI                          34370031
         USING TSI,R4                                                   34380031
         ISPLINK ($TBTOP,TSILCTAB),ERRET=ADDCMDS4                       34390031
         ISPLINK ($TBSCAN,TSILCTAB,$ZCTVERB),ERRET=ADDCMDS4             34400031
         ISPLINK ($TBDELETE,TSILCTAB)  TBDELETE SITECMDS                34410031
*LR R1,R15                                                        -DEL- 34420030
*STRING TSILCTAB,1X,DWD,' TBDELETE RC=',((R1),,L),INTO=OPT2       -DEL- 34430031
*TPUT OPT2,(R15)                                                  -DEL- 34440030
ADDCMDS4 EQU   *                                                        34450030
         ISPLINK ($TBTOP,TSIUCTAB),ERRET=ADDCMDS5                       34460031
         ISPLINK ($TBSCAN,TSIUCTAB,$ZCTVERB),ERRET=ADDCMDS5             34470031
         ISPLINK ($TBDELETE,TSIUCTAB)  TBDELETE USERCMDS                34480031
*LR R1,R15                                                        -DEL- 34490030
*STRING TSIUCTAB,1X,DWD,' TBDELETE RC=',((R1),,L),INTO=OPT2       -DEL- 34500031
*TPUT OPT2,(R15)                                                  -DEL- 34510030
         DROP  R4                      TSI                              34520031
ADDCMDS5 EQU   *                                                        34530030
         SLR   R2,R2                                                    34540030
         ISPLINK ($VREPLACE,$ZCTTRUNC,=F'1',(R7))                       34550000
         LA    R7,1(,R7)               skip trunc                       34560000
*                                                                       34570000
         IC    R2,0(,R7)               L'&ACT                           34580000
         ST    R2,DWD                  L'&ACT                           34590000
         STRING (1(R7),(R2)),INTO=COMMAND                               34600030
         CLC   =C'SELECT PGM(FASTPATH) ',COMMAND                        34610030
         BNE   *+10                                                     34620030
         MVC   COMMAND+11(L'OWNNAME),OWNNAME  FASTPATH->TESTPATH        34630030
         ISPLINK ($VREPLACE,$ZCTACT,DWD,COMMAND)                        34640030
         LA    R7,1(R2,R7)             point past &ACT                  34650000
*                                                                       34660000
         IC    R2,0(,R7)               L'&DESC                          34670000
         ST    R2,DWD                  length                           34680000
         ISPLINK ($VREPLACE,$ZCTDESC,DWD,1(R7))                         34690000
         LA    R7,1(R2,R7)             point past &DESC                 34700000
*                                                                       34710000
         LA    R1,=A($TBADD,$ISPCMDS+VL)                                34720000
         LINK  SF=(E,ISPLINK$)         TBADD ISPCMDS                    34730021
*                                                                       34740000
         CLI   0(R7),X'00'             end of table?                    34750000
         BNE   ADDCMDS1                not yet, keep doing it           34760007
*ENDLOOP                                                                34770000
         LA    R1,=A($TBTOP,$ISPCMDS+VL)                                34780000
         LINK  SF=(E,ISPLINK$)         TBTOP ISPCMDS                    34790021
         BAL   R14,SETMSG           <- send message                     34800018
*                                                                       34810000
         PR                            GOBACK                           34820001
*---------------------------------------------------------------------* 34830006
*        Issue message                                                * 34840030
*---------------------------------------------------------------------* 34850006
SETMSG   BEGIN_PROC                                                     34860030
         STRING (SHORTMSG,,T),INTO=SHORTMSG count characters in message 34870006
         ST    R15,DWD                 store length                     34880006
         ISPLINK ($VREPLACE,$ZEDSMSG,DWD,SHORTMSG)                      34890030
         STRING (LONGMSG,,T),INTO=LONGMSG count characters in message   34900006
         ST    R15,DWD                 store length                     34910006
         ISPLINK ($VREPLACE,$ZEDLMSG,DWD,LONGMSG)                       34920030
         LA    R7,0                    rc=0 (alarm=n)                   34930031
         LA    R1,=A($SETMSG,$ISRZ000,$COND+VL)                         34940030
         CLI   ALARM,C'Y'              ALARM=YES?                       34950030
         BNE   SETMSG6                 no, jump                         34960031
         LA    R7,8                    rc=8 (alarm=y)                   34970031
         LA    R1,=A($SETMSG,$ISRZ001,$COND+VL)  yes, use ISRZ001       34980030
SETMSG6  EQU   *                                                        34990031
         MVI   ALARM,C'N'              ALARM=NO (default)               35000030
         LINK  SF=(E,ISPLINK$)         SETMSG ISRZ000                   35010030
         LR    R15,R7                  pass return code                 35020031
         PR                            GOBACK                           35030006
*********************************************************************** 35040000
*                                                                     * 35050000
*        PARSE A COMMA-DELIMITED JCL PARM                             * 35060000
*                                                                     * 35070000
*        LA    R4,PARM                 PARM VALUE                     * 35080020
*        LH    R5,LENGTH               PARM LENGTH                    * 35090020
*        BAL   R14,PARSE_PARM                                         * 35100030
*        DC    S(L'PARM1,PARM1)        LENGTH,ADDR                    * 35110000
*        DC    S(L'PARM2,PARM2)        LENGTH,ADDR                    * 35120000
*                                                                     * 35130000
*********************************************************************** 35140000
PARSE_PARM BEGIN_PROC SAVE=SAVE                                         35150030
         BCTR  R4,0                    START OF PARM - 1                35160000
         ALR   R5,R4                   LAST BYTE OF PARM                35170000
*LOOP                                                                   35180000
PARSE_PARM1 SLR R0,R0                  R0 = 00000000                    35190020
         ICM   R0,B'0011',2(R14)       R0 = 0000BDDD                    35200000
         SRDL  R0,12(0)                R0 = 0000000B, R1= BBB.....      35210000
         SRL   R1,20(0)                R1 = 00000DDD DISPLACEMENT       35220000
         ALR   R1,R13                  ADD CALLER'S SAVE AREA ADDR      35230000
         LR    R6,R1                   ADDR OF TARGET FIELD             35240000
         LH    R7,0(,R14)              LENGTH OF TARGET FIELD           35250000
*                                                                       35260000
         LA    R2,1(,R4)               FIRST BYTE OF CURRENT PARAMETER  35270000
*--LOOP                                                                 35280000
PARSE_PARM2 LA R4,1(,R4)               BUMP POINTER                     35290020
         CLR   R4,R5                   END OF PARM REACHED?             35300000
         BH    PARSE_PARM3             YES, EXIT LOOP                   35310020
         CLI   0(R4),C','              DELIMITER?                       35320000
         BNE   PARSE_PARM2             NO, KEEP LOOPIN'                 35330020
*--ENDLOOP                                                              35340000
PARSE_PARM3 LR R3,R4                   POSITION OF ','                  35350020
         SR    R3,R2                   LENGTH OF SOURCE PARAM           35360000
         ICM   R3,B'1000',BLANKS       PADDING                          35370007
         MVCL  R6,R2                   MOVE SOURCE TO TARGET            35380000
         LA    R14,2+2(,R14)           NEXT TARGET                      35390020
         CLI   0(R14),0                IS THIS A FIELD DESCRIPTOR?      35400000
         BE    PARSE_PARM1             YES, PROCESS IT                  35410020
*ENDLOOP                                                                35420000
         RETURN (0,12)                 goback                           35430030
*********************************************************************** 35440015
*                                                                     * 35450000
*        Execute an in-storage REXX EXEC                              * 35460018
*                                                                     * 35470000
*          LA  R1,=A(stmt1,L'stmt1)    FIRST STMT ADDR/LEN            * 35480018
*          LA  R0,8                    LENGTH OF ADDR/LEN ARRAY       * 35490018
*          LA  R2,TENWORDS+16          ADDR OF ARG LIST OR ZERO       * 35500018
*                                                                     * 35510000
*********************************************************************** 35520015
RUNEXEC  BEGIN_PROC                                                     35530030
         LA    R6,DYNAM_INSTBLK_HEADER ADDR OF IN-STORAGE BLOCK         35540015
         USING INSTBLK_HEADER,R6                                        35550015
         ST    R1,INSTBLK_ADDRESS      STORE INTO IN-STORAGE BLOCK      35560015
         ST    R0,INSTBLK_USEDLEN      COUNT STATEMENTS                 35570015
         ST    R6,PTR_INSTBLK          ADDR OF IN-STORAGE BLOCK         35580015
         MVC   INSTBLK_ACRONYM,=C'IRXINSTB'                             35590015
         MVC   INSTBLK_HDRLEN,=A(L'INSTBLK_HEADER)                      35600015
         MVC   INSTBLK_MEMBER,BLANKS                                    35610015
         MVC   INSTBLK_DDNAME,=C'SYSIN   '                              35620015
         MVC   INSTBLK_SUBCOM,BLANKS                                    35630015
*                                                                       35640000
         LA    R7,DYNAM_EVALBLOCK      ADDR OF EVAL BLOCK               35650030
         USING EVALBLOCK,R7                                             35660030
         ST    R7,PTR_EVALBLOCK        ADDR OF EXEC BLOCK               35670030
         LA    R0,EVALBLOCK_LENGTH/8   LENGTH IN DOUBLE-WORDS           35680030
         ST    R0,EVALBLOCK_EVSIZE     LENGTH IN DOUBLE-WORDS           35690030
         LA    R0,256                  LENGTH OF DATA IN BYTES          35700030
         ST    R0,EVALBLOCK_EVLEN      LENGTH OF DATA IN BYTES          35710030
*                                                                       35720000
*?       ISPLINK ($CONTROL,$DISPLAY,$SAVE) CONTROL DISPLAY SAVE         35730046
        $LINK  EP=IRXEXEC,             REXX Interpreter                X35740025
               PARAM=(=A(0),           EXEC BLOCK                      X35750030
               (R2),                   ARGUMENTS,                      X35760015
               =X'80000000',           Invoke as a command             X35770030
               PTR_INSTBLK,            IN-STORAGE BLOCK                X35780015
               =A(0),                  CPPL                            X35790015
               PTR_EVALBLOCK,          EVAL BLOCK                      X35800030
               =A(0),                  WORK AREA                       X35810015
               =A(0))                  USER WORK AREA                   35820023
*?       ISPLINK ($CONTROL,$DISPLAY,$RESTORE) CONTROL DISPLAY RESTORE   35830046
*                                                                       35840046
         ICM   R1,B'1111',EVALBLOCK_EVLEN length of the returned data   35850030
         BNP   RUNEXEC8                no data returned, exit           35860030
         BCTR  R1,0                    for "EX"                         35870030
         EX    R1,RUNEXECP             pack the result                  35880030
         CVB   R1,DWD                  return code from EXEC            35890030
         PR                                                             35900030
RUNEXEC8 EQU   *                                                        35910030
         BSM   R1,0                    no RC, return negative value     35920030
         PR                                                             35930015
RUNEXECP PACK  DWD,EVALBLOCK_EVDATA(*-*) pack the result                35940030
         DROP  R6,R7                                                    35950030
*********************************************************************** 35960031
*                                                                     * 35970031
*        Issue RACROUTE to check level of access to a data set        * 35980031
*                                                                     * 35990031
*        Input: ZWRKDSN contains dsname                               * 36000031
*                                                                     * 36010031
*        Output: R0 = 12  access(UNKNOWN)                             * 36020031
*                R0 = 0   access(NONE)                                * 36030031
*                R0 = 4   access(READ)                                * 36040031
*                R0 = 8   access(UPDATE)                              * 36050031
*                R0 = 12  access(CONTROL)                             * 36060031
*                R0 = 16  access(ALTER)                               * 36070031
*                                                                     * 36080031
*********************************************************************** 36090031
RACHECK  BEGIN_PROC                                                     36100031
         BAL   R14,LISTDSI          <- FLAGS                            36110033
         LTR   R15,R15                 catalogued data set?             36120031
         BNZ   RACHECK9                no, use default                  36130031
*                                                                       36140034
*        Check for ACF2 or Top-Secret                                   36150034
*                                                                       36160034
         L     R6,CVTPTR(0,0)          CVT Address                      36170034
         USING CVTMAP,R6                                                36180034
         ICM   R6,B'1111',CVTRAC       RACF VECTOR TABLE                36190034
         BZ    RACHECK9                no security system, exit         36200034
         USING RCVT,R6                                                  36210034
         CLC   RCVTID,=C'ACF2'         Is this ACF2?                    36220034
         BE    RACHECK9                yes, exit                        36230034
         CLC   RCVTID,=C'RTSS'         Is this Top-secret?              36240034
         BE    RACHECK9                yes, exit                        36250034
*                                                                       36260034
*        Check if ACF2 is on the system when RACFID='RCVT'              36270034
*                                                                       36280034
         TM    RCVTSTAT,RCVTRNA        RACF Inactive?                   36290034
         BO    RACHECK9                yes, exit                        36300034
         CLI   RCVTDSNL,0              Is it really RACF?               36310034
         BZ    RACHECK9                no, exit                         36320034
*                                                                       36330000
*        Check RACF status                                              36340031
*                                                                       36350000
         LA    R6,RACF_DYN             POINT TO MY SAF PARM LIST        36360031
         USING SAFP,R6                                                  36370031
         MVC   SAFP(RACF_LEN),RACF_MOD                                  36380031
         RACROUTE REQUEST=AUTH,                                        X36390031
               ENTITY=RACFDSN,         DATA SET NAME                   X36400031
               WORKA=RACFWORK,                                         X36410031
               MF=(E,SAFP)                                              36420031
         LR    R2,R15                  save SAF return code             36430031
*                                                                       36440000
*        build a RACHECK failure message in case the invoker needs it.  36450031
*                                                                       36460000
         STRING 'Authorization Failed',INTO=SHORTMSG                    36470031
         STRING 'RACROUTE REQUEST=AUTH,STATUS=ACCESS returned the folloX36480031
               wing: R15=',((R2),,R3Z),                                X36490031
               ' SAFPRRET=',(SAFPRRET,F,R3Z),                          X36500031
               ' SAFPRREA=',(SAFPRREA,F,R3Z),                          X36510031
               ' DSNAME=''',(RACFDSN,,T),'''',                         X36520031
               INTO=LONGMSG                                             36530031
         LTR   R15,R2                  any RACF decision ?              36540031
         BNZ   RACHECK9                no, use default                  36550031
         CLI   SAFPRRET+3,20           access returned?                 36560031
         BNE   RACHECK9                no, use default                  36570031
         L     R0,SAFPRREA             access into R0                   36580031
         STC   R0,RACHECK_ACCESS       save for caller                  36590031
         PR                                                             36600031
RACHECK9 EQU   *                                                        36610031
         MVI   RACHECK_ACCESS,ACCESS_CONTROL Default access             36620031
         PR                                                             36630031
         DROP  R6                      SAFP                             36640031
*                                                                       36650000
RACF_MOD RACROUTE REQUEST=AUTH,        CHECK AUTHORIZATION             X36660031
               CLASS='DATASET',        CHECK FOR DATASET AUTHORITY     X36670031
               DSTYPE=M,               MODEL                           X36680031
               STATUS=ACCESS,          RETURN USER'S CURRENT ACCESS    X36690031
               RELEASE=1.9,            RACF LEVEL                      X36700031
               MF=L                                                     36710031
*********************************************************************** 36720033
*                                                                     * 36730033
*        Check if a data set is migrated by HSM.                      * 36740033
*        If it is, ask for permission to HRECALL it.                  * 36750033
*                                                                     * 36760033
*********************************************************************** 36770033
CHKMIGR  BEGIN_PROC                                                     36780033
         CLC   CATVOL,=C'MIGRAT'       MIGRATED BY HSM?                 36790033
         BNE   CHKMIGR9                no, exit                         36800033
         MVI   DWD,C'1'                ML1 (disk)                       36810033
         CLI   CATDEVT+2,X'80'         migrated to tape?                36820033
         BNE   *+8                     no, jump                         36830033
         MVI   DWD,C'2'                ML2 (tape)                       36840033
         STRING 'Dataset(',(ZWRKDSN,,T),                               X36850033
               ') is migrated to ML',(DWD,1),                          X36860033
               '; Enter Y to RECALL it:',                              X36870033
               INTO=STRING1                                             36880033
         TPUT  STRING1,(R15),ASIS      write message (WRITENR)          36890033
         TGET  DWD+4,1                 get reply (one byte only)        36900033
         OI    DWD+4,C' '              uppercase                        36910033
         CLI   DWD+4,C'Y'              REPLY=Y ?                        36920033
         BE    CHKMIGR9                yes, exit                        36930033
         STRING 'Migrated Data Set',INTO=SHORTMSG                       36940033
         STRING 'Dataset(',(ZWRKDSN,,T),                               X36950033
               ') is migrated to ML',(DWD,1),                          X36960033
               INTO=LONGMSG                                             36970033
         MVI   ALARM,C'Y'              error, beep.                     36980033
         BAL   R14,SETMSG           <- send message                     36990033
         LA    R15,4                   no, RC=4                         37000033
         PR                                                             37010033
CHKMIGR9 SLR   R15,R15                 not migrated (RC=0)              37020033
         PR                                                             37030033
*********************************************************************** 37040019
*                                                                     * 37050000
*        Issue LOCATE macro to check for the existence of a data set  * 37060020
*                                                                     * 37070000
*********************************************************************** 37080019
LISTDSI  BEGIN_PROC                                                     37090030
         CLI   CATVOL,0                LOCATE performed already?        37100033
         BNE   LISTDSI8                yes, exit                        37110033
*                                                                       37120000
*        Remove member name and copy dsname to RACFDSN                  37130033
*                                                                       37140000
         LA    R0,L'RACFDSN            max length of dsname             37150035
         LA    R2,ZWRKDSN              START OF DSNAME                  37160035
*loop                                                                   37170035
LISTDSI2 CLI   0(R2),C'('              member name?                     37180035
         BE    LISTDSI3                yes, exit loop                   37190033
         LA    R2,1(,R2)               bump pointer                     37200035
         BCT   R0,LISTDSI2                                              37210035
*endloop                                                                37220035
LISTDSI3 STRING (ZWRKDSN,(R2)),INTO=RACFDSN move dsname w/o mbr name    37230035
         OC    RACFDSN,BLANKS          upper-case                       37240033
*                                                                       37250000
*        Retrieve true name from catalog                                37260035
*                                                                       37270000
         L     R14,LISTDSI_CAMLST      FLAGS                            37280019
         LA    R15,RACFDSN             DSNAME                           37290033
         SLR   R0,R0                   NO CVOL                          37300019
         LA    R1,RACFWORK             265 BYTES                        37310031
         STM   R14,R1,TENWORDS         relocate CAMLST                  37320019
         LOCATE TENWORDS               read catalog                     37330019
         LTR   R15,R15                 CATALOGUED DSN?                  37340033
         BNZ   LISTDSI7                no, exit                         37350033
         MVC   CATVOL,RACFWORK+6       yes, save volser                 37360033
         MVC   CATDEVT,RACFWORK+2      yes, save device type            37370033
*                                                                       37380035
*        Rebuild DSNAME(MEMBER) with true name instead of alias         37390035
*                                                                       37400035
         STRING (RACFDSN,44,T),((R2),ZWRKDSN+L'ZWRKDSN),               X37410035
               INTO=(RACFWORK+44,L'ZWRKDSN)                             37420035
         MVC   ZWRKDSN,RACFWORK+44     true name                        37430035
         SLR   R15,R15                 rc=0 (cataloged)                 37440035
LISTDSI7 PR                                                             37450033
*                                                                       37460000
LISTDSI8 SLR   R15,R15                 rc=0 (already LOCATEd)           37470033
         PR                                                             37480033
*                                                                       37490000
LISTDSI_CAMLST CAMLST NAME,0,,0                                         37500019
*********************************************************************** 37510010
*                                                                     * 37520031
*        LMINIT/VIEW/LMFREE via DDname                                * 37530031
*                                                                     * 37540031
*        MACLIBDD contains the DDname                                 * 37550031
*        STRING1 contains the dsnames                                 * 37560031
*                                                                     * 37570031
*********************************************************************** 37580010
LMVIEW   BEGIN_PROC                                                     37590030
         DEVTYPE MACLIBDD,DWD                                           37600023
         LTR   R15,R15                 ALREADY ALLOCATED?               37610015
         BZ    LMVIEW3                 YES, JUMP                        37620015
*                                                                       37630000
*        Issue ALLOCATE command to allocate specified data sets         37640031
*                                                                       37650000
         STRING 'CMD(ALLOCATE DD(',MACLIBDD,') SHR DS(',(STRING1,,T),  X37660031
               ')) MODE(FSCR)',INTO=COMMAND                             37670031
         ST    R15,DWD                 store length                     37680015
         L     R1,CVTPTR(0,0)          CVT Address                      37690019
         L     R1,CVTLINK-CVTMAP(,R1)  DCB for SYS1.LINKLIB             37700019
         LOAD  EP=ALLOC,DCB=(R1)       pre-load ALLOCATE command        37710019
         ISPLINK ($SELECT,DWD,COMMAND),ERRET=LMVIEW9                    37720015
*                                                                       37730000
*        Issue LMINIT/VIEW/LMFREE                                       37740031
*                                                                       37750000
LMVIEW3  EQU   *                                                        37760031
         STRING 'LMINIT DATAID(ID1) DDNAME(',MACLIBDD,') ENQ(SHRW)',   X37770023
               INTO=COMMAND                                             37780015
         BAL   R14,ISPEXEC          <- execute command                  37790015
         LTR   R15,R15                 COMMAND OK ?                     37800015
         BNZ   LMVIEW9                 NO, EXIT                         37810015
         LA    R0,L'DATAID             max length                       37820015
         ST    R0,DWD                  max length                       37830015
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=LMVIEW9       37840031
         STRING VIEWEDIT,' DATAID(',DATAID,') MEMBER(',(OPT,,T),       X37850033
               ') PROFILE(',(PARM3,8,T),')',INTO=COMMAND                37860033
         CLI   VIEWEDIT,C'V'           VIEW?                            37870023
         BNE   LMVIEW4                 no, jump                         37880023
         CLI   ISPFVM,X'41'            ISPF 4.1 or up?                  37890015
         BNL   LMVIEW4                 yes, jump                        37900015
         STRING 'BROWSE DATAID(',DATAID,') MEMBER(',(OPT,,T),')',      X37910033
               INTO=COMMAND                                             37920015
LMVIEW4  EQU   *                                                        37930015
         BAL   R14,ISPEXEC          <- execute command                  37940015
         LR    R7,R15                  save return code                 37950015
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND                37960015
         BAL   R14,ISPEXEC          <- execute command                  37970015
         LR    R15,R7                  restore return code              37980015
LMVIEW9  EQU   *                                                        37990031
         PR                                                             38000031
*********************************************************************** 38010033
*                                                                     * 38020033
*        Allocate or retrieve the XCTL Reusable Work Area             * 38030033
*                                                                     * 38040033
*********************************************************************** 38050033
XCTLGET  BEGIN_PROC                                                     38060033
         L     R1,CVTPTR(0,0)          CVT address                      38070034
         L     R2,CVTLINK-CVTMAP(,R1)  addr of SYS1.LINKLIB DCB         38080034
         LA    R3,=A(IEANT_TASK_LEVEL) SCOPE                            38090034
         LA    R4,XCTLNAME             NAME (16 bytes)                  38100034
         LA    R5,RACFWORK             TOKEN (16 bytes)                 38110034
         LA    R6,RETCODE              RETURN CODE                      38120034
         STM   R3,R6,PARMLIST          BUILD PARM LIST                  38130034
         OI    PARMLIST+12,X'80'       BUILD PARM LIST                  38140034
         LOAD  EP=IEANTRT,DCB=(R2)     SYS1.CSSLIB                      38150034
         LR    R15,R0                  pass EP addr                     38160034
         LA    R1,PARMLIST             parms for IEANTRT                38170034
         BASR  R14,R15              <- invoke IEANTRT                   38180034
         LTR   R15,R15                 already allocated?               38190033
         BZ    XCTLGET9                yes, exit                        38200033
         GETMAIN RU,LV=XCTLWORKL,LOC=ANY allocate work area             38210033
         XC    RACFWORK(16),RACFWORK   clear 16 bytes                   38220033
         ST    R1,RACFWORK                                              38230033
*STRING ((R1),,X),INTO=DWD                                        -DEL- 38240033
*TPUT DWD,8                                                       -DEL- 38250033
         LA    R6,=F'0'                PERSIST option                   38260034
         LA    R7,RETCODE              RETURN CODE                      38270034
         STM   R3,R7,PARMLIST          BUILD PARM LIST                  38280034
         OI    PARMLIST+16,X'80'       BUILD PARM LIST                  38290034
         LOAD  EP=IEANTCR,DCB=(R2)     SYS1.CSSLIB                      38300034
         LR    R15,R0                  pass EP addr                     38310034
         LA    R1,PARMLIST             parms for IEANTRT                38320034
         BASR  R14,R15              <- invoke IEANTCR                   38330034
XCTLGET9 L     R1,RACFWORK             return area address              38340033
         PR                                                             38350033
         DROP  R12                     local base                       38360033
*                                                                       38370000
XCTLNAME DC    CL16'FASTPATHXCTLWORK'  name for N/T service             38380033
IEANT_TASK_LEVEL EQU 1                                                  38390033
*                                                                       38400000
XCTLWORK DSECT                         XCTL Reusable Work Area          38410033
XCTLPARM DS    A(XCTLLEN,XCTLCMD)                                       38420033
XCTLLEN  DS    A(L'XCTLCMD)                                             38430033
XCTLCMD  DS    CL(L'COMMAND)                                            38440033
XCTLWORKL EQU  *-XCTLWORK                                               38450033
*********************************************************************** 38460000
$LTORG   LOCTR                                                          38470030
$STRING2 AH    R15,0(,R15)                                              38480034
         BR    R15                                                      38490034
ISPLINK$ LINK  EP=ISPLINK,SF=L                                          38500030
$ISPEXEC  DC   C'ISPEXEC '             PROGRAM                          38510033
$ISREDIT  DC   C'ISREDIT '             PROGRAM                          38520000
$ISRBRO   DC   C'ISRBRO  '             PROGRAM                          38530000
$ISRUDA   DC   C'ISRUDA  '             PROGRAM                          38540008
$CONTROL  DC   C'CONTROL'              FUNCTION                         38550000
$SELECT   DC   C'SELECT '              FUNCTION                         38560033
$SETMSG   DC   C'SETMSG'               FUNCTION                         38570000
$TBADD    DC   C'TBADD'                FUNCTION                         38580000
$TBDELETE DC   C'TBDELETE'             FUNCTION                         38590000
$TBSCAN   DC   C'TBSCAN'               FUNCTION                         38600000
$TBTOP    DC   C'TBTOP'                FUNCTION                         38610000
$VCOPY    DC   C'VCOPY'                FUNCTION                         38620000
$VDEFINE  DC   C'VDEFINE'              FUNCTION                         38630000
$VERASE   DC   C'VERASE'               FUNCTION                         38640030
$VGET     DC   C'VGET'                 FUNCTION                         38650000
$VPUT     DC   C'VPUT'                 FUNCTION                         38660000
$VREPLACE DC   C'VREPLACE'             FUNCTION                         38670000
$VRESET   DC   C'VRESET'               FUNCTION                         38680000
$CHAR     DC   C'CHAR'                 OPTION                           38690000
$ERRORS   DC   C'ERRORS'               OPTION                           38700000
$MOVE     DC   C'MOVE'                 OPTION                           38710000
$PROFILE  DC   C'PROFILE'              OPTION                           38720000
$RETURN   DC   C'RETURN'               OPTION                           38730000
$ZERRMSG  DC   C'ZERRMSG '             VARIABLE                         38740000
$EDBR0000 DC   C'EDBR0000'             VARIABLE                         38750000
$ISPCMDS  DC   C'ISPCMDS '             VARIABLE                         38760000
$ZCTACT   DC   C'ZCTACT '              VARIABLE                         38770018
$ZCTDESC  DC   C'ZCTDESC '             VARIABLE                         38780000
$ZCTTRUNC DC   C'ZCTTRUNC'             VARIABLE                         38790000
$ZCTVERB  DC   C'ZCTVERB '             VARIABLE                         38800000
$ISRZ000  DC   C'ISRZ000 '             MSGID (ALARM=NO)                 38810030
$ISRZ001  DC   C'ISRZ001 '             MSGID (ALARM=YES)                38820030
$ZEDLMSG  DC   C'ZEDLMSG '             VARIABLE                         38830030
$ZEDSMSG  DC   C'ZEDSMSG '             VARIABLE                         38840030
$COND     DC   C'COND '                OPTION                           38850018
VL       EQU   X'80000000'             end of list indicator            38860000
*********************************************************************** 38870000
*                                                                     * 38880000
*        Dynamic Storage           <-- R13    RMODE=24                * 38890049
*                                                                     * 38900000
*********************************************************************** 38910000
DYNAM    DSECT                                                          38920000
         DS    18F                     SAVE AREA                        38930000
TENWORDS DS    10F                     WORK AREA                        38940000
PARMLIST DS    12F                     parm list for ISPLINK/ISPEXEC    38950023
DWD      DS    D                       WORK AREA                        38960000
LLIBDCB  DS    V(IHADCB)               LIBDEF ISPLLIB DCB               38970031
CDE@     DS    V(CDENTRY)              own CDE                          38980031
TLD@     DS    V(TLD)                  ISPF TLD                         38990029
TSI@     DS    V(TSI)                  ISPF TSI                         39000030
CMD@     DS    A,F                     cmd entered by user (addr,len)   39010034
OWNNAME  DS    CL8'FASTPATH'           my own name                      39020030
OWNNAME2 DS    CL8'FASTPATH'           my own name (UNLOAD)             39030033
CMDNAME  DS    CL8'FSTSO'              Name of the ISPF command         39040034
*                                                                       39050000
ZENVIR   DS    CL32'ISPF 3.2'          CURRENT ISPF LEVEL               39060018
ZAPPLID  DS    C'ISF '                 CURRENT ISPF APPLICATION ID      39070018
ZUSER    DS    C'GILBERT'              USER ID                          39080030
ZPREFIX  DS    CL8'SYSTEM99'           Data Set Prefix                  39090030
ZSCREEN  DS    C'32'                   Screen number                    39100030
ZDEL     DS    C';'                    Command Delimiter ";"            39110030
ZSPLIT   DS    C'YES'                  Split screen                     39120030
ZWSCON   DS    CL64                    Workstation connection           39130038
*                                                                       39140000
         DS    0D                                                       39150030
FUNCTION DS    CL8                     FUNCTION                         39160000
OPT      DS    CL56                    2ND OPTION FROM PARM             39170020
PARM3    DS    CL100                   3RD OPTION FROM PARM             39180027
PARM4    DS    CL8                     4TH OPTION FROM PARM             39190020
NEWAPPL  DS    C'ISR '                 NEW ISPF APPL ID                 39200000
NEWPGM   DS    CL8                     NEXT PGM                         39210000
NEWPANEL DS    CL8                     NEXT PANEL                       39220000
NEWCMD   DS    CL8                     NEXT COMMAND                     39230013
OPT8     DS    CL8                     1st 8 chars of OPT               39240029
OPTADDR  DS    A(OPT,L'OPT)            addr of 2nd parm                 39250031
OPTLEN   EQU   OPTADDR+4,4,C'F'        length of 2nd parm               39260031
OPT2     DS    CL(L'OPT)               work area                        39270000
BLANKS   DS    CL(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN)' '                    39280034
         DC    0S((L'BLANKS-L'OPT-4095)/4096)  ASSERT L'BLANKS,GE,L'OPT 39290034
GAP      DS    F                       first gap found                  39300000
PRJ1     DS    CL8                   1                                  39310000
LIB1     DS    CL8                   2                                  39320000
LIB2     DS    CL8                   3                                  39330000
LIB3     DS    CL8                   4                                  39340000
LIB4     DS    CL8                   5                                  39350000
TYP1     DS    CL8                   6                                  39360000
PROF     DS    CL8                   7                                  39370000
MIX      DS    CL8                   8                                  39380000
FNAM     DS    CL8                   9                                  39390000
ZEDLOCK  DS    CL8                  10                                  39400004
ZEDLOCKP DS    CL8                  11                                  39410004
ZPCFMCN  DS    CL8                  12                                  39420004
ZVIEW    DS    CL8                  13                                  39430004
ZVIMAC   DS    CL8                  14                                  39440004
ZVPROF   DS    CL8                  15                                  39450004
ZEDITWS  DS    CL8                  16 view/edit 4.2                    39460031
ZVIEWWS  DS    CL8                  17 view/edit 4.2                    39470031
*                                                                       39480000
ZREFTYPE DS    CL1                   1 WORK-PLACE                       39490034
ZWRKVOL  DS    CL6                   2 WORK-PLACE                       39500034
ZWRKDSN  DS    CL56                  3 WORK-PLACE                       39510031
*                                                                       39520000
         DS    0D                                                       39530034
STRING1  DS    CL200,CL100                                              39540019
COMMAND  DS    CL200                                                    39550008
SHORTMSG DS    CL20                    ISREZ000                         39560030
LONGMSG  DS    CL512                   ISREZ000                         39570030
TRNTBL   EQU   RACFWORK,256,C'C'       TRT Table                        39580030
PLUSSIGN DS    C'+'                    last char of the command         39590034
ISPFVM   DS    X'35'                   CURRENT ISPF LEVEL               39600014
ALARM    DS    C'N'                    ALARM=Y/N for SETMSG rtne        39610030
QFLAG    DS    X                                                        39620010
ATTR1    DS    X                       CDATTR                           39630030
RACHECK_ACCESS DS FL1                  RACHECK                          39640031
ACCESS_READ EQU 4                      READ access                      39650031
ACCESS_UPDATE EQU 8                    UPDATE access                    39660031
ACCESS_CONTROL EQU 12                  CONTROL access                   39670031
URPNAME  DS    CL8                     name of the URP                  39680030
BRDSN    DS    CL44                    CNAEEDIT/CNAEBROW                39690030
BRMEM    DS    CL8                     CNAEEDIT/CNAEBROW                39700030
BRVOL    DS    C'VOLSER'               CNAEEDIT/CNAEBROW                39710030
CATVOL   DS    C'VOLSER'               volser from LOCATE macro         39720033
CATDEVT  DS    XL4                     device type from LOCATE macro    39730033
MACLIBDD DS    CL8'$$MACLIB'           ddname for MACLIB/PARMLIB        39740023
VIEWEDIT DS    CL4'VIEW'               VIEW/EDIT FOR MACLIB/PARMLIB     39750023
ZERRMSG  DS    C'ZERRMSG '             VARIABLE                         39760000
ZTEMPN   DS    C'ISR12345'             VARIABLE                         39770018
ZMLPS    DS    C'NO '                  VARIABLE                         39780044
ZSEQ     DS    C'12345'                VARIABLE                         39790044
EDBRNNNN DS    C'EDBRNNNN '            VARIABLE NAME                    39800000
EDBR0000 DS    C'NNNN'                 VARIABLE VALUE                   39810000
DATAID   DS    CL8                     LMINIT                           39820020
TOKEN    DS    F                       IKJURPS                          39830000
RETCODE  DS    F                       IKJURPS                          39840000
REASON   DS    F                       IKJURPS                          39850000
RETCODE2 DS    F                       IKJURPS                          39860000
REASON2  DS    F                       IKJURPS                          39870000
         CSVQUERY MF=(L,CSVQRYWK)                                       39880030
LOADLEN  DS    A,F                     load point address & length      39890031
DUMMY    DS    F                       dummy return area                39900031
STIMERL  STIMERM SET,MF=L                                               39910001
ATTACHL  ATTACH SF=L                                                    39920027
PTR_INSTBLK DS A(DYNAM_INSTBLK_HEADER)                                  39930030
DYNAM_INSTBLK_HEADER DS XL(L'INSTBLK_HEADER)                            39940015
PTR_EVALBLOCK DS A(DYNAM_EVALBLOCK)                                     39950030
DYNAM_EVALBLOCK DS XL(EVALBLOCK_LENGTH)                                 39960030
STACKL   STACK MF=L                                                     39970020
*                                                                       39980000
ZSCREEND DS    F'24'                   SCREEN DEPTH (ROWS)              39990031
ZSCREENW DS    F'80'                   SCREEN WIDTH (COLUMNS)           40000031
CURRLINE DC    F'0'                    CURRENT LINE                     40010031
*                                                                       40020000
RACF_DYN RACROUTE REQUEST=AUTH,RELEASE=1.9,MF=L                         40030029
RACF_LEN EQU   *-RACF_DYN                                               40040029
RACFWORK DS    XL512                   RACROUTE WORK AREA               40050031
RACFDSN  DS    CL44                    dsname for RACROUTE              40060031
DYNAML   EQU   *-DYNAM                                                  40070000
*                                                                       40080000
         STRING GENERATE                                                40090034
         DROP                                                           40100009
*********************************************************************** 40110000
*                                                                     * 40120000
*        Make some PDF modules resident in JPAQ                       * 40130034
*                                                                     * 40140000
*        The purpose of this routine is to speed up access            * 40150007
*        to some PDF functions (Edit, Browse) when ISPLLIB and        * 40160005
*        STEPLIB contain large numbers of libraries.                  * 40170005
*                                                                     * 40180000
*        LOAD and IDENTIFY macros are used to clone the LPDE,         * 40190005
*        create two CDEs and one XTLST for each module and chain      * 40200005
*        the CDEs to the JPAQ.  Note that the modules                 * 40210005
*        themselves are not duplicated, the only version that         * 40220005
*        exists is the one in PLPA; all we do here is to create       * 40230005
*        entries in the JPAQ that point to the PLPA modules.          * 40240005
*                                                                     * 40250000
*        Using this technique allows you to avoid time-consuming      * 40260005
*        directory searches whenever you invoke the most common       * 40270005
*        PDF functions.                                               * 40280005
*                                                                     * 40290000
*        If you're lucky enough that you have no ISPLLIB or           * 40300005
*        STEPLIB, this won't do you any good, but it won't do         * 40310005
*        you any harm either.                                         * 40320005
*                                                                     * 40330000
*        If you're so unlucky that ISPF/PDF is in the link-list       * 40340005
*        and not in the LPA on your system (shame on your system      * 40350005
*        programmers), then this will definitely help you.            * 40360005
*                                                                     * 40370000
*********************************************************************** 40380000
PRELOAD  CSECT                                                          40390005
PRELOAD  RMODE ANY                                                      40400005
         BAKR  R14,0                   save registers                   40410005
         LR    R12,R15                                                  40420034
         USING PRELOAD,R12                                              40430034
         BAL   R7,PRELOAD1          <- issue LOAD/IDENTIFY              40440005
         DC    C'ISRBRO  '             PDF 1                            40450005
         DC    C'ISREDIT '             PDF 2                            40460005
         DC    C'ISRUDA  '             PDF 3.1 & 3.2                    40470005
         DC    C'ISRUMC  '             PDF 3.3                          40480005
         DC    C'ISRUDL  '             PDF 3.4                          40490005
         DC    C'ISRPTC  '             PDF 6                            40500005
         DC    C'ISRSUBS '             PDF RMODE31 routines             40510005
         DC    C'ISRSUBX '             PDF RMODE24 routines             40520005
*                                                                       40530000
         DC    C'ISPEXEC '             ISPF application interface       40540005
         DC    C'ISPQRY  '             ISPF application interface       40550005
         DC    C'ISPSAM  '             ISPF Status Area Manager         40560031
         DC    C'ISPTUTOR'             ISPF Tutorial                    40570018
*                                                                       40580000
         DC    C'IKJURPS '             TSO/E Unauth Resource Processor  40590031
         DC    C'IEANTCR '             Name/Token Create                40600033
         DC    C'IEANTRT '             Name/Token Retrieve              40610033
*                                                                       40620000
         DC    C'IRXINIT '             REXX main pgm                    40630005
         DC    C'IRXEXEC '             REXX interpreter                 40640018
         DC    C'IRXSTAMP'             REXX stack manager               40650005
         DC    C'IRXAPPC '             REXX APPC interface              40660005
         DC    C'IRXECUSP'             REXX ?                           40670005
*****    DC    C'IRXFLOC '             REXX TOOLS local functions -DEL- 40680005
*                                                                       40690000
         DC    C'ALLOCATE'             TSO ALLOCATE command             40700005
         DC    C'EXEC    '             TSO EXEC command                 40710005
         DC    C'CALL    '             TSO CALL command                 40720005
         DC    C'DELETE  '             TSO DELETE command               40730005
         DC    C'IDCSATO '             IDCAMS interface for TSO         40740005
         DC    C'HELP    '             TSO HELP command                 40750005
         DC    C'SUBMIT  '             TSO SUBMIT command               40760005
         DC    C'RECEIVE '             TSO RECEIVE command              40770013
         DC    C'END     '             TSO END command                  40780031
*                                                                       40790000
*P390    DC    C'ISFINIT '             SDSF                       -DEL- 40800020
*P390    DC    C'ISFISP  '             SDSF                       -DEL- 40810020
*P390    DC    C'ISFMAIN '             SDSF                       -DEL- 40820020
*P390    DC    C'ISFS4DSP'             SDSF                       -DEL- 40830020
*P390    DC    C'ISFVTBL '             SDSF                       -DEL- 40840020
*P390    DC    C'ISFUSER '             SDSF                       -DEL- 40850020
*P390    DC    C'ISFIO   '             SDSF                       -DEL- 40860020
*P390    DC    C'ISFSTAE '             SDSF                       -DEL- 40870020
*                                                                       40880000
*        Preload system programs                                        40890000
*                                                                       40900000
         DC    C'IEFEB4UV'             DEVICE TYPE SCAN ROUTINE         40910005
         DC    C'IGGCSI00'             Catalog Search Interface         40920018
         DC    C'SYSMFEX '             NCSYNC (RACF)              -DEL- 40930015
*                                                                       40940000
*        Preload programs from FILE183.LOAD                             40950000
*                                                                       40960000
         DC    C'BR      '             BROWSE command                   40970005
         DC    C'COMPRESS'             COMPRESS command                 40980045
         DC    C'CUTPGM  '             CUT/PASTE EDIT macros            40990005
         DC    C'LCA     '             LCAT command                     41000052
         DC    C'RXSMS   '             RXSMS program                    41010034
         DC    C'REXXTRY '             REXXTRY command                  41020031
         DC    C'ROUTEPGM'             ROUTE EDIT macro                 41030005
         DC    C'SHOWJPAQ'             SHOWJPAQ command                 41040046
         DC    C'STEMDISP'             ALIAS of STEMEDIT (REXX)         41050015
         DC    C'STEMVIEW'             ALIAS of STEMEDIT (REXX)         41060045
         DC    C'STEMEDIT'             Name of STEMEDIT (REXX)          41070045
         DC    C'SYSDEBUG'             SYSDEBUG                         41080045
         DC    C'VV      '             VV command (VSAM VIEW)           41090045
         DC    C'XDUPPGM '             XDUP EDIT Macro                  41100046
*                                                                       41110000
         DC    X'FFFF'                 end of table                     41120005
*loop                                                                   41130005
PRELOAD1 L     R3,CVTPTR(0,0)          CVT address                      41140005
         USING CVTMAP,R3                                                41150005
         GETMAIN R,LV=80               work area for BLDL               41160007
         XC    0(16,R1),0(R1)          clear 16 bytes                   41170007
         LR    R4,R1                   pass the address                 41180007
         USING PDS2-4,R4                                                41190007
         MVI   1(R4),1                 BLDLIST                          41200005
         MVI   3(R4),80                BLDLIST                          41210007
         MVC   PDS2NAME,0(R7)          module name                      41220007
*@SNAP ((R7),8)                                                   -DEL- 41230021
*                                                                       41240000
*        JOB PACK AREA (JPAQ)                                           41250007
*                                                                       41260000
         L     R8,PSATOLD-PSA(0,0)     Current TCB                      41270005
         L     R8,TCBJSTCB-TCB(,R8)    job-step TCB                     41280005
         LA    R8,TCBJPQ-TCB(,R8)      START OF CDE CHAIN (JPAQ)        41290005
         LR    R9,R7                   EP NAME                          41300005
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE               41310005
         BALR  R14,R15              <- USES R0, R1, R8, R9, R11         41320005
         B     PRELOAD4            +0  FOUND, re-issue LOAD             41330005
*                                                                       41340000
*        Issue BLDL                                                     41350007
*                                                                       41360000
         BLDL  0,PDS2-4                search step/task/link lib        41370007
         LTR   R15,R15                 BLDL OK?                         41380007
         BNZ   PRELOAD5                no, search LPA                   41390007
*                                                                       41400000
*        Load the module into the JPAQ                                  41410031
*                                                                       41420000
         CLI   PDS2LIBF,PDS2LJOB       found in tasklib/steplib?        41430007
         BL    PRELOAD5                no, look in LPA and LNKLST       41440007
         LOAD  EPLOC=PDS2NAME          load from tasklib/steplib        41450031
         B     PRELOAD9                next module                      41460007
*                                                                       41470000
*        Load the module in to the JPAQ                                 41480007
*                                                                       41490000
PRELOAD4 LOAD  EPLOC=PDS2NAME          bump use count                   41500031
         B     PRELOAD9                next module                      41510007
*                                                                       41520000
*        ACTIVE LPA Q                                                   41530005
*                                                                       41540000
PRELOAD5 L     R8,CVTQLPAQ             START OF CDE CHAIN (ALPAQ)       41550007
         LR    R9,R7                   EP NAME                          41560005
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE               41570005
         BALR  R14,R15              <- USES R0, R1, R8, R9, R11         41580005
         B     PRELOAD9            +0  FOUND, IGNORE                    41590005
*                                                                       41600000
*        PLPA DIRECTORY                                                 41610005
*                                                                       41620000
*@SNAP ((R7),8)                                                   -DEL- 41630021
         LM    R0,R1,PDS2NAME          EP NAME                          41640007
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE               41650005
         BALR  R14,R15              <- USES R6-R9                       41660005
         B     PRELOAD7            +0  FOUND, JUMP                      41670007
*@SNAP ((R7),8)                                                   -DEL- 41680021
*                                                                       41690000
*        LOAD from link-list                                            41700007
*                                                                       41710000
         CLI   PDS2LIBF,PDS2LLNK       found in link-list?              41720007
         BNE   PRELOAD9                no, give up                      41730007
         TM    PDS2ATR1,PDS2REUS       REUS bit on?                     41740031
         BNO   PRELOAD9                no, give up                      41750031
         L     R2,CVTLINK              DCB for SYS1.LINKLIB             41760007
         LOAD  EPLOC=PDS2NAME,DCB=(R2) load from link-list              41770007
         B     PRELOAD9                next module                      41780007
*                                                                       41790000
*        create JPAQ entries for PLPA modules                           41800005
*                                                                       41810000
PRELOAD7 EQU   *                                                        41820018
         USING LPDE,R8                 set by LPDSR                     41830018
         L     R2,LPDENTP              entry-point address              41840018
         TM    LPDEATTR,LPDEMIN        ALIAS?                           41850018
         BO    PRELOAD8                yes, issue IDENTIFY              41860018
         DROP  R8                                                       41870018
         L     R2,CVTLINK              LINKLIST DCB                     41880018
*@SNAP ((R7),8)                                                   -DEL- 41890021
         LOAD  EPLOC=(R7),             load ISRBRO                     X41900005
               DCB=(R2)                CVTLINK                          41910005
         LR    R2,R0                   save entry point addr            41920005
         LA    R4,4(,R4)               point at member name             41930005
         MVI   3(R4),C'_'              convert ISRBRO to ISR_BRO        41940005
         MVC   4(4,R4),3(R7)           convert ISRBRO to ISR_BRO        41950005
         IDENTIFY EPLOC=(R4),ENTRY=(R2) define ISR_BRO                  41960005
         LTR   R15,R15                                                  41970005
         BNZ   PRELOAD9                                                 41980005
         LOAD  EPLOC=(R4)              load ISR_BRO                     41990005
         DELETE EPLOC=(R7)             delete ISRBRO                    42000005
PRELOAD8 EQU   *                                                        42010018
         IDENTIFY EPLOC=(R7),ENTRY=(R2) define ISRBRO onto ISR_BRO      42020005
*                                                                       42030000
PRELOAD9 LA    R7,8(,R7)               next entry                       42040005
         CLI   0(R7),X'FF'             end of table reached?            42050005
         BNE   PRELOAD1                not yet, process next entry      42060005
*endloop                                                                42070005
         FREEMAIN R,LV=80,A=(R4)       FREE BLDL WORK AREA              42080007
         PR                                                             42090005
*---------------------------------------------------------------------* 42100000
*        DSECTs                                                       * 42110000
*---------------------------------------------------------------------* 42120000
         PRINT NOGEN                                                    42130000
         YREGS                                                          42140000
         IHAECVT                       ECVT                             42150030
         AIF   (D'ECVTTCP).ECVT2                                        42160030
ECVTTCP  EQU   ECVT+X'B0',4,C'A'       TCP/IP Server Anchor Block       42170030
.ECVT2   ANOP                                                           42180030
PSA      DSECT                                                          42190031
PSATOLD  EQU   *+X'021C'               addr of current TCB              42200031
PSAAOLD  EQU   *+X'0224'               addr of current ASCB             42210031
         IHALPDE                       LPA Directory Entry              42220031
         IEESMCA                       SMF                              42230031
RCVT     ICHPRCVT                      RACF CVT                         42240034
*                                                                       42250000
         IKJTCB                        TCB                              42260000
         IKJRB                         RB                               42270031
         IHAASCB                       ASCB                             42280031
         IHAASXB                       ASXB                             42290031
         IKJEFLWA                      LWA                              42300031
         IHAPDS PDSBLDL=YES            directory entry                  42310007
         IHACDE                        Contents Directory Entry         42320021
         IKJECT                        Environment Control Table        42330028
         IHATQE                        Timer Queue Element              42340031
*                                                                       42350000
         IKJLSD                        List Source Descriptor           42360022
LSD_LENGTH EQU *-LSD                                                    42370022
*                                                                       42380000
         IEZJSCB                       Job Step Control Block           42390013
         IEFASCTB                      Step Control Block               42400013
         IEFSCTX DSECT=YES             Step Control Block Extension     42410013
         AIF   (D'SCTXSTL).SCTX2                                        42420013
SCTXSTL  EQU   SCTX+X'7C',4,C'F'       step time limit (HBB4410)        42430013
.SCTX2   ANOP                                                           42440013
         ICHSAFP DSECT=YES             RACROUTE                         42450029
         IRXINSTB                      IN-STORAGE BLOCK                 42460015
         IRXEVALB                      EVALUATION BLOCK                 42470030
         ORG   EVALBLOCK_EVDATA+256    256 bytes of data                42480030
EVALBLOCK_LENGTH EQU *-EVALBLOCK                                        42490030
*                                                                       42500000
TLD      DSECT                         ISPF LOGICAL DISPLAY TABLE       42510023
TLDTBLID DS    C'TLD'                  TLD TABLE ID                     42520023
TLDID    DS    C'1'                    TLD ID ('0','1',...)             42530023
         ORG   TLD+X'034'                                               42540030
TLDTSCP  DS    V(TSC)                  Common Subroutine Table          42550030
TLDTSIP  DS    V(TSI)                  System Interface Table           42560030
TLDTSVP  DS    V(TSV)                  System Variables Table           42570030
         ORG   TLD+X'060'                                               42580023
TLDTLSP  DS    V(TLS)                  Logical Screen Table             42590030
         ORG   TLD+X'0A4'                                               42600023
TLDCSR   DS    F                       Cursor Offset                    42610030
         ORG   TLD+X'0C0'                                               42620023
TLDCLSWD DS    F                       Current Line Width               42630030
         ORG   TLD+X'0D0'                                               42640031
TLDMPSWD DS    F                       Max Line Width                   42650031
         ORG   TLD+X'1F4'                                               42660028
TLDECTP  DS    V(ECT)                  Environment Control Table        42670028
         ORG   TLD+X'210'                                               42680028
TLDIOWA  DS    V(IORLS)                I/O routine work area            42690028
*                                                                       42700000
TSI      DSECT                         System Interface Table           42710030
TSITBLID DS    C'ISPTSI  '                                              42720030
TSIRMZ   DS    C'3.5.0000'             V.R.M                            42730030
         ORG   TSI+X'03C'                                               42740028
TSITPDP  DS    A(TPD)                  Physical Display Table           42750030
         ORG   TSI+X'0B8'                                               42760030
TSICBUFP DS    V(CBUF)                 CPPLCBUF                         42770030
TSIUPTP  DS    V(UPT)                  CPPLUPT                          42780030
TSIPSCBP DS    V(PSCB)                 CPPLPSCB                         42790030
TSIECTP  DS    V(ECT)                  CPPLECT                          42800030
         ORG   TSI+X'1BC'                                               42810030
TSIUCTAB DS    C'USERCMDS'             User command table               42820030
         DS    F'8'                    ?                                42830030
         DS    C'DT357   '             ?                                42840030
TSILCTAB DS    C'SITECMDS'             Local command table              42850030
*                                                                       42860000
TSV      DSECT                         System Variables Table           42870030
         ORG   TSV+X'018'                                               42880030
         DS    C'='                    Jump character                   42890030
         DS    C':'                    Line Command char                42900030
         DS    C'>'                    Command Table bypass             42910030
TSVZDEL  DS    C';'                    Command Delimiter                42920030
*                                                                       42930000
TPD      DSECT                         Physical Display Table           42940030
TPDTBLID DS    C'TPD     '                                              42950028
         ORG   TPD+X'080'                                               42960028
TPDDTLDP DS    A(TLD)                  DUMMY TLD (TLD0)                 42970030
         END   FASTPATH                                                 42980031
         TITLE 'JUL2DAYS - Julian-to-days conversion routine'           42990018
*********************************************************************** 43000018
*                                                                     * 43010000
*        Convert a packed julian date obtained from the TIME macro    * 43020018
*        to an integer that represents the number of days since       * 43030018
*        1900-12-31.                                                  * 43040018
*                                                                     * 43050000
*        Input: R1=YYYYDDDF    julian date from TIME macro            * 43060018
*                                                                     * 43070000
*                 The first byte of R1 is 00 for years 1900-1999      * 43080018
*                 and 01 for years 2000-2099.                         * 43090018
*                                                                     * 43100000
*        Output:  R15=day of the week (1=monday, 7=sunday)            * 43110018
*                                                                     * 43120000
*                 R0=number of days since 1900-12-31                  * 43130018
*                                                                     * 43140000
*                 R1=pointer to a 9-byte character string that        * 43150018
*                            represents the day of the week.          * 43160018
*                                                                     * 43170000
*********************************************************************** 43180018
JUL2DAYS CSECT                                                          43190018
JUL2DAYS RMODE ANY                                                      43200018
         SAVE  (14,1),,*                                                43210018
         MVO   32(8,R13),24(2,R13)     00000YYY?                        43220018
         OI    32+7(R13),X'0F'         00000YYYF                        43230018
         CVB   R14,32(,R13)            R14=YEAR                         43240018
         LA    R0,365                  number of days in a year         43250018
         LR    R1,R14                  R1=years since 1900              43260018
         MR    R0,R0                   years*365                        43270018
         BCTR  R14,0                   R14=YEAR-1                       43280018
         SRL   R14,2                   number of leap years since 1901  43290018
         AR    R14,R1                  NUMBER OF DAYS IN PREVIOUS YEARS 43300018
         XC    20(6,R13),20(R13)       zero YYYY in 00000000YYYYDDDF    43310018
         CVB   R0,20(,R13)             NUMBER OF DAYS THIS YEAR         43320018
         AR    R0,R14                  number of days since 1900-12-31  43330018
*                                                                       43340000
*        DETERMINE DAY OF THE WEEK                                      43350018
*                                                                       43360000
         SLR   R14,R14                 PREPARE DIVISION                 43370018
         LR    R15,R0                  DAYS SINCE 1900-12-31            43380018
         BCTR  R15,0                   DAYS-1                           43390018
         LA    R1,7                    NUMBER OF DAYS IN WEEK           43400018
         DR    R14,R1                  DIVIDE BY NUM OF DAYS IN WEEK    43410018
         LA    R15,1(,R14)             Day of the week (1=monday)       43420018
         BALR  R1,0                    local base                       43430018
         USING *,R1                                                     43440018
         MH    R14,JUL2D_H9            MULT BY LENGTH OF A TABLE ENTRY  43450018
         LA    R1,JUL2D_TD(R14)        POINT TO DAY-OF-THE-WEEK         43460018
         RETURN (14)                   goback                           43470018
*                                                                       43480000
JUL2D_H9 DC    H'9'                    length of a table entry          43490018
JUL2D_TD DC    C'Monday   Tuesday  WednesdayThursday Friday   Saturday X43500018
               Sunday    '                                              43510018
         YREGS                                                          43520031
**********************************************************************  43530000
         MACRO                                                          43540000
         ISPCMDS &VERB=,&TRUNC=0,&ACT=,&DESC=                           43550045
         DC    CL8'&VERB'              verb                             43560000
         DC    CL1'&TRUNC'             truncation                       43570045
&LQ      SETC  'L'''                                                    43580000
&LABEL   SETC  'ISP&SYSNDX'                                             43590000
         DC    AL1(&LQ&LABEL.A)        K'&ACT-2                         43600000
&LABEL.A DC    C&ACT                   DESCRIPTION                      43610000
         DC    AL1(&LQ&LABEL.D)        K'&ACT-2                         43620000
&LABEL.D DC    C&DESC                  DESCRIPTION                      43630000
         MEND                                                           43640000
*********************************************************************** 43650000
*                                                                     * 43660000
*        Command Table Entries                                        * 43670000
*                                                                     * 43680000
*********************************************************************** 43690000
ISPCMDS  CSECT                                                          43700000
ISPCMDS  RMODE ANY                                                      43710000
         ISPCMDS VERB=BOTtom,                                          X43720018
               TRUNC=3,                                                X43730018
               ACT='ALIAS DOWN MAX',                                   X43740018
               DESC='Abbreviated BOTTOM command'                        43750018
*                                                                       43760000
         ISPCMDS VERB=BR,                                              X43770000
               ACT='SELECT PGM(FASTPATH) PARM(BROWSE,&&ZPARM)',        X43780016
               DESC='Fast Path Command: BROWSE'                         43790000
*                                                                       43800000
         ISPCMDS VERB=CALendar,                                        X43810030
               TRUNC=3,                                                X43820030
               ACT='SELECT PGM(FASTPATH) PARM(CALENDAR)',              X43830030
               DESC='Display Calendar'                                  43840030
*                                                                       43850000
         ISPCMDS VERB=CNTL,                                            X43860000
               ACT='SELECT PGM(FASTPATH) PARM(CNTL,&&ZPARM,CNTL)',     X43870038
               DESC='Fast Path Command: CNTL'                           43880018
*                                                                       43890000
         ISPCMDS VERB=CONNECT,                                         X43900030
               TRUNC=4,                                                X43910030
               ACT='SELECT PGM(FASTPATH) PARM(WSCON)',                 X43920030
               DESC='Establish connection to work-station'              43930030
*                                                                       43940000
         ISPCMDS VERB=CRASH,                                           X43950022
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,&&ZPARM)',         X43960022
               DESC='Quick exit from ISPF'                              43970020
*                                                                       43980049
         ISPCMDS VERB=DSINFO,                                          X43990049
               TRUNC=3,                                                X44000049
               ACT='SELECT PGM(FASTPATH) PARM(DSINFO,&&ZPARM)',        X44010049
               DESC='Dataset Info'                                      44020049
*                                                                       44030000
         ISPCMDS VERB=D2X,                                             X44040030
               ACT='SELECT PGM(FASTPATH) PARM(REXXT,SAY D2X(&&ZPARM))',X44050030
               DESC='Convert decimal to hex'                            44060030
*                                                                       44070000
         ISPCMDS VERB=ED,                                              X44080000
               ACT='SELECT PGM(FASTPATH) PARM(EDIT,&&ZPARM)',          X44090016
               DESC='Fast Path Command: EDIT'                           44100000
*                                                                       44110000
         ISPCMDS VERB=FM,                                              X44120046
               ACT='SELECT CMD(%NEWAPPL FM) NEWAPPL(FMN)',             X44130046
               DESC='IBM File Manager'                                  44140046
*                                                                       44150000
         ISPCMDS VERB=FSHELP,                                          X44160046
               TRUNC=3,                                                X44170046
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,HELP &&ZPARM)',    X44180049
               DESC='Full-screen TSO HELP'                              44190046
*                                                                       44200000
         ISPCMDS VERB=FSPASTE,                                         X44210031
               ACT='SELECT PGM(FASTPATH) PARM(FSPASTE)',               X44220031
               DESC='Full-screen PASTE'                                 44230031
*                                                                       44240047
         ISPCMDS VERB=FSPRINT,                                         X44250047
               TRUNC=4,                                                X44260047
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,PRINT IDS(''%DSNAMEX44270049
               '') DUMP',                                              X44280047
               DESC='Full-screen PRINT'                                 44290047
*                                                                       44300000
         ISPCMDS VERB=FSTso,                                           X44310018
               TRUNC=3,                                                X44320018
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,&&ZPARM)',         X44330049
               DESC='Full-Screen TSO Command'                           44340018
*                                                                       44350000
&HANDBOOK SETC '&&&&ZUSER..HANDBOOK'                                    44360018
         ISPCMDS VERB=HANDBook,                                        X44370018
               TRUNC=5,                                                X44380016
               ACT='SELECT PGM(FASTPATH) PARM(B,&HANDBOOK.(&&ZPARM))', X44390017
               DESC='On-line Macro listing'                             44400016
*                                                                       44410000
         ISPCMDS VERB=ICS,                                             X44420014
               ACT='SELECT PGM(FASTPATH) PARM(ICS,&&ZPARM)',           X44430016
               DESC='ISPF Command Shell'                                44440017
*                                                                       44450000
         ISPCMDS VERB=IND$FILE,                                        X44460011
               ACT='SELECT CMD(IND$FILE &&ZPARM) MODE(FSCR)',          X44470011
               DESC='PC/3270 File Transfer'                             44480017
*                                                                       44490000
         ISPCMDS VERB=LCA,                                             X44500052
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,LISTCAT ENT(''%DSNAX44510049
               ME'') ALL',                                             X44520031
               DESC='IDCAMS LISTCAT'                                    44530031
*                                                                       44540043
&CMD     SETC  'ISPEXEC SELECT CMD(LINKMAP ''''%DSNAME'''')'            44550043
         ISPCMDS VERB=LINKMap,                                         X44560043
               TRUNC=5,                                                X44570043
               ACT='SELECT PGM(FASTPATH) PARM(TSOCMD,&CMD)',           X44580043
               DESC='LINKMAP Command'                                   44590043
         ISPCMDS VERB=LM,                                              X44600043
               ACT='SELECT PGM(FASTPATH) PARM(TSOCMD,&CMD)',           X44610043
               DESC='LINKMAP Command'                                   44620043
*--      ISPCMDS VERB=LMM,                                        -DEL-X44630046
               ACT='SELECT CMD(LINKMAP &&ZPARM) MODE(FSCR)',      -DEL-X44640046
               DESC='LINKMAP Command'                             -DEL- 44650046
*                                                                       44660000
         ISPCMDS VERB=LISTBc,                                          X44670018
               TRUNC=5,                                                X44680013
               ACT='SELECT CMD(LISTBC &&ZPARM) MODE(FSCR)',            X44690013
               DESC='List Broadcast Messages'                           44700013
*                                                                       44710000
         ISPCMDS VERB=LOAD,                                            X44720030
               ACT='SELECT PGM(FASTPATH) PARM(LOAD,&&ZPARM)',          X44730030
               DESC='Load a module into memory'                         44740030
*                                                                       44750000
         ISPCMDS VERB=LOGOFf,                                          X44760020
               TRUNC=5,                                                X44770020
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,LOGOFF)',          X44780022
               DESC='Quick LOGOFF from ISPF'                            44790020
*                                                                       44800000
         ISPCMDS VERB=LOGON,                                           X44810020
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,LOGON &&ZPARM)',   X44820022
               DESC='Quick re-LOGON from within ISPF'                   44830020
*                                                                       44840000
         ISPCMDS VERB=MAClib,                                          X44850018
               TRUNC=3,                                                X44860014
               ACT='SELECT PGM(FASTPATH) PARM(MACLIB,&&ZPARM,STD)',    X44870033
               DESC='Fast Path Command: MACLIB'                         44880014
*                                                                       44890000
         ISPCMDS VERB=MAIL,                                            X44900014
               ACT='SELECT CMD(%NEWAPPL MAIL)',                        X44910014
               DESC='TSOMAIL Application'                               44920014
*                                                                       44930000
         ISPCMDS VERB=OPENCmds,                                        X44940031
               TRUNC=5,                                                X44950031
               ACT='SELECT PGM(FASTPATH) PARM(OPENC,&&ZPARM)',         X44960031
               DESC='Fast Path Command: OPEN command table'             44970031
*                                                                       44980000
         ISPCMDS VERB=NETStat,                                         X44990030
               TRUNC=4,                                                X45000030
               ACT='SELECT PGM(FASTPATH) PARM(NETSTAT,&&ZPARM)',       X45010030
               DESC='Fast Path Command: NETSTAT'                        45020030
*                                                                       45030000
         ISPCMDS VERB=PARMLib,                                         X45040018
               TRUNC=5,                                                X45050018
               ACT='SELECT PGM(FASTPATH) PARM(PARMLIB,&&ZPARM,STD,E)', X45060033
               DESC='Fast Path Command: Edit Parmlib Member'            45070023
*                                                                       45080044
         ISPCMDS VERB=PROCLib,                                         X45090044
               TRUNC=5,                                                X45100044
               ACT='SELECT PGM(FASTPATH) PARM(PROCLIB,&&ZPARM,STD,E)', X45110044
               DESC='Fast Path Command: Edit Parmlib Member'            45120044
*                                                                       45130000
         ISPCMDS VERB=RECEive,                                         X45140018
               TRUNC=4,                                                X45150009
               ACT='SELECT CMD(RECEIVE &&ZPARM) MODE(FSCR)',           X45160011
               DESC='TSO Interactive Transmit/Receive Facility'         45170009
*                                                                       45180000
         ISPCMDS VERB=REXXTry,                                         X45190030
               TRUNC=5,                                                X45200030
               ACT='SELECT PGM(FASTPATH) PARM(REXXTRY,&&ZPARM)',       X45210030
               DESC='Execute REXX statement'                            45220030
*                                                                       45230000
         ISPCMDS VERB=RMFmon,                                          X45240018
               TRUNC=3,                                                X45250018
               ACT='SELECT CMD(RMFMON &&ZPARM) MODE(FSCR)',            X45260018
               DESC='RMFMON Command'                                    45270018
*                                                                       45280000
         ISPCMDS VERB=SDsf,                                            X45290018
               TRUNC=2,                                                X45300000
               ACT='SELECT PGM(FASTPATH) PARM(SDSF,&&ZPARM)',          X45310016
               DESC='Fast Path Command: SDSF'                           45320000
*                                                                       45330046
         ISPCMDS VERB=SHOWDasd,                                        X45340046
               TRUNC=5,                                                X45350046
               ACT='SELECT CMD(%SHOWDASD &&ZPARM) NEWAPPL(ISR)',       X45360046
               DESC='SHOWDASD Command to display on-line DASD'          45370046
*                                                                       45380046
         ISPCMDS VERB=SHOWJpaq,                                        X45390046
               TRUNC=5,                                                X45400046
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,SHOWJPAQ)',        X45410049
               DESC='SHOWJPAQ Command to display contents of JPAQ'      45420046
*                                                                       45430000
         ISPCMDS VERB=SHOWMvs,                                         X45440018
               TRUNC=5,                                                X45450013
               ACT='SELECT CMD(SHOWMVS &&ZPARM) MODE(FSCR)',           X45460017
               DESC='SHOWMVS Utility'                                   45470000
*                                                                       45480045
         ISPCMDS VERB=SHOWZos,                                         X45490045
               TRUNC=5,                                                X45500045
               ACT='SELECT CMD(SHOWZOS &&ZPARM) MODE(FSCR)',           X45510063
               DESC='SHOWzOS Utility'                                   45520045
*                                                                       45530000
         ISPCMDS VERB=SYSID,                                           X45540019
               ACT='SELECT PGM(FASTPATH) PARM(SYSID,&&ZPARM)',         X45550019
               DESC='Display System ID on every panel'                  45560019
*                                                                       45570000
         ISPCMDS VERB=TIME,                                            X45580018
               ACT='SELECT PGM(FASTPATH) PARM(TIME)',                  X45590018
               DESC='Fast Path Command: TIME'                           45600018
*                                                                       45610000
         ISPCMDS VERB=UNLOAD,                                          X45620030
               ACT='SELECT PGM(FASTPATH) PARM(UNLOAD,&&ZPARM)',        X45630030
               DESC='Unload a module from memory'                       45640030
*                                                                       45650000
         ISPCMDS VERB=UTIL,                                            X45660055
               TRUNC=4,                                                X45670055
               ACT='SELECT PGM(FASTPATH) PARM(UTIL,&&ZPARM)',          X45680016
               DESC='Fast Path Command: PDF Utilities'                  45690000
*                                                                       45700000
         ISPCMDS VERB=VERAse,                                          X45710030
               TRUNC=4,                                                X45720030
               ACT='SELECT PGM(FASTPATH) PARM(VERASE,&&ZPARM)',        X45730030
               DESC='Remove Variables from Shared and/or Profile Pool'  45740030
*                                                                       45750000
         ISPCMDS VERB=VI,                                              X45760004
               ACT='SELECT PGM(FASTPATH) PARM(VIEW,&&ZPARM)',          X45770016
               DESC='Fast Path Command: VIEW'                           45780004
*                                                                       45790000
         ISPCMDS VERB=WHOami,                                          X45800018
               TRUNC=3,                                                X45810018
               ACT='SELECT CMD(%WHOAMI)',                              X45820018
               DESC='Display System ID and User ID in large letters'    45830019
*                                                                       45840000
         ISPCMDS VERB=WP,                                              X45850008
               TRUNC=2,                                                X45860008
               ACT='SELECT PGM(FASTPATH) PARM(WP,&&ZPARM)',            X45870016
               DESC='Fast Path Command: Work-Place'                     45880008
*                                                                       45890000
         ISPCMDS VERB=X2D,                                             X45900030
               ACT='SELECT PGM(FASTPATH) PARM(REXXT,SAY X2D(&&ZPARM))',X45910030
               DESC='Convert hex to decimal'                            45920030
*                                                                       45930000
         ISPCMDS VERB=ZDEL,                                            X45940030
               ACT='SELECT PGM(FASTPATH) PARM(ZDEL,&&ZPARM)',          X45950030
               DESC='Display/Set Command Delimiter'                     45960030
*                                                                       45970000
         DC    X'00'                   end of table                     45980000
         END                                                            45990000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  46050000
//         DD DSN=SYS1.MODGEN,DISP=SHR             LWA/ASXB             46060000
//         DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE183  STRING MACRO         46070061
//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,2)                               46080051
//SYSPRINT DD SYSOUT=*                                                  46090000
//SYSLIN   DD UNIT=SYSALLDA,SPACE=(TRK,2),DISP=(,PASS),BLKSIZE=3200     46100051
//*-------------------------------------------------------------------  46110000
//LKED    EXEC PGM=IEWL,PARM=(LIST,MAP,RENT,REFR)                       46120041
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)                        46130038
//         DD *                                                         46140049
 IDENTIFY FASTPATH('http://gsf-soft.com/Freeware/')                     46150049
//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,1)                               46160051
//SYSPRINT DD SYSOUT=*                                                  46170046
//SYSLMOD  DD DSN=SYS1.W$$.LINKLIB(FASTPATH),DISP=SHR                   46200056
//                                                                      46210044
//                                                                      46220044
*                                                                       46230044
*        NM Tech Support Command additions (Al Ferguson)                46240044
*                                                                       46250044
         ISPCMDS VERB=CMDList,                                         X46260044
               TRUNC=4,                                                X46270044
               ACT='SELECT CMD(%CMDLIST &&ZPARM)',                     X46280044
               DESC='Display ISPF PROFILE Commands'                     46290044
*                                                                       46300044
         ISPCMDS VERB=CMDMaint,                                        X46310044
               TRUNC=4,                                                X46320044
               ACT='SELECT CMD(%CMDMAINT &&ZPARM)',                    X46330044
               DESC='Maintain ISPF PROFILE Commands'                    46340044
*                                                                       46350044
*        ISPCMDS VERB=EJes,                                             46360044
*              TRUNC=2,                                                 46370044
*              ACT='SELECT CMD(%@EJES,&&ZPARM) NEWAPPL(EJEP)',          46380044
*              DESC='(E)JES SYSOUT Viewing'                             46390044
*                                                                       46400044
         ISPCMDS VERB=FLASHer,                                         X46410044
               TRUNC=5,                                                X46420044
               ACT='SELECT CMD(%FLASHER,&&ZPARM) NEWAPPL(TFLP)',       X46430044
               DESC='OMS-Flash SYSOUT Viewing'                          46440044
*                                                                       46450044
         ISPCMDS VERB=IPCS,                                            X46460044
               ACT='SELECT CMD(%@IPCS &&ZPARM) NOCHECK LANG(CREX)',    X46470044
               DESC='IBM IPCS Problem Analysis tool'                    46480044
*                                                                       46490044
         ISPCMDS VERB=ISPF,                                            X46500044
               ACT='SELECT PGM(ISPSTRT) PARM(&&ZPARM) NEWAPPL(ISR)',   X46510044
               DESC='Stack ISPF'                                        46520044
*                                                                       46530044
         ISPCMDS VERB=ISMF,                                            X46540044
               ACT='SELECT CMD(%ISMF &&ZPARM) NOCHECK LANG(CREX)',     X46550044
               DESC='IBM Storage Management Facility tool'              46560044
*                                                                       46570044
         ISPCMDS VERB=JCLlib,                                          X46580044
               TRUNC=3,                                                X46590044
               ACT='SELECT PGM(FASTPATH) PARM(JCLLIB,&&ZPARM,STD)',    X46600044
               DESC='Fast Path Command: JCLLIB'                         46610044
*                                                                       46620044
         ISPCMDS VERB=MXI,                                             X46630044
               ACT='SELECT CMD(%CBTSTUFF MXI &&ZPARM)',                X46640044
               DESC='MVS Extended Information'                          46650044
*                                                                       46660044
         ISPCMDS VERB=MXIDS,                                           X46670044
               TRUNC=4,                                                X46680044
               ACT='SELECT CMD(%CBTSTUFF MXI DS &&ZPARM)',             X46690044
               DESC='MVS Extended Information, Dataset Utility'         46700044
*                                                                       46710044
         ISPCMDS VERB=MUcmd,                                           X46720044
               TRUNC=2,                                                X46730044
               ACT='SELECT CMD(%MU &&ZPARM) NEWAPPL(ISP)',             X46740044
               DESC='Invoke Member Utility REXX against a PDS'          46750044
*                                                                       46760044
         ISPCMDS VERB=PDS,                                             X46770044
               ACT='SELECT PGM(PDS) PARM(PDS &&ZPARM ISPMODE)',        X46780044
               DESC='Call CBT PDS Command'                              46790044
*                                                                       46800044
         ISPCMDS VERB=PROClib,                                         X46810044
               TRUNC=4,                                                X46820044
               ACT='SELECT PGM(FASTPATH) PARM(PROCLIB,&&ZPARM,STD,E)', X46830044
               DESC='Fast Path Command: View PROCLIB Member'            46840044
*                                                                       46850044
         ISPCMDS VERB=RLISTa,                                          X46860044
               TRUNC=5,                                                X46870044
               ACT='SELECT CMD(%RLISTA &&ZPARM VIEW(TRUE))',           X46880044
               DESC='View Dataset Allocations'                          46890044
*                                                                       46900044
         ISPCMDS VERB=RMFiii,                                          X46910044
               TRUNC=3,                                                X46920044
               ACT='SELECT CMD(RMFSTART &&ZPARM) MODE(FSCR)',          X46930044
               DESC='RMF III Start Command'                             46940044
*                                                                       46950044
         ISPCMDS VERB=SMPe,                                            X46960044
               TRUNC=3,                                                X46970044
               ACT='SELECT CMD(%SMPE VERSION(CURRENT) &&ZPARM)',       X46980044
               DESC='Current version of SMP/E'                          46990044
*                                                                       47000044
         ISPCMDS VERB=USS,                                             X47010044
               ACT='SELECT CMD(%USS &&ZPARM) NEWAPPL(BPX)',            X47020044
               DESC='Display USS@PRIM Panel and allocate USS DSNs'      47030044
*                                                                       47040044
         ISPCMDS VERB=GRoup,                                           X47050044
               TRUNC=2,                                                X47060044
               ACT='SELECT PANEL(GRP@PRIM) OPT(&&ZPARM)',              X47070044
               DESC='Display GRP@PRIM Panel'                            47080044
*                                                                       47090044
         ISPCMDS VERB=USer,                                            X47100044
               TRUNC=2,                                                X47110044
               ACT='SELECT PANEL(USR@PRIM) OPT(&&ZPARM)',              X47120044
               DESC='Display USR@PRIM Panel'                            47130044
*                                                                       47140044
         ISPCMDS VERB=XL,                                              X47150044
               ACT='SELECT SUSPEND PGM(XL) MODE(FSCR) PARM(&&ZPARM)',  X47160044
               DESC='Do a DSN List using template, ala 3.4'             47170044
*                                                                       47180044
         ISPCMDS VERB=OMVS,                                            X47190044
               ACT='SELECT CMD(OMVS)',                                 X47200044
               DESC='Startup OMVS Shell'                                47210044
*                                                                       47220044
         ISPCMDS VERB=IShell,                                          X47230044
               TRUNC=2,                                                X47240044
               ACT='SELECT CMD(%$ISHELL)',                             X47250044
               DESC='Startup ISPF IShell OMVS Interface'                47260044
*                                                                       47270044
         ISPCMDS VERB=ISPFTEST,                                        X47280044
               ACT='SELECT PGM(ISPYXDR) PARM(&&ZAPPLID)',              X47290044
               DESC='Startup ISPF Dialog Test Interface'                47300044
