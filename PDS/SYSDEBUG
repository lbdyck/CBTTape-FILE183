//GILBERTD JOB (ACCT#),SYSDEBUG,                                        00010000
//*RESTART=HLASM2,                                                      00020052
// NOTIFY=&SYSUID,                                                      00030000
// LINES=25,                                                            00040000
// CLASS=A,MSGCLASS=H,COND=(0,NE),REGION=6M                             00050000
//HLASM EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)         00060052
*PROCESS NOBATCH,USING(WARN(8))                                         00070045
*********************************************************************** 00080000
*                                                                     * 00090057
*            COPYRIGHT (C) 1980-2009 GILBERT SAINT-FLOUR              * 00100057
*                       ALL RIGHTS RESERVED                           * 00110057
*                                                                     * 00120000
* MODULE NAME = SYSDEBUG                                              * 00130053
*                                                                     * 00140053
* DESCRIPTIVE NAME = GSF-ENV Debugging Routine                        * 00150053
*                                                                     * 00160053
* FUNCTION = This generalized ESTAE routine simplifies abend          * 00170053
*       resolution by formatting important MVS control blocks         * 00180053
*       in an easy-to-read fashion.                                   * 00190053
*                                                                     * 00200053
* STATUS = R257                                                       * 00210057
*                                                                     * 00220053
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  * 00230053
*          http://gsf-soft.com/Freeware/SYSDEBUG.shtml                * 00240057
*                                                                     * 00260053
* NOTES = SEE BELOW                                                   * 00270053
*                                                                     * 00280053
*    DEPENDENCIES = OS/390 R4, z/OS                                   * 00290057
*                   DFSMS/MVS                                         * 00300053
*                   STRING macro R510                                 * 00310053
*                                                                     * 00320053
*    AUTHORIZATION = NONE                                             * 00330053
*                                                                     * 00340053
*    RESTRICTIONS = NONE                                              * 00350053
*                                                                     * 00360053
* MODULE TYPE = PROCEDURE, (Sub-Routine)                              * 00370053
*                                                                     * 00380053
*    PROCESSOR = IBM Assembler H Version 2                            * 00390053
*                IBM High-Level Assembler/MVS                         * 00400053
*                                                                     * 00410053
*    MODULE SIZE = 23K                                                * 00420053
*                                                                     * 00430053
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   * 00440053
*                 PROBLEM STATE, KEY 8                                * 00450053
*                                                                     * 00460000
*    OPERATION = See Below                                            * 00470053
*                                                                     * 00480000
*       This is not a system-wide debugging tool like ABEND-AID.      * 00490000
*       To use it, a program must invoke it once with AMODE=31        * 00500053
*       as follows:                                                   * 00510053
*                                                                     * 00520000
*                  LOAD  EP=SYSDEBUG                                  * 00530000
*                  LR    R15,R0                                       * 00540000
*                  BASSM R14,R15              invoke with AMODE31     * 00550000
*                                                                     * 00560000
*       Notes:                                                        * 00570000
*                                                                     * 00580000
*         1. This first invocation of the routine sets up a standard  * 00590000
*            recovery environment (ESTAE) to trap abends.             * 00600000
*                                                                     * 00610000
*         2. DO NOT try to replace LOAD/BASSM with LINK in the        * 00620000
*            invoking sequence.                                       * 00630000
*                                                                     * 00640053
*         3. If the program already runs with AMODE=31, then          * 00650053
*            BALR or BASR can be used instead of BASSM.               * 00660053
*                                                                     * 00670000
*       The debugging routine may also be used from JCL,              * 00680000
*       without modifying the program, as follows:                    * 00690000
*                                                                     * 00700000
*         //MYSTEP  EXEC PGM=SYSDEBUG,                                * 00710000
*         //            ACCT=MYPROG,            <== program name      * 00720000
*         //            PARM=(a,b,c,d)          <== program's parm    * 00730000
*         //STEPLIB  DD DSN=GILBERT.LOAD,DISP=SHR                     * 00740000
*         //SYSDEBUG DD SYSOUT=*                                      * 00750000
*         //SYSUDUMP DD SYSOUT=*                                      * 00760000
*                                                                     * 00770000
*       The debugging report (written to DDN=SYSDEBUG) contains       * 00780000
*       the following data:                                           * 00790000
*                                                                     * 00800000
*         o  The abend PSW and registers                              * 00810000
*                                                                     * 00820000
*         o  The TCB tree and RB chains (if this is a multi-task step * 00830000
*                                                                     * 00840000
*         o  The RB chain of the abending TCB, in greater detail      * 00850000
*                                                                     * 00860000
*         o  The JPAQ and Load-list                                   * 00870000
*                                                                     * 00880000
*         o  The save-area chain (forward only)                       * 00890000
*                                                                     * 00900000
*         o  The TIOT (allocated DDs)                                 * 00910000
*                                                                     * 00920000
*         o  OPEN data sets (with current record)                     * 00930000
*                                                                     * 00940000
*       Example: http://gsf-soft.com/Freeware/SYSDEBUG.report1.shtml  * 00950057
*                                                                     * 00960057
*       The debugging routine has a loop detection feature            * 00970000
*       that causes an U0322 abend if the program consumes            * 00980028
*       more that 5 seconds of CPU time without doing an IO.          * 00990000
*       This feature is inactivated when a //DBGNO322 DD is           * 01000051
*       present in step's JCL.                                        * 01010051
*                                                                     * 01020000
*********************************************************************** 01030000
*200 Do not use GSFSUBS services                                   1992 01040000
*205 Print sysout record from JES2 unprotected buffer                   01050005
*206 Allow invocation from JCL to front-end PGM                         01060006
*208 Get rid of @JDATE routine                                          01070008
*209 Improve save area processing                                       01080009
*210 Use only standard macro libraries                                  01090010
*211 Use NUCLKUP to enhance address identification                      01100011
*212 Display current save area if not in fwd chain                      01110012
*220 Fixed bug in DUMP32 routine that prevented PLH/RPL display         01120020
*222 Validate address of work area to prevent S0C4                      01130022
*223 Identify OS/VS COBOL eye-catchers                                  01140023
*224 Print SDWA at the end of the report                                01150024
*225 Some modifications in VSAM control block display                   01160025
*226 Display Reg1 for DATACOM subtask                                   01170026
*227 Scan LPAQ in addition to JPAQ and LPAD                             01180027
*228 display attributes of SYSOUT data sets                             01190028
*229 print RPLOPTCD options codes and DCBE                              01200029
*230 Display R14,R15,R0,R1 values for each RB                           01210030
*231 Display LABEL=(,SUL) if present on DD stmt for disk data sets      01220031
*232 Flag Abending RB, use NEXTRB routine                               01230032
*233 Display contents of PARM field                                     01240033
*234 Flag Save Area pointed to by R13 at time of abend                  01250034
*234 Retrieve CDEX to display DDname for JPAQ modules                   01260034
*235 Identify sub-tasks on TCB tree that have terminated already        01270035
*236 Convert DDN to DSN for JPAQ entries                                01280036
*236 Use ESTAE instead of ESPIE to validate A(DYNAM31)                  01290036
*237 Storage Allocation Table (using TCTCORE and LDA)              1994 01300037
*    Some information from JOB and EXEC JCL statements                  01310037
*238 Prevent S806 when invoker doesn't set R13                          01320038
*239 Enhance JOB/STEP information reporting                             01330039
*    Improve method to locate V/VB record in QSAM buffers               01340039
*    Provide support for QSAM buffers above the line (DFSMS/MVS)        01350039
*    Prevent S0C4 when IOBECBAD is bad                                  01360039
*    Print contents of COM_REG area                                     01370039
*    Print all active PLHs if STRNO>1                                   01380039
*    Hash-code name to access CDX                                       01390039
*240 Do not print lines with identical contents (PDUMP rtne)            01400040
*    Print PLH/RPL seq# when STRNO>1                                    01410040
*241 Do not display OPEN mode for VSAM ACB, it's meaningless            01420041
*    Check for R0=12 on entry to recovery routine                       01430041
*    Implement NEXTLLE rtne to prevent stack overflow                   01440041
*    Retrieve buffer addr from ICB when chained scheduling is used      01450041
*    Prevent S30A-14 abend when invoked by a user in key 0-7            01460041
*    Do not issue U0322 abend if //DBGNO322 DD present in step's JCL    01470041
*242 Use RTM2WA to distinguish between type-1 SVC and Program check     01480042
*    Get addr of RMODE31 ACB from DEBRRQ                                01490042
*    Convert ESTAE to ESTAI if invoked from an SVC routine              01500042
*    Inactivate ESPIE environment created by invoking pgm               01510042
*243 Allocate 4 pages below the line at initialization time.       1995 01520043
*    Free-up all 4 pages if recovery invoked with R0=12 (no SDWA)       01530043
*    Free-up 3 pages in recovery rtne to prevent GETMAIN failures.      01540043
*244 Add support for callers in MODE=SUP and key 0-7                    01550044
*    Locate DDname for JPAQ modules loaded from a PDSE                  01560044
*    Minor changes to JOB card formatting routine                       01570044
*245 Initialisation routine has been rewritten to no longer             01580045
*    require caller to provide addr of save area in R13.                01590045
*246 Correct RECFM=U record length                                 1996 01600046
*    Change name from DEBUG to SYSDEBUG                            1998 01610046
*247 Title line displays date in YYYY-MM-DD format                 1999 01620047
*248 Add support for HLASM R3                                      2000 01630048
*    Add support for JES2 OS 1.3.0                                      01640048
*249 Fix S0C7 in OS/390 R3 bug when JCTJMRJD=0 and JCTSSD=0        2001 01650049
*250 ENQ and HH.MM.SS                                              2002 01660050
*251 4-digit DEVN (requires MVS/ESA 4.1 or above).                      01670051
*252 Flag CURR_R13 earlier                                         2004 01680052
*253 Fix TCTDCTR bug - EXCP count for last DD was always zero           01690053
*    Do not display DEBLRECL when RECFM=U                               01700053
*    Expand REASON to three characters                                  01710053
*    Miscellaneous technical and documentation changes                  01720053
*    Display SYSOUT record in JES2 buffer on z/OS 1.2              2005 01730053
*254 Display BKTEK=A in QSAM DCB                                        01740054
*    Display LBI BLKSIZE from DCBEBLKSI                                 01750054
*255 Change HH.MM.SS to HH:MM:SS in title line                     2009 01760055
*    Change STRING GENERATE to STRING (GENERATE,,LOCTR)                 01770055
*256 Use CSVQUERY instead of CDX                                        01780056
*    Needs changes to assemble in MVS/ESA and OS/390                    01790056
*257 Change time format from 12H34M56 to 12:34:56                       01800057
*********************************************************************** 01810000
&HDR     SETC  'GSF UTILITIES - SYSDEBUG R257'                          01820057
         PUNCH ' SETSSI 02570000'                                       01830057
SYSDEBUG CSECT                         MAIN CSECT                       01840041
SYSDEBUG RMODE ANY                     MAIN CSECT                       01850041
         USING *,R15                                                    01860045
         B     BEGIN                                                    01870045
*                                                                       01880047
*        Using the official ASMH/HLASM distinction trick,               01890047
*        simulate the SYSVER and SYSDATC variables                      01900047
*        of HLASM when assembled under ASMH                             01910047
*                                                                       01920047
         LCLA  &ASMH_HLASM                                              01930047
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X                            01940047
&SYSVER  SETC  'ASMH'                                                   01950047
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)       01960047
.ASMH1X  ANOP                                                           01970047
&STR     SETC  '&HDR &SYSDATC &SYSTIME'                                 01980047
&K       SETA  K'&STR                                                   01990046
         DC    AL1(&K),C'&STR',0H'0'   Eye-Catcher                      02000053
*---------------------------------------------------------------------* 02010045
*                                                                     * 02020045
*        Determine if recovery is already initialized for this task.  * 02030045
*        If it is, set R15 and R0 and goback to caller                * 02040045
*                                                                     * 02050045
*---------------------------------------------------------------------* 02060045
BEGIN    L     R1,PSATOLD-PSA(,0)      MY TCB                           02070045
         USING TCB,R1                                                   02080045
         ICM   R1,B'1111',TCBSTAB      FIRST SCB                        02090045
         BZ    INIT12                  no SCB for this task, exit       02100045
         USING SCB,R1                                                   02110045
         LA    R0,DEBUGAID             MY RECOVERY EXIT                 02120045
*LOOP                                                                   02130045
INIT11B  CL    R0,SCBEXIT              IS THIS ME?                      02140045
         BNE   INIT11N                 NO, EXIT                         02150045
         L     R1,SCBXPTR              SCB EXTENSION                    02160045
         LR    R15,R0                  A(DEBUGAID)                      02170045
         BSM   R15,0                   set amode bit                    02180045
         L     R0,SCBXPARM-SCBX(,R1)   PARM ADDRESS (DYNAM31)           02190045
         BSM   0,R14                   goback to caller                 02200045
INIT11N  ICM   R1,B'1111',SCBCHAIN     NEXT SCB                         02210045
         BNZ   INIT11B                 LOOP                             02220045
*ENDLOOP                                                                02230045
*---------------------------------------------------------------------* 02240045
*                                                                     * 02250045
*        Scan TIOT to see if a SYSDEBUG DD is allocated.              * 02260045
*        If it is allocated to a DD DUMMY, quit.                      * 02270045
*        If it is not allocated and we're under TSO, quit.            * 02280045
*                                                                     * 02290045
*---------------------------------------------------------------------* 02300045
INIT12   BALR  R15,0                                                    02310045
         USING *,R15                                                    02320045
         L     R1,PSATOLD-PSA(,0)      MY TCB                           02330045
         USING TCB,R1                                                   02340045
         L     R1,TCBTIO               TIOT                             02350045
         USING TIOT1,R1                                                 02360045
         SLR   R0,R0                   PREPARE IC                       02370045
*LOOP                                                                   02380045
INIT12B  CLC   TIOEDDNM,DCBDDNAM-IHADCB+MODELDCB is this my ddname?     02390045
         BE    INIT12K                 yes, exit loop                   02400045
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY     02410045
         ALR   R1,R0                   BUMP UP TO NEXT ENTRY            02420045
         CLI   TIOELNGH,0              IS THIS THE END?                 02430045
         BNZ   INIT12B                 NOT YET, LOOP THROUGH TIOT       02440045
*ENDLOOP                                                                02450045
*                                                                       02460045
*        IF TSO AND DD MISSING, DO NOT ACTIVATE DEBUGGING               02470045
*                                                                       02480045
INIT12D  L     R1,PSAAOLD-PSA(,0)      MY ASCB                          02490045
         L     R1,ASCBCSCB-ASCB(,R1)   MY CSCB                          02500045
         LA    R0,1                    R0=1                             02510045
         CLI   CHTRKID-CHAIN(R1),CHTSID  AM I A TSO USER?               02520045
         BE    INIT19                  YES, QUIT (R15=0,R0=1)           02530045
*                                                                       02540045
*        If //SYSDEBUG DD DUMMY, exit                                   02550045
*                                                                       02560045
INIT12K  BALR  R15,0                   (local base)                     02570045
         USING *,R15                                                    02580045
         TM    TIOELINK,TIOESSDS       SUB-system data set?             02590045
         BO    INIT20                  YES, continue                    02600045
         ICM   R0,B'0111',TIOEFSRT     DD DUMMY?                        02610045
         BNZ   INIT20                  no, continue                     02620045
         DROP  R1                      TIOT                             02630045
         LA    R0,2                    R0=2                             02640045
*                                                                       02650045
*        Initialisation error: goback to caller with R15=0              02660045
*                                                                       02670045
INIT19   SLR   R15,R15                 YES, QUIT (R15=00)               02680045
         SLR   R1,R1                   R1=0                             02690045
         BSM   0,R14                                                    02700045
*---------------------------------------------------------------------* 02710045
*                                                                     * 02720045
*        Issue TESTAUTH to determine if we should take the            * 02730045
*        authorized or the non-authorized init path.                  * 02740045
*                                                                     * 02750045
*---------------------------------------------------------------------* 02760045
INIT20   BALR  R15,0                   (local base)                     02770045
         USING *,R15                                                    02780045
         TESTAUTH STATE=YES,RBLEVEL=1  Check PSW mode                   02790045
         LTR   R15,R15                 running in mode=sup ?            02800045
         BALR  R15,0                   (local base)                     02810045
         USING *,R15                                                    02820045
         BNZ   INIT200                 no, jump                         02830045
*********************************************************************** 02840045
*                                                                     * 02850045
*        Authorized Initialisation Path (invoked with MODE=SUP)       * 02860045
*                                                                     * 02870045
*        1. GETMAIN protected save area (SP 252)                      * 02880045
*        2. Save caller's regs                                        * 02890045
*        3. Switch to TCB key                                         * 02900045
*        4. GETMAIN DYNAM31                                           * 02910045
*        5. GETMAIN DYNAM24                                           * 02920045
*        6. Issue ESTAE                                               * 02930045
*        7. Change ESTAE to ESTAI (if invoked from SVC routine)       * 02940045
*        8. Restore caller's regs and PSW key                         * 02950045
*        9. Free protected save area and goback to caller             * 02960045
*                                                                     * 02970045
*********************************************************************** 02980045
INIT100  GETMAIN RU,LV=64,LOC=ANY,SP=252                                02990045
         LR    R0,R2                   save R2 accross MODESET          03000045
         MODESET EXTKEY=ZERO,SAVEKEY=(2) switch to TCB key              03010045
         XR    R2,R0                   restore R2                       03020045
         XR    R0,R2                   restore R2                       03030045
         XR    R2,R0                   restore R2                       03040045
         STM   R0,R15,0(R1)            save caller's regs and PSW key   03050045
         BALR  R11,0                                                    03060045
         USING *,R11                                                    03070045
         LR    R12,R1                  KEEP SAVE AREA ADDR              03080045
*                                                                       03090045
*        switch to TCB key                                              03100045
*                                                                       03110045
INIT101  L     R4,PSATOLD-PSA(,0)                                       03120045
         USING TCB,R4                                                   03130045
         MODESET EXTKEY=TCB,WORKREG=2  switch to TCB key                03140045
*                                                                       03150045
INIT102  LA    R0,DYNAM31L-1                                            03160045
         GETMAIN RC,LV=(0),BNDRY=PAGE,LOC=ANY                           03170045
         LTR   R15,R15                 GETMAIN OK?                      03180045
         BNZ   INIT190                 no, quit                         03190045
         LR    R13,R1                  pass address                     03200045
         USING DYNAM31,R13                                              03210045
*                                                                       03220045
         BAL   R14,INIT900             allocate //SYSDEBUG DD           03230045
*                                                                       03240045
*        Allocate 4 pages below the line.  Most of this storage         03250045
*        is a place-holder which is FREEMAIN'd by the recovery          03260045
*        rtne when it is entered to prevent possible S80A or S878       03270045
*        abends during OPEN of the SYSDEBUG DCB.                        03280045
*                                                                       03290045
         GETMAIN RC,LV=DYNAM24L,LOC=(BELOW,ANY)  RMODE24 WORK AREA      03300045
         LTR   R15,R15                 GETMAIN OK?                      03310045
         BNZ   INIT190                 NO, GOBACK                       03320045
         ST    R1,DYNAM24P             save A(DYNAM24)                  03330045
*                                                                       03340045
*        Issue ESTAE                                                    03350045
*                                                                       03360045
         ESTAE DEBUGAID,               RECOVERY ROUTINE                X03370045
               CT,                     CREATE                          X03380045
               PARAM=(R13),            PARAM FOR RECOVERY ROUTINE      X03390045
               TERM=YES,               PROCESS CANCEL ABENDS           X03400045
               MF=(E,ESTAEL)                                            03410045
         LTR   R0,R15                  ESTAE OK?                        03420045
         BNZ   INIT190                 NO, GOBACK                       03430045
*---------------------------------------------------------------------* 03440045
*                                                                     * 03450045
*        Convert the ESTAE to an ESTAI if I've been invoked from      * 03460045
*        an SVC routine.                                              * 03470045
*                                                                     * 03480045
*---------------------------------------------------------------------* 03490045
INIT130  L     R5,TCBRBP               MY PRB OR SVRB                   03500045
         USING RBBASIC,R5                                               03510045
         LA    R0,130                  exit code                        03520045
         TM    RBSTAB1,RBFTSVRB        running under an SVRB?           03530045
         BNO   INIT190                 NO, EXIT                         03540045
*                                                                       03550045
INIT135  LA    R0,135                  exit code                        03560045
         ICM   R6,B'1111',TCBSTAB      MOST RECENT SCB                  03570045
         BZ    INIT190                 NO SCB, EXIT (very bizare!!!)    03580045
         USING SCB,R6                                                   03590045
         LA    R15,DEBUGAID            exit addr without AMODE bit      03600045
         LA    R0,136                  exit code                        03610045
         CL    R15,SCBEXIT             is this the addr of my exit?     03620045
         BNE   INIT190                 NO, QUIT                         03630045
*---------------------------------------------------------------------* 03640045
*                                                                     * 03650045
*        Patch the SCB                                                * 03660045
*                                                                     * 03670045
*---------------------------------------------------------------------* 03680045
         BALR  R15,0                                                    03690045
         USING *,R15                                                    03700045
         MODESET EXTKEY=ZERO           switch to key zero               03710045
         STCM  R4,B'0111',SCBOWNRA     Associate SCB with TCB           03720045
         OI    SCBFLGS1,SCBSTAI        ESTAI                            03730045
         NI    SCBFLGS2,255-SCBSUPER   MODE=PROB                        03740047
         NI    SCBFLGS2,255-SCBKEY0    KEY=NZERO                        03750045
*                                                                       03760045
*        Check if my SCB is the only one chained to my TCB.             03770045
*        If there are other SCBs on the queue, move my SCB              03780045
*        to the end of the queue to ensure I'm invoked last             03790045
*        and prevent S0C4 in IEAVTAS1.                                  03800045
*                                                                       03810045
         LA    R0,141                  exit code                        03820045
         ICM   R2,B'1111',SCBCHAIN     ONLY SCB ON QUEUE?               03830045
         BZ    INIT190                 YES, EXIT                        03840045
*LOOP                                                                   03850045
INIT144  LR    R1,R2                   PREVIOUS SCB                     03860045
         ICM   R2,B'1111',SCBCHAIN-SCB(R1) LAST SCB ON QUEUE?           03870045
         BNZ   INIT144                 NO, LOOP MORE                    03880045
*ENDLOOP                                                                03890045
         ST    R6,SCBCHAIN-SCB(,R1)    MY SCB AT BOTTOM OF QUEUE        03900045
         MVC   TCBSTAB,SCBCHAIN        NEXT SCB AT TOP OF QUEUE         03910045
         XC    SCBCHAIN,SCBCHAIN       MY SCB IS LAST ON QUEUE          03920045
         LA    R0,145                  exit code                        03930045
*---------------------------------------------------------------------* 03940045
*                                                                     * 03950045
*        Restore caller's environment and goback                      * 03960045
*                                                                     * 03970045
*---------------------------------------------------------------------* 03980045
         DROP                                                           03990045
INIT190  BALR  R15,0                                                    04000045
         USING *,R15                                                    04010045
         L     R2,0(,R12)              R0 from protected save area      04020045
         MODESET KEYREG=(R2)           switch back to caller's key      04030045
         LR    R1,R12                  addr of protected save area      04040045
         LM    R2,R14,8(R12)           restore caller's R2-R14          04050045
 LR R2,R0                              pass exit code                   04060045
         FREEMAIN RU,LV=64,A=(R1),SP=252 free protected save area       04070045
*                                                                       04080045
         SLR   R15,R15                 R15=0                            04090045
         BCTR  R15,0                   R15=-1                           04100045
         SLR   R0,R0                   R0=0                             04110045
         SLR   R1,R1                   R1=0                             04120045
         BSM   0,R14                   goback to caller                 04130045
         DROP                                                           04140045
*********************************************************************** 04150045
*                                                                     * 04160045
*        Non-Authorized Initialisation Path (invoked with MODE=PROB)  * 04170045
*                                                                     * 04180045
*        1. GETMAIN DYNAM31                                           * 04190045
*        2. save caller's regs in SAVER012                            * 04200045
*        3. GETMAIN DYNAM24                                           * 04210045
*        4. Issue ESTAE                                               * 04220045
*        5. Prime timer                                               * 04230045
*        6. Issue XCTL (if invoked from JCL)                          * 04240045
*        7. Restore caller's regs and goback (if invoked from pgm)    * 04250045
*                                                                     * 04260045
*********************************************************************** 04270045
INIT200  BALR  R15,0                                                    04280045
         USING *,R15                                                    04290045
         LA    R0,DYNAM31L-1                                            04300045
         GETMAIN RC,LV=(0),BNDRY=PAGE,LOC=ANY                           04310045
         DROP  R15                                                      04320045
         LTR   R15,R15                 GETMAIN OK?                      04330045
         BALR  R15,0                                                    04340045
         BZ    INIT210-*(,R15)         no, quit                         04350045
         SLR   R15,R15                 R15=0                            04360045
         SLR   R0,R0                   R05=0                            04370045
         SLR   R1,R1                   R1=0                             04380045
         BSM   0,R14                   goback                           04390045
*                                                                       04400045
INIT210  STM   R0,R15,SAVER012-DYNAM31(R1) save caller's regs           04410045
         LR    R13,R1                  A(DYNAM31)                       04420045
         USING DYNAM31,R13                                              04430045
*                                                                       04440045
         BALR  R11,0                                                    04450045
         USING *,R11                                                    04460045
*                                                                       04470045
         BAL   R14,INIT900             allocate //SYSDEBUG DD           04480045
*                                                                       04490045
*        Allocate 4 pages below the line.  Most of this storage         04500045
*        is a place-holder which is FREEMAIN'd by the recovery          04510045
*        rtne when it is entered to prevent possible S80A or S878       04520045
*        abends during OPEN of the SYSDEBUG DCB.                        04530045
*                                                                       04540045
         GETMAIN RC,LV=DYNAM24L,LOC=(BELOW,ANY)  RMODE24 WORK AREA      04550045
         LTR   R15,R15                 GETMAIN OK?                      04560045
         BNZ   INIT209                 NO, QUIT                         04570045
         ST    R1,DYNAM24P             save A(DYNAM24)                  04580045
*                                                                       04590045
*        Issue ESTAE XCTL=YES                                           04600045
*                                                                       04610045
         ESTAE DEBUGAID,               RECOVERY ROUTINE                X04620045
               CT,                     CREATE                          X04630045
               PARAM=(R13),            PARAM FOR RECOVERY ROUTINE      X04640045
               TERM=YES,               PROCESS CANCEL ABENDS           X04650045
               XCTL=YES,               STAY ACTIVE ACROSS XCTL         X04660045
               MF=(E,ESTAEL)                                            04670045
         LA    R0,X'0020'              RETCODE FOR XCTL/STACK CONFLICT  04680045
         CLR   R15,R0                  XCTL/STACK CONFLICT?             04690045
         BNE   INIT220                 NO, CONTINUE                     04700045
*                                                                       04710045
*        Issue ESTAE XCTL=NO if there is at least a stack entry active  04720045
*                                                                       04730045
         ESTAE DEBUGAID,               RECOVERY ROUTINE                X04740045
               CT,                     CREATE                          X04750045
               PARAM=(R13),            PARAM FOR RECOVERY ROUTINE      X04760045
               TERM=YES,               PROCESS CANCEL ABENDS           X04770045
               MF=(E,ESTAEL)                                            04780045
         LTR   R15,R15                 ESTAE OK?                        04790045
         BZ    INIT220                 yes, jump                        04800045
*                                                                       04810045
INIT209  LM    R2,R14,SAVER012+8       restore caller's registers       04820045
         SLR   R15,R15                 R15=0                            04830045
         SLR   R0,R0                   R05=0                            04840045
         SLR   R1,R1                   R1=0                             04850045
         BSM   0,R14                   goback                           04860045
*---------------------------------------------------------------------* 04870045
*                                                                     * 04880045
*        Set-up timer for loop detection                              * 04890045
*                                                                     * 04900045
*---------------------------------------------------------------------* 04910045
INIT220  L     R4,PSATOLD-PSA(,0)      my TCB                           04920045
         USING TCB,R4                                                   04930045
         L     R5,TCBRBP               MY PRB OR SVRB                   04940045
         USING RBBASIC,R5                                               04950045
         CL    R4,RBLINK               FIRST AND ONLY PRB IN CHAIN?     04960045
         BNE   INIT250                 NO, DO NOT SET TIMER             04970045
         DEVTYPE =C'DBGNO322',WKCELL1                                   04980041
         LTR   R15,R15                 //DBGNO322 DD specified?         04990041
         BZ    INIT250                 YES, DO NOT SET TIMER            05000045
         L     R1,TCBFSA               FIRST SAVE AREA                  05010041
         MVI   044(R1),255             FOR U322, JUST IN CASE . . .     05020041
         SYNCH U322SET                 PRIME THE U322 PUMP              05030041
*---------------------------------------------------------------------* 05040045
*                                                                     * 05050045
*        XCTL TO PGMNM IN ACCT FIELD                                  * 05060045
*                                                                     * 05070045
*        //GO EXEC PGM=SYSDEBUG,ACCT=USERPROG,PARM=(USER-PARM)        * 05080045
*                                                                     * 05090045
*---------------------------------------------------------------------* 05100045
INIT250  CL    R4,TCBJSTCB             Is this the JOB-STEP TCB ?       05110045
         BNE   INIT290                 NO, GOBACK                       05120045
         CLC   TCBFSA,SAVER012+R13*4   AM I INVOKED THRU JCL?           05130045
         BNE   INIT290                 NO, GOBACK                       05140045
         L     R5,TCBRBP               POINT TO MY PRB                  05150038
         SLR   R6,R6                                                    05160040
         ICM   R6,B'0111',RBCDE1       Do we have a CDE?                05170038
         BZ    INIT290                 NO, GOBACK                       05180045
         USING CDENTRY,R6                                               05190038
         CLC   CDENTPT,=A(SYSDEBUG+X'80000000')                        +05200045
                                       Current PRB pointing at myself?  05210038
         BNE   INIT290                 NO, GOBACK                       05220045
         MVC   SAVER012(8),RBGRSAVE    PASS R0-R1                       05230045
*                                                                       05240038
         L     R5,TCBJSCB              MY JSCB                          05250038
         USING IEZJSCB,R5                                               05260038
         LOAD  EPLOC=JSCBPGMN          BUMP MY USE COUNT FOR XCTL       05270000
         L     R6,JSCSCT               MY SCT                           05280000
         USING SCT,R6                                                   05290033
         SLR   R7,R7                                                    05300000
         ICM   R7,B'0111',SCTAFACT     ACCOUNT DATA                     05310000
         USING IEFAACTB-16,R7                                           05320000
         LA    R14,WKCELL1             8-BYTE WORK AREA                 05330000
         LA    R15,L'WKCELL1           LENGTH                           05340000
         LA    R0,ACTACCNT+1           FIRST ACCOUNT FIELD              05350000
         L     R1,=X'40000000'         PADDING                          05360000
         IC    R1,ACTACCNT+0           LENGTH OF PGM NAME               05370000
         MVCL  R14,R0                  MOVE PGM NAME                    05380000
         LA    R15,WKCELL2             WORK AREA                        05390000
         LA    R0,WKCELL1              PGM NAME                         05400000
         SLR   R1,R1                                                    05410000
         STM   R0,R1,0(R15)            XCTL LIST                        05420000
         LM    R0,R14,SAVER012         restore caller's registers       05430045
         XCTL  SF=(E,(15))             EXECUTE TARGET PROGRAM           05440000
         DROP  R4,R5,R6,R7                                              05450000
*                                                                       05460000
*        ESTAE executed, set R15/R0 and go back to caller               05470045
*                                                                       05480000
INIT290  LA    R15,DEBUGAID            R15=A(DEBUGAID)                  05490045
         BSM   R15,0                   SET AMODE BIT                    05500000
         LA    R0,DYNAM31              R0=A(DYNAM31)                    05510000
         SLR   R1,R1                   R1=0                             05520045
         LM    R2,R14,SAVER012+8       restore caller's registers       05530045
         BSM   0,R14                   GOBACK, PASS R15-R0              05540000
         DROP                                                           05550000
*---------------------------------------------------------------------* 05560045
*                                                                     * 05570045
*        ALLOCATE SYSOUT DATA SET                                     * 05580045
*                                                                     * 05590045
*---------------------------------------------------------------------* 05600045
INIT900  BALR  R15,0                                                    05610045
         USING *,R15                                                    05620045
         LA    R1,TENWORDS-DYNAM31(,R13) WORK AREA FOR DYNALLOC         05630045
         XC    0(20,R1),0(R1)          CLEAR STORAGE                    05640045
         MVI   0(R1),20                LENGTH                           05650045
         MVI   1(R1),1                 VERB=ALLOC                       05660045
         LA    R0,INIT9900             TEXT UNIT POINTERS               05670045
         ST    R0,8(,R1)               S99TUPTR                         05680045
         ST    R1,20(,R1)              WORK AREA ADDRESS                05690045
         LA    R1,20(,R1)              S99RBPTR                         05700045
         OI    0(R1),X'80'             S99RBPTR                         05710045
         SVC   99                      ALLOCATE SYSDEBUG                05720045
         BR    R14                     continue                         05730045
*                                                                       05740045
INIT9900 DC    A(INIT9901,INIT9902,INIT9918,INIT9952+X'80000000')       05750054
INIT9901 DC    AL2(1,1,8),C'SYSDEBUG'  DDNAME                           05760045
INIT9902 DC    AL2(2,1,10),C'&&&&SYSDEBUG' DSNAME=&&SYSDEBUG            05770054
INIT9918 DC    X'0018,0000'            SYSOUT=*                         05780045
INIT9952 DC    X'0052,0000'            PERMANENTLY ALLOCATED            05790045
*---------------------------------------------------------------------* 05800045
*                                                                     * 05810045
*        LOOP DETECTOR (ABENDU0322 AFTER 5 SECONDS OF CPU WITHOUT I/O)* 05820045
*                                                                     * 05830045
*        Uses the R6 slot of the 1st save area to hold the EXCP count * 05840045
*                                                                     * 05850045
*---------------------------------------------------------------------* 05860045
U322SET  SAVE  (14,12),,DEBUG.U322SET  SAVE REGISTERS                   05870028
         LR    R3,R15                  LOCAL BASE                       05880000
         USING U322SET,R3                                               05890028
         L     R4,PSATOLD-PSA(,0)      MY TCB                           05900000
         L     R5,PSAAOLD-PSA(,0)      MY ASCB                          05910000
         L     R0,ASCBIOSC-ASCB(,R5)   CURRENT EXCP COUNT               05920000
         L     R1,TCBFSA-TCB(,R4)      FIRST SAVE AREA                  05930000
         CL    R0,044(,R1)             SAME EXCP COUNT ?                05940013
         BE    U322ABND                YES, ABEND                       05950028
         ST    R0,044(,R1)             SAVE EXCP COUNT INTO R6 SLOT     05960013
         STIMER TASK,U322SET,BINTVL=U322TIME                            05970028
U322EXIT RETURN (14,12)                GOBACK TO FLIH                   05980028
*                                                                       05990000
U322ABND L     R6,TCBRBP-TCB(,R4)      POINT TO MY RB (TIRB)            06000028
         LM    R0,R15,RBGRSAVE-RBBASIC(R6)  LOOPING PROGRAM'S REGISTERS 06010000
         BALR  R1,0                                                     06020000
         ICM   R1,B'1111',U322CODE-*(R1)    LOAD ABEND CODE             06030028
         CNOP  6,8                                                      06040000
         SVC   13                      ISSUE ABEND SVC                  06050000
U322TIME DC    F'00500'                TIMER INTVL IN 1/100 OF A SECOND 06060028
U322CODE DC    X'80',FL3'322'          ABEND 0322,DUMP                  06070034
         DROP                                                           06080000
*                                                                       06090000
*********************************************************************** 06100000
*                                                                     * 06110045
*        DEBUGGING ROUTINE                                            * 06120045
*                                                                     * 06130045
*********************************************************************** 06140000
*                                                                       06150000
         USING DEBUGAID,R15                                             06160050
DEBUGAID CH    R0,H12                  SDWA ALLOCATED?                  06170050
         BNE   DEBUGAID4               YES, JUMP                        06180043
         USING DYNAM31,R2                                               06190043
         TM    DYNAM24P,X'80'          place-holder freed already?      06200050
         BNO   DEBUGAID2               NO, JUMP                         06210050
         SLR   R15,R15                 RC=0                             06220050
         BR    R14                     continue with abend              06230050
DEBUGAID2 EQU  *                                                        06240050
         OI    DYNAM24P,X'80'          place-holder has been freed      06250050
         L     R1,DYNAM24P             ADDR OF MY 24-BIT WORK AREA      06260043
         LA    R1,DYNAM24H-DYNAM24(,R1) addr of place-holder            06270043
         FREEMAIN RC,LV=L'DYNAM24H,A=(1) free place holder              06280043
         DROP  R15                     local base                       06290050
         LA    R13,SAVER012            save area                        06300043
         LA    R0,12                   restore R0 contents              06310043
         DROP  R2                      DYNAM31                          06320050
*                                                                       06330041
DEBUGAID4 BALR R15,0                   set base reg for SAVE macro      06340041
         SAVE  (14,12),,'&HDR ESTAE &SYSDATC &SYSTIME'                  06350047
         LR    R11,R15                 local base                       06360050
         USING DEBUGAID4+2,R11                                          06370050
         LR    R8,R1                   SDWA address                     06380043
         USING SDWA,R8                                                  06390000
         L     R9,PSATOLD-PSA(,0)      MY TCB                           06400043
         USING TCB,R9                                                   06410043
*                                                                       06420043
*        If I was invoked without an SDWA, copy RTM2's SDWA             06430043
*        into a work area                                               06440043
*                                                                       06450043
         CH    R0,H12                  did we get an SDWA from RTM2?    06460050
         BNE   DEBUGAID8               yes, jump                        06470043
         USING DYNAM31,R2                                               06480043
         L     R3,TCBRTWA              RTM2WA                           06490043
         USING RTM2WA,R3                                                06500043
         L     R14,RTM2SDW2            RTM2's SDWA                      06510043
         LH    R15,SDWALNTH+1-SDWA(,R14) length of the SDWA             06520043
         LA    R0,D31SDWA              my own SDWA                      06530043
         LA    R1,L'D31SDWA            my own SDWA                      06540043
         MVCL  R0,R14                  move RTM2 SDWA to my work area   06550043
         LA    R8,D31SDWA              my own SDWA                      06560043
         ST    R2,SDWAPARM             A(DYNAM31)                       06570043
         OI    SDWAPARM,X'80'          prevent freemain                 06580043
         MVC   SDWAEC1,RTM2EPSW        error psw                        06590043
         MVC   SDWAAEC1,RTM2AEC1       additional error information     06600043
         MVC   SDWAEC2,RTM2EPSW        error psw                        06610043
         MVC   SDWAABCC,RTM2CODE       completion code                  06620043
         MVC   SDWAGRSV,RTM2EREG       REGISTERS AT TIME OF ABEND       06630043
         MVC   SDWAFLGS,RTM2FLGS       PASS FLAGS                       06640043
         DROP  R2,R3                   DYNAM31,RTM2WA                   06650043
DEBUGAID8 EQU  *                                                        06660043
*                                                                       06670000
         CLC   =X'222000',SDWACMPC     CANCEL COMMAND?                  06680036
         BE    GOBACK8                 YES, QUIT                        06690036
*                                                                       06700036
         CLI   SDWARCDE,0              return code set by previous     +06710000
                                       recovery routine?                06720000
         BNE   GOBACK9                 YES, QUIT                        06730036
*                                                                       06740042
*        Inactivate any ESPIE environment created earlier               06750042
*        which could interfere with the trapping of my                  06760042
*        own addressing and protection exceptions.                      06770042
*                                                                       06780042
         ICM   R0,B'1111',TCBPIE       any ESPIE created earlier?       06790042
         BZ    ESPIE12                 no, exit                         06800042
         TESTAUTH KEY=YES,STATE=YES,RBLEVEL=1    Check PSW key          06810042
         LTR   R15,R15                 running in mode=sup or key 0-7 ? 06820042
         BZ    ESPIE12                 yes, exit                        06830042
         ESPIE SET,MF=(E,ESPIE11L)     Override existing PICA           06840042
         B     ESPIE12                                                  06850042
ESPIE11L ESPIE SET,ESPIE11X,MF=L       INTERRUPT MASK ALL ZERO          06860042
ESPIE11X LR    R0,R1                   save addr of EPIE                06870042
         ICM   R1,B'1111',ESPIE11Z-ESPIE11X(R15)   get completion code  06880042
         ABEND (1)                     ABEND0C0                         06890042
ESPIE11Z DC    X'80,0C0000'            S0C0 completion code             06900042
ESPIE12  EQU   *                                                        06910042
*                                                                       06920013
*        Chain save areas                                               06930036
*        Use ESTAE to trap S0C4 if A(DYNAM31) is invalid                06940036
*                                                                       06950013
NEW_SAVE ESTAE ESPIEXIT,CT             RECOVERY ROUTINE                 06960036
         L     R2,SDWAPARM             =A(DYNAM31)                      06970036
         ST    R2,8(,R13)              bwd chain                        06980043
         ST    R13,4(,R2)              fwd chain                        06990013
         LR    R13,R2                  A(DYNAM31)                       07000013
         USING DYNAM31,R13                                              07010000
         ESTAE 0                       PARM LOOKS GOOD, RESET MY ESPIE  07020036
*                                                                       07030050
         MVC   ENQLIST(ENQLISTL),ENQMODEL ENQ/DEQ LIST                  07040050
         ENQ   MF=(E,ENQLIST)          PREPARE TO UPDATE WORK AREA      07050050
*                                                                       07060000
DUMPOPT  TM    SDWACMPF,SDWAREQ        DUMP REQUESTED?                  07070000
         BNO   ESTAE2                  NO, JUMP                         07080000
         OI    SDWADPFS,SDWADLST       DUMP OPTIONS VALID               07090000
         MVC   SDWADDAT,=X'0F00,AF00'  MOVE SDATA/PDATA                 07100000
         TM    SDWAMWP1,SDWAPGM1       Abend in SUPVR mode?             07110041
         BO    ESTAE2                  NO, JUMP                         07120041
         OI    SDWASDA0,SDWALSQA       yes, dump LSQA too               07130041
*                                                                       07140000
ESTAE2   ESTAE RETRY00,                RECOVERY ROUTINE                X07150032
               CT,                     CREATE                          X07160032
               PARAM=DYNAM31,          PARAM FOR RECOVERY ROUTINE      X07170032
               MF=(E,ESTAEL)                                            07180000
*                                                                       07190000
SETK7    TESTAUTH KEY=YES,STATE=YES,RBLEVEL=1    Check PSW key          07200041
         LTR   R15,R15                 caller in system key?            07210041
         BNZ   FREEPH24                no, jump                         07220050
         MODESET KEY=NZERO,MODE=SUP    yes, switch to a safe key        07230041
*                                                                       07240041
*        Free AMODE24 place-holder if we're low on memory               07250050
*                                                                       07260050
FREEPH24 L     R12,DYNAM24P            ADDR OF MY 24-BIT WORK AREA      07270050
         USING DYNAM24,R12                                              07280000
         TM    DYNAM24P,X'80'          place-holder freed already?      07290050
         BO    OPENDCB                 yes, do not do it again          07300050
         L     R1,PSAAOLD-PSA(,0)      ASCB                             07310050
         L     R1,ASCBLDA-ASCB(,R1)    Local Data Area                  07320050
         USING LDA,R1                                                   07330050
         L     R0,LDALIMIT             LIMIT                            07340050
         S     R0,LDALOAL              size of remaining memory below   07350050
         BM    OPENDCB                 negative, exit                   07360050
         DROP  R1                      was LDA                          07370050
         CH    R0,=H'12288'            at least 12K available?          07380050
         BH    OPENDCB                 yes, keep place-holder           07390050
         LA    R1,DYNAM24H             place-holder (last 3 pages)      07400043
         FREEMAIN RC,LV=L'DYNAM24H,A=(1)   free place holder            07410043
         OI    DYNAM24P,X'80'          place-holder has been freed      07420050
*                                                                       07430050
*        OPEN the SYSDEBUG DCB                                          07440050
*                                                                       07450050
OPENDCB  EQU   *                                                        07460050
         MVC   DCBDEBUG(DCBLNGQS),MODELDCB   MOVE MODEL DCB             07470000
         LA    R0,DCBDEBUG             OPEN LIST                        07480000
         ST    R0,OPENLIST             OPEN LIST                        07490000
         MVI   OPENLIST,X'8F'          OPEN LIST                        07500000
         OPEN  MF=(E,OPENLIST)         OPEN MY DCB                      07510000
*                                                                       07520000
         SLR   R0,R0                   R0=0                             07530000
         BCTR  R0,0                    R0=-1                            07540000
         ST    R0,MASKADDR             X'FFFFFFFF'                      07550000
*                                                                       07560000
         MVI   TRTPRINT,C' '           PRINTABLE CHARACTERS             07570000
         MVC   TRTPRINT+1(255),TRTPRINT                                 07580000
         MVC   BLANKS,TRTPRINT         KEEP BLANKS                      07590000
         SLR   R15,R15                                                  07600000
         SLR   R0,R0                                                    07610000
         BAL   R1,TRTPRT2                                               07620000
         DC    X'4A,7,5A,8,6A,6,7A,6'  Special characters               07630000
         DC    X'81,9,91,9,A2,8'       Lowercase                        07640000
         DC    X'C1,9,D1,9,E2,8'       Uppercase                        07650000
         DC    X'F0,A'                 Digits                           07660000
         DC    X'00,0'                 end of table                     07670000
*LOOP                                                                   07680000
TRTPRT2  IC    R15,0(,R1)              FIRST BYTE                       07690000
         IC    R0,1(,R1)               ITERATIONS                       07700000
*--LOOP                                                                 07710000
TRTPRT3  STC   R15,TRTPRINT(R15)       STORE X'4A' INTO TRTPRINT+X'4A'  07720000
         LA    R15,1(,R15)             BUMP INDEX                       07730000
         BCT   R0,TRTPRT3              NEXT CHARACTER                   07740000
*--ENDLOOP                                                              07750000
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE              07760000
         CLI   0(R1),0                 END OF TABLE?                    07770000
         BNE   TRTPRT2                 NEXT STRING                      07780000
*ENDLOOP                                                                07790000
*                                                                       07800000
         BAL   R14,DIAG000         <== SET TITLE, DIAGNOSE              07810000
         BAL   R14,PSW00           <== PRINT PSW, GPRS                  07820000
         BAL   R14,JOBSTEP         <== PRINT JOB/STEP DATA              07830039
         BAL   R14,PRB00           <== PRINT RB CHAIN                   07840000
         BAL   R14,PGM00           <== PRINT JPAQ AND LOAD LIST         07850000
         BAL   R14,COMREG00        <== PRINT COM_REG area               07860039
         BAL   R14,LINK00          <== PRINT SAVE AREA TRACE            07870000
         BAL   R14,TIOT00          <== PRINT DATA SET ALLOCATIONS       07880000
         BAL   R14,DEB000          <== PRINT OPEN DATA SETS             07890000
*TEST    BAL   R14,PRWA00          <== PRINT SDWA                       07900022
*                                                                       07910000
         CLOSE MF=(E,OPENLIST)         CLOSE DEBUG DD                   07920000
         MVI   DCBBUFNO-IHADCB+DCBDEBUG,00                              07930000
         FREEPOOL DCBDEBUG                                              07940000
         ESTAE 0                       DELETE RECOVERY ROUTINE          07950000
*                                                                       07960000
*---------------------------------------------------------------------- 07970000
*                                                                       07980000
*        GOBACK TO RTM                                                  07990000
*                                                                       08000000
*              Free working-storage (unless hi-order bit is on)         08010000
*                                                                       08020000
*---------------------------------------------------------------------- 08030000
*                                                                       08040000
GOBACK   L     R2,DYN_TCB              getmain tcb                      08050050
         LR    R3,R13                  A(DYNAM31)                       08060050
         DEQ   MF=(E,ENQLIST)          FREE WORK AREA                   08070050
         L     R13,4(,R13)             caller's save area               08080000
         TM    SDWAPARM,X'80'          hi-order bit on?                 08090043
         BO    GOBACK7                 yes, skip freemain               08100043
         CL    R2,PSATOLD-PSA(,0)      is this the right TCB?           08110050
         BNE   GOBACK7                 no, skip freemain                08120041
         LA    R0,DYNAM31L-1           length of dynamic storage area   08130000
         FREEMAIN RU,LV=(0),A=(R3)     free dynamic storage             08140050
*                                                                       08150000
GOBACK7  TESTAUTH KEY=YES,STATE=YES,RBLEVEL=1    Check PSW key          08160041
         LTR   R15,R15                 caller in system key?            08170041
         BNZ   GOBACK8                 no, jump                         08180041
         MODESET KEY=ZERO,MODE=PROB    yes, switch to KEY=0             08190043
*                                                                       08200041
GOBACK8  SETRP WKAREA=(R8),            SDWA address                    X08210036
               RC=00                   Continue with abend              08220000
GOBACK9  RETURN (14,12)                go back to R/TM                  08230036
H12      DC    H'12'                   no SDWA on entry to DEBUGAID     08240050
*                                                                       08250013
*---------------------------------------------------------------------- 08260036
*                                                                       08270036
*        RETRY ROUTINE (FOR ESPIE)                                      08280013
*                                                                       08290013
*---------------------------------------------------------------------- 08300036
*                                                                       08310036
ESPIEXIT SAVE  (14,12),,*              save registers                   08320036
         BALR  R2,0                    local base                       08330036
         USING *,R2                                                     08340036
*WTO 'ESPIEXIT ENTERED'                                                 08350036
         SETRP RETADDR=ESPIEBAD,RC=4,  <== RETRY                       X08360036
               FRESDWA=YES,RETREGS=YES,                                X08370036
               DUMP=NO,                suppress dump                   X08380036
               REGS=(14,12)            restore registers                08390036
         DROP  R2                                                       08400036
*                                                                       08410013
ESPIEBAD ESTAE 0                       RESET MY ESPIE                   08420036
         SETRP WKAREA=(R8),            SDWA address                    X08430013
               REGS=(14,12),           restore registers               X08440013
               RC=00                   Continue with abend              08450013
*                                                                       08460000
MODELDCB DCB   DSORG=PS,MACRF=PM,DDNAME=SYSDEBUG,                      X08470000
               RECFM=FBA,LRECL=121,BUFNO=1                              08480000
ENQMODEL ENQ   (ENQNAMES,ENQNAMES,E,,STEP),MF=L                         08490050
ENQNAMES DC    CL8'SYSDEBUG'           QNAME/RNAME                      08500050
*---------------------------------------------------------------------- 08510000
         MACRO                                                          08520000
&NAME    BEGIN_PROC &SAVE=YES                                           08530032
         GBLC  &#PROC                                                   08540000
&#PROC   SETC  'IHB&SYSNDX'                                             08550000
$LTORG   LOCTR                                                          08560000
&NAME    BAL   R15,BEGIN_PROC          BRANCH TO RELAY CODE             08570048
         DC    Y(&#PROC.A-*)           OFFSET TO FAR CODE               08580000
         AIF   ('&SAVE' EQ 'NO').NOSAVE                                 08590032
DYNAM31  DSECT                                                          08600000
DYN31FAR LOCTR                                                          08610000
&#PROC.S DS    2F                      SAVE AREA FOR R14 AND R10        08620000
$FARRTNE LOCTR                                                          08630000
&#PROC.A LR    R15,R10                 BASE REG                         08640000
         STM   R14,R15,&#PROC.S        SAVE REGISTERS                   08650000
         BALR  R10,0                                                    08660000
         USING *,R10                                                    08670000
         MEXIT                                                          08680032
.NOSAVE  ANOP                                                           08690032
$FARRTNE LOCTR                                                          08700032
&#PROC.A DS    0H                                                       08710032
         USING *,R15                                                    08720032
         MEND                                                           08730000
         MACRO                                                          08740000
&NAME    END_PROC &RC=                                                  08750032
         GBLC  &#PROC                                                   08760000
&NAME    L     R14,&#PROC.S            RESTORE LINKAGE REGISTER         08770000
         L     R10,&#PROC.S+4          RESTORE BASE REGISTER            08780000
         BR    R14                                                      08790000
&SYSECT  LOCTR                         MAIN CODE                        08800000
         MEND                                                           08810000
*---------------------------------------------------------------------- 08820000
         MACRO                                                    MACRO 08830000
&REF    #SETMASK &AMODE                                           MACRO 08840000
&REF     MVI   MASKADDR,X'7F'          X'7FFFFFFF'                MACRO 08850000
         TM    &AMODE,X'80'            CHECK AMODE BIT            MACRO 08860000
         BO    *+8                     AMODE31, JUMP              MACRO 08870000
         MVI   MASKADDR,X'00'          X'00FFFFFF'                MACRO 08880000
         MEND                                                     MACRO 08890000
*---------------------------------------------------------------------- 08900000
         MACRO                                                    MACRO 08910000
&NAME   #S0C4  &ERRET,&PUSH                                       MACRO 08920041
         AIF   ('&ERRET' EQ 'RESET').RESET                        MACRO 08930000
         AIF   ('&ERRET' EQ 'POP').POP                            MACRO 08940041
&DD      SETC  '(&ERRET-RETRY11)'                                 MACRO 08950000
         AIF   ('&PUSH' EQ 'PUSH').PUSH                           MACRO 08960041
&NAME    MVI   #RETRY+0,&DD/256                                         08970041
         MVI #RETRY+1,&DD-((&DD/256)*256)                               08980041
         MEXIT                                                    MACRO 08990041
.PUSH    ANOP                                                     MACRO 09000041
&NAME    MVC   #RETRY+2,#RETRY         push current address             09010041
         MVI   #RETRY+0,&DD/256                                         09020041
         MVI #RETRY+1,&DD-((&DD/256)*256)                               09030041
         MEXIT                                                    MACRO 09040041
.RESET   ANOP                                                     MACRO 09050000
&NAME    MVI   #RETRY+0,0              RESET RETRY ADDRESS              09060041
         MEXIT                                                    MACRO 09070041
.POP     ANOP                                                     MACRO 09080041
&NAME    MVC   #RETRY,#RETRY+2         pop previous address             09090041
         MVI   #RETRY+2,0              RESET RETRY ADDRESS              09100041
.MEND    MEND                                                     MACRO 09110000
*---------------------------------------------------------------------- 09120000
$LTORG   LOCTR                         ADDRESSABLE CODE                 09130000
$FARRTNE LOCTR                         FAR ROUTINES                     09140000
         SPLEVEL SET                   SET &SYSSPLV SYMBOL              09150011
         GBLC  &SYSSPLV                MVS/SP LEVEL                     09160011
*                                                                       09170000
*---------------------------------------------------------------------- 09180000
*                                                                       09190000
*        ABEND-SPECIFIC DIAGNOSTIC INFORMATION                          09200000
*                                                                       09210000
*              FORMAT AND DISPLAY ABEND-CODE                            09220000
*              LOCATE LAST PRB, FIRST SVRB                              09230000
*              DETERMINE IF THIS IS AN OPEN/CLOSE/EOV (OCE) ABEND       09240000
*              INVOKE THE CORRESPONDING DIAGNOSIS ROUTINE               09250000
*                                                                       09260000
*---------------------------------------------------------------------- 09270000
*                                                                       09280000
DIAG000  BEGIN_PROC                                                     09290032
         L     R5,TCBRD                REGION DESCRIPTOR                09300000
         LM    R0,R1,RDSTART-RD(R5)    START/LENGTH OF MY REGION        09310000
         ALR   R1,R0                   START/END OF MY REGION           09320000
         STM   R0,R1,REGION24          START/END OF MY REGION           09330000
******   MVC   CURR_R13,RBGRS13        keep addr of current save area   09340003
******  #SETMASK RBOPSW+4              SET ADDRESS CLEAN-UP MASK        09350004
         MVC   CURR_R13,SDWAGR13       keep addr of current save area   09360003
        #SETMASK SDWANXT1              SET ADDRESS CLEAN-UP MASK        09370004
         NC    CURR_R13,MASKADDR       clean-up                         09380003
*                                                                       09390000
*        BUILD A FAKE PSW2 IF PSW1=PSW2 OR PSW2=ZERO            @910624 09400000
*                                                                       09410000
         MVC   ORIGIN2,BLANKS          ORIGIN OF PSW2 IS SDWAEC2        09420000
         LM    R0,R1,SDWAEC2           pick up PSW2                     09430041
         ALR   R0,R1                   PSW2=ZERO?                       09440041
         BZ    DIAG005                 YES, JUMP                        09450000
         CLC   SDWAEC1,SDWAEC2         PSW1=PSW2?                       09460000
         BNE   DIAG010                 NO, QUIT                         09470000
DIAG005 #S0C4  DIAG010                                                  09480000
         L     R1,SDWAGR13             VALIDATE CALLER'S R13            09490000
         L     R1,4(,R1)               CALLER'S SAVE AREA               09500000
         CLC   0(72,R1),0(R1)          VALIDATE CALLER'S SAVE AREA      09510000
        #S0C4  RESET                                                    09520000
         C     R1,TCBFSA               IS THIS THE FIRST SAVE AREA?     09530000
         BE    DIAG010                 YES, JUMP                        09540000
         MVC   ORIGIN2,=C'  (HSA)'     ORIGIN OF PSW2 IS HIGH-SA        09550000
         MVC   SDWASR00(4*13),20(R1)   MOVE R0-R12                      09560000
         ST    R1,SDWASR13             STORE R13                        09570000
         MVC   SDWASR14(4*2),12(R1)    MOVE R14-R15                     09580000
         MVC   SDWANXT2,12(R1)         USE R14 AS NEXT ADDRESS          09590000
         XC    SDWAAEC2(4),SDWAAEC2    ZERO ILC, INTC                   09600000
*                                                                       09610000
*        BUILD RB CHAIN IN REVERSE ORDER                                09620000
*                                                                       09630000
DIAG010  L     R6,TCBRBP               TOP OF RB CHAIN (MOST RECENT RB) 09640000
         LR    R0,R6                   POINT TO BASIC SECTION           09650000
         SH    R0,=Y(RBBASIC-RBPREFIX) POINT TO RBPREFIX                09660000
         ST    R0,MY_PRB               MY RBPREFIX                      09670000
         SLR   R6,R6                   first time switch for NEXTRB     09680041
*                                                                       09690000
*        GET ADDR OF LAST PRB, FIRST SVRB, ABEND SVRB.                  09700000
*                                                                       09710000
*LOOP                                                                   09720000
DIAG031  BAL   R14,NEXTRB              GET RB ADDRESS                   09730032
         LTR   R6,R6                   eof?                             09740032
         BZ    DIAG035                 yes, exit                        09750032
         CL    R6,MY_PRB               END OF CHAIN?                    09760032
         BE    DIAG035                 yes, exit                        09770032
         USING RBPREFIX,R6                                              09780032
         CLI   RBSTAB1,RBFTPRB         IS THIS A PRB?                   09790000
         BNE   DIAG031S                NO, JUMP                         09800000
         ICM   R0,B'1111',FRSTSVRB     SET ALREADY?                     09810000
         BNZ   DIAG031S                YES, JUMP                        09820000
         ST    R6,LASTPRB              SAVE ADDR OF LAST PRB            09830000
*                                                                       09840000
DIAG031S TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?                 09850000
         BZ    DIAG031N                NO, JUMP                         09860000
         ICM   R0,B'1111',FRSTSVRB     SET ALREADY?                     09870000
         BNZ   DIAG031A                YES, JUMP                        09880000
         ST    R6,FRSTSVRB             SAVE ADDR OF FIRST SVRB          09890000
*LOOP                                                                   09900000
DIAG031A TM    RBFLAGS1,RBABEND        IS THIS THE ABEND SVRB?          09910000
         BZ    DIAG031N                NO, JUMP                         09920000
         ICM   R0,B'1111',ABNDSVRB     SET ALREADY?                     09930000
         BNZ   DIAG031N                YES, JUMP                        09940000
         ST    R6,ABNDSVRB             SAVE ADDR OF ABEND SVRB          09950000
*                                                                       09960000
DIAG031N B     DIAG031                 NEXT ENTRY IN RB STACK           09970032
*ENDLOOP                                                                09980000
DIAG035  L     R6,LASTPRB              LAST PRB                         09990032
         MVI   OCE_CODE,C'O'           ABEND DURING OPEN                10000000
         CLI   RBWLIC+3,19             O/C/E SVC?                       10010000
         BE    DIAG040                 YES, JUMP                        10020000
         CLI   RBWLIC+3,22             O/C/E SVC?                       10030000
         BE    DIAG040                 YES, JUMP                        10040000
         MVI   OCE_CODE,C'C'           ABEND DURING CLOSE               10050000
         CLI   RBWLIC+3,20             O/C/E SVC?                       10060000
         BE    DIAG040                 YES, JUMP                        10070000
         MVI   OCE_CODE,C'E'           ABEND DURING EOV                 10080000
         CLI   RBWLIC+3,55             O/C/E SVC?                       10090000
         BE    DIAG040                 YES, JUMP                        10100000
         MVI   OCE_CODE,00                                              10110000
         DROP  R6                      RBPREFIX                         10120000
*                                                                       10130000
DIAG040  STRING 'ABEND U',(SDWACMPC+1,H,R4Z),INTO=ABCODE ABEND=U0046    10140000
         CLC   =X'000F',SDWACMPC       SYSTEM CODE ALL ZEROES?          10150000
         BNL   DIAG044                 YES, JUMP                        10160000
         STRING (SDWACMPC,,X),INTO=WKCELL1                              10170000
         STRING 'ABEND S',(WKCELL1,3),'-',(SDWAGR15+3,1,X),            X10180032
               INTO=ABCODE             ABEND=SD37-04                    10190000
         TM    SDWAERRA,SDWASVCD       TASK ISSUED SVC 13?              10200000
         BNO   DIAG042                 NO, JUMP                         10210000
         TM    SDWACMPF,SDWARCF        REASON-CODE SPECIFIED?           10220000
         BO    DIAG044                 YES, JUMP                        10230000
         ICM   R15,B'1111',SDWAGR15    R15=00?                          10240000
         BZ    DIAG042                 YES, JUMP                        10250000
         ICM   R15,B'1110',SDWAGR15    R15>FF?                          10260000
         BZ    DIAG044                 NO, JUMP                         10270000
DIAG042  MVC   ABCODE+10(3),BLANKS     GET RID OF '-04'                 10280000
*                                                                       10290000
DIAG044  L     R15,TCBTIO              MY TIOT                          10300000
         LA    R1,MSG60                                                 10310041
         MVC   MSG60,BLANKS                                             10320041
         MVC   0(8,R1),0(R15)          JOBNAME                          10330000
         CLI   16(R15),C' '                                             10340000
         BNH   DIAG046                                                  10350000
         LA    R1,1(,R1)                                                10360000
         CLI   0(R1),C' '                                               10370000
         BNE   *-8                                                      10380000
         MVI   0(R1),C'.'                                               10390000
         MVC   1(8,R1),16(R15)         PROCSTEP                         10400000
DIAG046  LA    R1,1(,R1)                                                10410000
         CLI   0(R1),C' '                                               10420000
         BNE   *-8                                                      10430000
         MVI   0(R1),C'.'                                               10440000
         MVC   1(8,R1),8(R15)          STEPNAME                         10450000
         TIME  DEC                                                      10460000
         STM   R0,R1,WKCELL1           TIME, DATE                       10470000
*                                                                       10480000
DIAG050  L     R1,CVTPTR(,0)           CVT ADDRESS                      10490000
         USING CVTMAP,R1                                                10500000
         MVI   SPLEVEL,1               MVS/370                      370 10510000
         TM    CVTDCB,CVTMVSE          XA FLAG ON?                      10520000
         BNO   DIAG055                 NO, JUMP                         10530000
         MVI   SPLEVEL,2               MVS/XA                           10540000
         AIF   ('&SYSSPLV' LT '3').DIAG55      MVS/XA MACLIB, JUMP      10550011
         TM    CVTDCB,CVTOSEXT         CHECK OSLVL EXTENSION            10560000
         BNO   DIAG055                 NO, JUMP                         10570000
         TM    CVTOSLVL,CVTXAX         CHECK FOR ESA FLAG               10580000
         BNO   DIAG055                 NO, JUMP                         10590000
         MVI   SPLEVEL,3               MVS SP/3                         10600000
         AIF   ('&SYSSPLV' LT '4').DIAG55      ESA V3 MACLIB, JUMP      10610034
         TM    CVTOSLVL,CVTH4410       CHECK FOR ESA V4 FLAG            10620034
         BNO   DIAG055                 NO, JUMP                         10630034
         MVI   SPLEVEL,4               MVS SP/4                         10640034
.DIAG55  ANOP                                                           10650011
DIAG055  SH    R1,=Y(CVTMAP-CVTFIX)    POINT TO CVT PREFIX              10660000
         USING CVTFIX,R1                                                10670000
         STRING '1&HDR - ',ABCODE,5X,(MSG60,,L),                       X10680041
               2X,(WKCELL1+4,P,YYYY-MM-DD),            YYYY-MM-DD      X10690047
               ' (',(WKCELL1+4+1,1,X),'.',(WKCELL1+4+2,P,R3Z),') ',    X10700055
               (WKCELL1,1,X),':',(WKCELL1+1,1,X),':',(WKCELL1+2,1,X),  X10710055
               2X,(CVTMDL,,X),2X,CVTPRODN,                             X10720032
               INTO=TITLE121                                            10730000
         MVC   LINE121,TITLE121        TITLE LINE                       10740039
         MVI   RLINES,0                RESET LINE COUNTER               10750000
         BAL   R14,SPACE1          <== Print line                       10760041
         DROP  R1                      CVTFIX                           10770000
*                                                                       10780000
*        INVOKE ABEND-SPECIFIC DIAG ROUTINE                             10790000
*                                                                       10800000
DIAG060  LA    R1,DIAG094              INDEX                            10810000
         LA    R14,0008                TABLE ENTRY                      10820000
         LA    R15,DIAG095             LIMIT FOR BXLE                   10830000
*LOOP                                                                   10840000
DIAG062  CLC   ABCODE+6(4),4(R1)       COMPARE ABEND CODE               10850000
         BE    DIAG066                 FOUND, JUMP                      10860000
         BXLE  R1,R14,DIAG062                                           10870000
*ENDLOOP                                                                10880000
         LA    R15,S0C0                PROGRAM CHECK RTNE               10890000
         TM    SDWAERRA,SDWAPCHK       IS THIS A PROGRAM CHECK?         10900000
         BO    DIAG067                 YES, JUMP                        10910000
         LA    R15,S013                O/C/E ABEND RTNE                 10920000
         CLI   OCE_CODE,0              IS THIS AN OPEN/CLOSE/EOV ABEND? 10930000
         BNE   DIAG067                 YES, JUMP                        10940000
         B     DIAG999                 NO DIAG FOR THIS ABEND           10950000
*                                                                       10960000
DIAG066  L     R15,000(,R1)            ADDR OF DIAG RTNE                10970000
DIAG067  BALR  R14,R15             <== CALL THE ROUTINE                 10980000
         B     DIAG999                 NO DIAG FOR THIS ABEND           10990000
*                                                                       11000000
DIAG094  DC    A(S001),C'S001'         SAM                              11010000
DIAG095  DC    A(S001),C'S002'         SAM                              11020000
*                                                                       11030000
DIAG999  END_PROC                                                       11040032
*                                                                       11050000
*---------------------------------------------------------------------- 11060000
*        DIAGNOSTIC FOR S001 & S002 ABENDS                              11070000
*---------------------------------------------------------------------- 11080000
*                                                                       11090000
S001     BEGIN_PROC                                                     11100032
         CLI   OCE_CODE,C'E'           EOV SVC?                         11110000
         BNE   S001ZZ                  NO, QUIT                         11120000
         BAL   R14,BLANK1              BLANK LINE                       11130039
         L     R1,FRSTSVRB             LOAD ADDR OF FIRST SVRB          11140000
         SLR   R5,R5                   no DEB                           11150042
         L     R6,RBGRS1-RBPREFIX(,R1) R6 POINTS TO DCB                 11160000
         ICM   R6,B'1000',X00          ZERO HI-ORDER BYTE OF DCB ADDR   11170042
         BAL   R14,SWA000          <== locate DEB/DSAB/SIOT/JFCB/TIOT   11180042
         BAL   R14,VALDCB          <== VALIDATE DCB                     11190000
         LTR   R6,R6                   GOOD DCB?                        11200000
         BZ    S001ZZ                  NO, QUIT                         11210000
         STRING (ABCODE,,T),' OCCURED WHILE PROCESSING DDN=',          X11220039
               DDNAME2,INTO=LINE                                        11230039
         BAL   R14,SPACE1          <== Print line                       11240041
         BAL   R14,PRDCB           <== PRINT DCB                        11250000
**      $PRTDSN DDNAME,INTO=LINE       PRINT ALLOCATION                 11260039
S001ZZ   END_PROC                                                       11270032
*                                                                       11280000
*---------------------------------------------------------------------- 11290000
*        DIAGNOSTIC FOR O/C/E ABENDS                                    11300000
*---------------------------------------------------------------------- 11310000
*                                                                       11320000
S013     BEGIN_PROC                                                     11330032
        #S0C4  S013ZZ                                                   11340000
         L     R6,SDWAGR02             R6 POINTS TO DCB                 11350000
         USING IHADCB,R6                                                11360000
         L     R7,SDWAGR04             R7 POINTS TO O/C/E WORK AREA     11370000
         L     R1,FRSTSVRB             POINT TO 1ST SVRB        @921013 11380000
         CLI   RBWLIC-RBPREFIX(R1),0   THIS RB WAITING?         @921013 11390000
         BE    S013B                   NO, JUMP                 @921013 11400000
         L     R6,RBEXSAVE+00-RBPREFIX(,R1)  GET R2 VALUE       @921013 11410000
         L     R7,RBEXSAVE+08-RBPREFIX(,R1)  GET R4 VALUE       @921013 11420000
S013B    SLR   R5,R5                   no DEB                           11430042
         BAL   R14,SWA000          <== locate DEB/DSAB/SIOT/JFCB/TIOT   11440042
         BAL   R14,VALDCB          <== VALIDATE DCB                     11450000
         LTR   R6,R6                   GOOD DCB?                        11460000
         BZ    S013ZZ                  NO, QUIT                         11470000
         BAL   R14,BLANK1              BLANK LINE                       11480039
         STRING (ABCODE,,T),' OCCURED WHILE PROCESSING DDN=',          X11490039
               DDNAME2,INTO=LINE                                        11500039
         BAL   R14,SPACE1          <== PRINT MESSAGE                    11510039
         BAL   R14,PRDCB           <== PRINT DCB                        11520000
        #S0C4  S013ZZ                                                   11530000
         CLI   0(R7),0                 ANY TAPE LABEL?                  11540000
         BE    S013ZZ                  NO, QUIT                         11550000
         CLC   0(256,R7),0             VALIDATE O/C/E WORK AREA         11560000
        #S0C4  RESET                                                    11570000
         STRING '0   O/C/E WORK AREA:',INTO=LINE121                     11580039
         BAL   R14,SPACE1          <== Print line                       11590041
         LA    R0,X'298'               LENGTH OF O/C/E WORK AREA        11600000
         LR    R1,R7                   PASS ADDRESS                     11610000
         BAL   R14,PDUMP           <== DUMP IT                          11620000
S013ZZ   END_PROC                                                       11630032
         DROP  R6                      WAS IHADCB                       11640000
*                                                                       11650000
*---------------------------------------------------------------------- 11660000
*        DIAGNOSTIC FOR S0CX (PROGRAM CHECK) ABENDS                     11670000
*---------------------------------------------------------------------- 11680000
*                                                                       11690000
S0C0     BEGIN_PROC                                                     11700032
         BAL   R14,BLANK1              BLANK LINE                       11710039
        #SETMASK SDWANXT1              SET ADDRESS CLEAN-UP MASK        11720000
         L     R6,SDWANXT1             NEXT INSTRUCTION ADDRESS         11730000
         N     R6,MASKADDR             CLEAN-UP ADDRESS                 11740000
         SR    R1,R1                                                    11750000
         IC    R1,SDWAILC1             INSTR LEN CODE                   11760000
         CLI   SDWAICD1,X'10'          SEGMENT TRANSLATION EXCEPTION?   11770000
         BE    S0C0F                   YES, JUMP                        11780000
         CLI   SDWAICD1,X'11'          PAGE TRANSLATION EXCEPTION?      11790000
         BE    S0C0F                   YES, JUMP                        11800000
         SR    R6,R1                   POINT TO INSTRUCTION             11810000
*                                                                       11820000
S0C0F    LR    R1,R6                   INSTRUCTION ADDR                 11830000
         BAL   R14,CSVQRY00        <== FIND PROGRAM NAME                11840008
*                                                                       11850000
         IC    R0,SDWAICD1             EXCEPTION CODE IN R0             11860000
         L     R1,=A(PCKTABLE)         START OF PROGRAM-CHECK TABLE     11870000
         BAL   R14,SCANTBL             FIND EXCEPTION NAME              11880000
         BE    S0C0P                   FOUND, JUMP                      11890041
         LA    R1,=C'..UNKNOWN'        FAKE IT                          11900000
         LA    R2,7                    FAKE IT                          11910000
S0C0P    STRING 2X,(2(R1),(R2)),' EXCEPTION OCCURED AT LOCATION ',     X11920039
               ((R6),,X),2X,MSG20,INTO=LINE                             11930039
         BAL   R14,SPACE1          <== PRINT MESSAGE                    11940039
         BAL   R14,PRINTI          <== PRINT INSTRUCTION                11950000
         STRING '  INSTRUCTION IS ',(MSG20,(R1)),INTO=LINE              11960039
         BAL   R14,SPACE1          <== Print line                       11970041
         BAL   R14,EXECUTE         <== PRINT EXECUTED INSTRUCTION       11980000
*                                                                       11990000
         CLI   SDWAICD1,X'10'          SEGMENT TRANSLATION EXCEPTION?   12000000
         BE    S0C5                    YES, JUMP                        12010000
         CLI   SDWAICD1,X'11'          PAGE TRANSLATION EXCEPTION?      12020000
         BNE   S0C0ZZ                  NO, EXIT                         12030000
S0C5     STRING '  ADDRESS CAUSING EXCEPTION: ',                       X12040039
               (SDWATRAN,,X),INTO=LINE                                  12050039
         BAL   R14,SPACE1          <== Print line                       12060041
S0C0ZZ   END_PROC                                                       12070032
*                                                                       12080000
*---------------------------------------------------------------------- 12090000
*        PRINT DATA SET ALLOCATIONS                                     12100000
*---------------------------------------------------------------------- 12110000
*                                                                       12120000
TIOT00   BEGIN_PROC                                                     12130032
         BAL   R14,BLANK1          <== BLANK LINE                       12140039
         L     R1,CVTPTR(,0)           CVT ADDRESS                      12150000
         L     R1,CVTLINK-CVTMAP(,R1)  LINKLIST DCB                     12160013
         LOAD  EP=IEFEB4UV,DCB=(1)                                      12170000
         ST    R0,IEFEB4UV                                              12180000
**       L     R4,PSATOLD-PSA(,0)      MY TCB                           12190039
**       USING TCB,R4                                                   12200039
*                                                                       12210033
TIOT20   L     R5,TCBTIO               TIOT                             12220033
         USING TIOT1,R5                                                 12230000
         L     R6,PSAAOLD-PSA(,0)      MY ASCB                          12240000
         L     R6,ASCBOUCB-ASCB(,R6)   MY OUCB                          12250000
         USING OUCB,R6                                                  12260000
         MVI   MINLINES,8                                               12270000
***      STRING '-  JOBNAME: ',TIOCNJOB,'  STEP: ',(TIOCSTEP+0,8),     X12280032
               '  PROCSTEP: ',(TIOCSTEP+8,8),                          X12290032
               '  PERFORM=',(OUCBNPG,H,L),                             X12300032
               INTO=LINE121                                             12310039
         STRING '  DDNAME  DISP VOLSER   EXCP DATA SET NAME',32X,      X12320039
               'DEVICE   DEVN  MISCELLANEOUS',INTO=LINE                 12330051
         BAL   R14,SPACE1          <== Print line                       12340041
         MVI   LINE,C'0'               CTLCHR                           12350039
         L     R1,PSATOLD-PSA(,0)      MY TCB                           12360033
         L     R1,TCBJSCB-TCB(,R1)     MY JSCB                          12370028
         L     R1,JSCDSABQ-IEZJSCB(,R1)  DSAB QDB                       12380028
         L     R5,DSQFRSTP-DSABQDB(,R1)  FIRST DSAB ON CHAIN            12390028
         USING DSAB,R5                                                  12400028
*LOOP                                                                   12410000
TIOT_GET ICM   R6,B'1111',DSABSIOT     POINT TO SIOT                    12420045
         BNZ   TIOT31                  GOOD ADDRESS, USE IT             12430028
         LA    R6,TENWORDS+4           WORK AREA                        12440028
         ST    R6,TENWORDS             WORK AREA                        12450028
         USING ZB505,R6                                                 12460028
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA                  12470028
         MVC   SWVA,DSABSSVA           SVA OF THE SIOT                  12480028
         SWAREQ FCODE=RL,EPA=TENWORDS,MF=(E,SWAREQL1),UNAUTH=YES        12490028
         L     R6,SWBLKPTR             31-BIT ADDRESS OF SIOT           12500028
         USING INDMSIOT,R6                                              12510028
*                                                                       12520028
TIOT31   L     R7,SJFCBPTR             GET JFCB ADDRESS FROM SIOT       12530028
         USING INFMJFCB,R7                                              12540028
*                                                                       12550028
         MVC   MSG60,BLANKS            CLEAR WORK AREA                  12560041
         MVC   STATUS,BLANKS           CLEAR WORK AREA                  12570000
         MVC   UNITNAME,BLANKS         CLEAR WORK AREA                  12580000
         MVC   VOLSER,BLANKS                                            12590028
         SLR   R1,R1                   EXCP=0                           12600000
         SLR   R3,R3                   NO UCB                           12610028
         MVC   VOLSER(4),SIOTSSNM      SYSIN/SYSOUT                     12620028
         TM    JFCBTSDM,JFCSDS         IS THIS A JES DATA SET?          12630028
         BO    TIOT61                  YES, JUMP                        12640000
         MVC   VOLSER,=C'DUMMY   '     DUMMY DATA SET                   12650000
         TM    SCTSBYT1,SCTDUMMY       DD DUMMY?                        12660028
         BO    TIOT62                  yes, jump                        12670028
         ICM   R3,B'0111',SIOUCBAD     UCB ADDRESS                      12680028
 ORG *-4 UCB above the line                                             12690051
         L     R3,SIOUCBA4             31-BIT UCB ADDRESS               12700051
         USING UCBOB,R3                                                 12710028
         MVC   UNITNAME+8(4),UCBTYP    DEVICE TYPE                      12720028
         BAL   R14,GETUNIT         <== GET UNITNAME                     12730000
         MVC   VOLSER,=C'VIO     '     UNIT=VIO                         12740000
         TM    UCBJBNR,UCBVRDEV        IS THIS A VIO DATA SET?          12750039
         BO    TIOT41                  YES, JUMP                        12760000
         MVC   VOLSER,UCBVOLI          NO, MOVE FIRST VOLSER            12770039
         TR    VOLSER,TRTPRINT         get rid of garbage               12780039
         CLC   VOLSER,UCBVOLI          is the volser ok?                12790039
         BE    TIOT41                  YES, JUMP                        12800039
         MVC   VOLSER,BLANKS           NO, blank it out                 12810039
*                                                                       12820000
TIOT41   BAS   R1,TIOT41IC                                              12830000
         DC    C'NEW',AL1(JFCNEW)                                       12840000
         DC    C'MOD',AL1(JFCMOD)                                       12850000
         DC    C'SHR',AL1(JFCOLD+JFCSHARE)                              12860000
         DC    C'OLD',AL1(JFCOLD)                                       12870000
         DC    C'???',0H'0'                                             12880000
TIOT41TM TM    JFCBIND2,*-*            TEST LABEL TYPE FLAGS            12890000
*--LOOP                                                                 12900000
TIOT41IC IC    R15,3(,R1)              PICK UP MASK FOR "TM"            12910000
         EX    R15,TIOT41TM                                             12920000
         BO    TIOT41X                                                  12930000
         LA    R1,3+1(,R1)             BUMP TABLE PTR                   12940000
         CLI   0(R1),C'?'              END OF TABLE?                    12950000
         BNE   TIOT41IC                NEXT TABLE ENTRY                 12960000
*--ENDLOOP                                                              12970000
TIOT41X  MVC   STATUS,0(R1)            DISP                             12980000
*                                                                       12990000
TIOT43S  TM    UCBFL5,UCBSMS           SMS VOL?     X'20'               13000028
         BZ    TIOT43V                 NO, JUMP                         13010028
         STRING (MSG60,,T),',SMS',INTO=MSG60                            13020041
*                                                                       13030028
TIOT43V  CLC   JFCDSORG,=AL2(JFCORGAM) VSAM DATA SET?                   13040028
         BNE   TIOT46                  NO, JUMP                         13050028
         STRING (MSG60,,T),',VSAM',INTO=MSG60                           13060041
         B     TIOT61                                                   13070031
*                                                                       13080000
TIOT46   CLI   UCBTBYT3,UCB3TAPE       TAPE DEVICE?                     13090000
         BE    TIOT46B                 yes, jump                        13100031
         CLI   UCBTBYT3,UCB3DACC       DASD DEVICE?                     13110031
         BNE   TIOT61                  NO, JUMP                         13120000
         TM    JFCBLTYP,JFCSUL         LABEL=(,SUL) ?                   13130031
         BNO   TIOT61                  no, jump                         13140031
TIOT46B  BAS   R1,TIOT46IC                                              13150031
         DC    C'LTM',AL1(JFCBLTM)                                      13160000
         DC    C'BLP',AL1(JFCBLP)                                       13170000
         DC    C'SUL',AL1(JFCSUL)                                       13180000
         DC    C'AUL',AL1(JFCSUL+JFCBAL)                                13190000
         DC    C'AL ',AL1(JFCBAL)                                       13200000
         DC    C'NSL',AL1(JFCNSL)                                       13210000
         DC    C'SL ',AL1(JFCSL)                                        13220000
         DC    C'NL ',AL1(JFCNL)                                        13230000
         DC    C'???',0H'0'                                             13240000
TIOT46TM TM    JFCBLTYP,*-*            TEST LABEL TYPE FLAGS            13250000
*--LOOP                                                                 13260000
TIOT46IC IC    R15,3(,R1)              PICK UP MASK FOR "TM"            13270000
         EX    R15,TIOT46TM                                             13280000
         BO    TIOT46X                                                  13290000
         LA    R1,3+1(,R1)             BUMP TABLE PTR                   13300000
         CLI   0(R1),C'?'              END OF TABLE?                    13310000
         BNE   TIOT46IC                NEXT TABLE ENTRY                 13320000
*--ENDLOOP                                                              13330000
TIOT46X  LH    R0,JFCBFLSQ             PICK UP FILE SEQUENCE NUMBER     13340000
         LTR   R0,R0                   LABEL=0?                         13350000
         BNZ   TIOT46Y                 NO, JUMP                         13360000
         LA    R0,0001                 YES, CHANGE TO LABEL=1           13370000
TIOT46Y  STRING ',',((R0),,L),',',((R1),3),INTO=MSG60                   13380041
*                                                                       13390000
TIOT61   L     R0,DSABTIOT             POINT TO CURRENT TIOT ENTRY      13400028
         SL    R0,TCBTIO               CHANGE ADDRESS TO OFFSET         13410000
         BAL   R14,EXCP00          <== GET EXCP COUNT IN R1             13420000
*                                                                       13430016
TIOT62   STRING ((R1),,R6B),INTO=WKCELL2                                13440016
         CL    R1,=F'100000'           OVER 100K?                       13450000
         BL    TIOT63                  NO, JUMP                         13460028
         SLR   R0,R0                   YES, DIVIDE BY 1000              13470000
         LA    R1,500(,R1)             YES, DIVIDE BY 1000              13480000
         D     R0,=F'1000'             YES, DIVIDE BY 1000              13490000
         STRING ((R1),,R5B),'K',INTO=WKCELL2                            13500041
*                                                                       13510028
TIOT63   TM    JFCBTSDM,JFCSDS         IS THIS A JES DATA SET?          13520028
         BZ    TIOT64                  NO, JUMP                         13530028
         CLI   SCTOUTPN,C' '           DO WE HAVE A CLASS?              13540028
         BE    TIOT64                  NO, JUMP                         13550028
         STRING ',SYSOUT=',SCTOUTPN,INTO=MSG60                          13560041
         ICM   R0,B'0111',JFCOUTLI     OUTLIM=0?                        13570028
         BE    TIOT64                  YES, JUMP                        13580028
         STRING (MSG60,,T),',OUTLIM=',(JFCOUTLI,FL3,L),INTO=MSG60       13590041
*                                                                       13600000
TIOT64   LTR   R3,R3                   DO WE HAVE A UCB?                13610028
         BNZ   TIOT64U                 YES, JUMP                        13620051
         MVC   UCB_NAME,BLANKS                                          13630051
         LA    R3,BLANKS               NO, POINT TO A DUMMY UCB         13640028
         B     TIOT65                                                   13650051
TIOT64U  UCBDEVN DEVN=UCB_NAME         get UCB name (ESA V4 only)       13660051
*                                                                       13670000
TIOT65   MVC   EYECATCH(L'JFCBDSNM),JFCBDSNM MOVE DATA SET NAME         13680051
         TM    JFCBIND1,JFCPDS         DO WE HAVE A MEMBER NAME?        13690000
         BZ    TIOT71                  NO, JUMP                         13700028
         STRING (JFCBDSNM,,T),'(',(JFCBELNM,,T),')',INTO=EYECATCH       13710041
TIOT65L  CLI   EYECATCH+L'JFCBDSNM,C' ' OVERFLOW?                       13720041
         BE    TIOT71                  NO, JUMP                         13730028
         MVC   EYECATCH(60),EYECATCH+1 SHIFT DSN(MBR) TO THE LEFT       13740041
         B     TIOT65L                 TRY AGAIN                        13750000
*                                                                       13760028
TIOT71   ICM   R0,B'0011',DSABOPCT     Any DCB OPEN?                    13770028
         BZ    TIOT_PRT                NO, JUMP                         13780051
         STRING (MSG60,,T),',OPEN',INTO=MSG60                           13790041
*                                                                       13800000
TIOT_PRT STRING 2X,SCTDDNAM,1X,STATUS,1X,VOLSER,1X,(WKCELL2,7),        X13810028
               (EYECATCH,L'JFCBDSNM),1X,UNITNAME,1X,UCB_NAME,2X,       X13820051
               (MSG60+1,L'MSG60-1),INTO=LINE                            13830041
         BAL   R14,SPACE1          <== Print line                       13840041
*                                                                       13850000
TIOT_NXT L     R5,DSABFCHN             NEXT DSAB                  -     13860028
         LTR   R5,R5                   end of chain?                    13870028
         BNZ   TIOT_GET                NOT YET, LOOP THROUGH TIOT       13880000
*ENDLOOP                                                                13890000
         DROP  R5,R6,R7,R3             DSAB, SIOT, JFCB, UCB            13900028
         DELETE EP=IEFEB4UV                                             13910000
TIOT90   END_PROC                                                       13920032
*                                                                       13930000
*---------------------------------------------------------------------- 13940000
*                                                                       13950000
*        PRINT PSW, REGISTERS                                           13960000
*                                                                       13970000
*              SDWA DATA (PSW1/PSW2)                                    13980000
*              LAST PRB DATA (IF REQUIRED)                              13990000
*                                                                       14000000
*---------------------------------------------------------------------- 14010000
*                                                                       14020000
PSW00    BEGIN_PROC                                                     14030032
         BAL   R14,BLANK1          <== BLANK LINE                       14040039
        #SETMASK SDWANXT1              SET ADDRESS CLEAN-UP MASK        14050000
         L     R1,SDWANXT1             NEXT INSTRUCTION                 14060000
         BAL   R14,CSVQRY00        <== FIND CORRESPONDING CDE           14070008
PSW11    STRING 'PSW1: ',(SDWAEC1,4,X),1X,(SDWAEC1+4,4,X),2X,MSG20,    X14080039
               '  ILC: ',(SDWAILC1,FL1,L),                             X14090032
               '  INTC: ',(SDWAINC1,,X),INTO=LINE                       14100039
         MVI   MINLINES,8                                               14110000
         BAL   R14,SPACE1          <== Print line                       14120041
         L     R1,SDWANXT1             NEXT INSTRUCTION                 14130000
         N     R1,MASKADDR             CLEAN UP ADDRESS                 14140000
         SH    R1,=H'6'                6 BYTES BEFORE                   14150000
         BNP   PSW15                   LOW CORE                         14160000
        #S0C4  PSW15                                                    14170000
         CLC   0(12,R1),0(R1)          VALIDATE 12 BYTES                14180000
        #S0C4  RESET                                                    14190000
         STRING ' DATA AROUND PSW1 ADDR:  ',INTO=LINE,                 X14200039
               (00(R1),2,X),1X,(02(R1),2,X),1X,(04(R1),2,X),1X,        X14210032
               (06(R1),2,X),1X,(08(R1),2,X),1X,(10(R1),2,X),1X          14220000
         BAL   R14,SPACE1          <== Print line                       14230041
*SW15    BAL   R14,EXECUTE         <== PROCESS 'EX' OPCODE (X'44')      14240000
PSW15    STRING '0   GPR00-03: ',(SDWAGR00,,X),2X,(SDWAGR01,,X),2X,    X14250032
               (SDWAGR02,,X),2X,(SDWAGR03,,X),INTO=LINE121              14260039
         BAL   R14,SPACE1          <== Print line                       14270041
         STRING '   GPR04-07: ',(SDWAGR04,,X),2X,(SDWAGR05,,X),2X,     X14280039
               (SDWAGR06,,X),2X,(SDWAGR07,,X),INTO=LINE                 14290039
         BAL   R14,SPACE1          <== Print line                       14300041
         STRING '   GPR08-11: ',(SDWAGR08,,X),2X,(SDWAGR09,,X),2X,     X14310039
               (SDWAGR10,,X),2X,(SDWAGR11,,X),INTO=LINE                 14320039
         BAL   R14,SPACE1          <== Print line                       14330041
         STRING '   GPR12-15: ',(SDWAGR12,,X),2X,(SDWAGR13,,X),2X,     X14340039
               (SDWAGR14,,X),2X,(SDWAGR15,,X),INTO=LINE                 14350039
         BAL   R14,SPACE1          <== Print line                       14360041
*                                                                       14370000
PSW20    CLC   SDWAEC1,SDWAEC2         PSW1=PSW2?                       14380000
         BE    PSW99                   YES, DON'T BOTHER                14390000
         L     R1,SDWANXT2             NEXT INSTRUCTION                 14400000
         LTR   R1,R1                   ANY DATA THERE?                  14410000
         BZ    PSW31                   NONE, DON'T BOTHER       @911019 14420000
        #SETMASK SDWANXT2              SET ADDRESS CLEAN-UP MASK        14430000
         BAL   R14,CSVQRY00        <== FIND CORRESPONDING CDE           14440008
         BAL   R14,BLANK1          <== BLANK LINE                       14450039
         MVI   MINLINES,8                                               14460000
         STRING 'PSW2: ',(SDWAEC2,4,X),1X,(SDWAEC2+4,4,X),2X,MSG20,    X14470039
               '  ILC: ',(SDWAILC2,FL1,L),                             X14480032
               '  INTC: ',(SDWAINC2,,X),ORIGIN2,INTO=LINE               14490039
         BAL   R14,SPACE1          <== Print line                       14500041
         L     R1,SDWANXT2             NEXT INSTRUCTION                 14510000
         N     R1,MASKADDR             CLEAN UP ADDRESS                 14520000
         SH    R1,=H'6'                6 BYTES BEFORE                   14530000
        #S0C4  PSW25                                                    14540000
         CLC   0(12,R1),0(R1)          VALIDATE 12 BYTES                14550000
        #S0C4  RESET                                                    14560000
         STRING ' DATA AROUND PSW2 ADDR:  ',INTO=LINE,                 X14570039
               (00(R1),2,X),1X,(02(R1),2,X),1X,(04(R1),2,X),1X,        X14580032
               (06(R1),2,X),1X,(08(R1),2,X),1X,(10(R1),2,X),1X          14590000
         BAL   R14,SPACE1          <== Print line                       14600041
PSW25    STRING '0   GPR00-03: ',(SDWASR00,,X),2X,(SDWASR01,,X),2X,    X14610032
               (SDWASR02,,X),2X,(SDWASR03,,X),INTO=LINE121              14620039
         BAL   R14,SPACE1          <== Print line                       14630041
         STRING '   GPR04-07: ',(SDWASR04,,X),2X,(SDWASR05,,X),2X,     X14640039
               (SDWASR06,,X),2X,(SDWASR07,,X),INTO=LINE                 14650039
         BAL   R14,SPACE1          <== Print line                       14660041
         STRING '   GPR08-11: ',(SDWASR08,,X),2X,(SDWASR09,,X),2X,     X14670039
               (SDWASR10,,X),2X,(SDWASR11,,X),INTO=LINE                 14680039
         BAL   R14,SPACE1          <== Print line                       14690041
         STRING '   GPR12-15: ',(SDWASR12,,X),2X,(SDWASR13,,X),2X,     X14700039
               (SDWASR14,,X),2X,(SDWASR15,,X),INTO=LINE                 14710039
         BAL   R14,SPACE1          <== Print line                       14720041
*                                                                       14730000
*        PRINT PSW AND REGS FOR LAST PRB IF DIFFERENT FROM PSW1/2       14740000
*                                                                       14750000
PSW31    L     R6,LASTPRB              LAST PRB                         14760000
         USING RBPREFIX,R6                                              14770000
         CLC   SDWAEC1,RBOPSW          SAME AS PSW1 IN SDWA?            14780000
         BE    PSW99                   YES, JUMP                        14790022
         CLC   SDWAEC2,RBOPSW          SAME AS PSW2 IN SDWA?            14800000
         BE    PSW99                   YES, JUMP                        14810022
        #SETMASK RBOPSW+4              SET ADDRESS CLEAN-UP MASK        14820000
         L     R1,RBOPSW+4             NEXT INSTRUCTION                 14830000
         BAL   R14,CSVQRY00        <== FIND CORRESPONDING CDE           14840008
         BAL   R14,BLANK1          <== BLANK LINE                       14850039
         MVI   MINLINES,8                                               14860000
         STRING 'PSW3: ',(RBOPSW,4,X),1X,(RBOPSW+4,4,X),2X,MSG20,      X14870039
               '  ILC: ',(RBWLIC+1,FL1,L),                             X14880032
               '  INTC: ',(RBWLIC+2,2,X),                              X14890032
               '  (LASTPRB)',INTO=LINE                                  14900039
         BAL   R14,SPACE1          <== Print line                       14910041
         L     R1,RBOPSW+4             NEXT INSTRUCTION                 14920000
         N     R1,MASKADDR             CLEAN UP ADDRESS                 14930000
         SH    R1,=H'6'                6 BYTES BEFORE                   14940000
        #S0C4  PSW35                                                    14950000
         CLC   0(12,R1),0(R1)          VALIDATE 12 BYTES                14960000
        #S0C4  RESET                                                    14970022
         STRING ' DATA AROUND PSW3 ADDR:  ',INTO=LINE,                 X14980039
               (00(R1),2,X),1X,(02(R1),2,X),1X,(04(R1),2,X),1X,        X14990032
               (06(R1),2,X),1X,(08(R1),2,X),1X,(10(R1),2,X),1X          15000000
         BAL   R14,SPACE1          <== Print line                       15010041
PSW35    L     R6,FRSTSVRB             NEXT IRB/SVRB                    15020000
         STRING '0   GPR00-03: ',(RBGRS0,,X),2X,(RBGRS1,,X),2X,        X15030032
               (RBGRS2,,X),2X,(RBGRS3,,X),INTO=LINE121                  15040039
         BAL   R14,SPACE1          <== Print line                       15050041
         STRING '   GPR04-07: ',(RBGRS4,,X),2X,(RBGRS5,,X),2X,         X15060039
               (RBGRS6,,X),2X,(RBGRS7,,X),INTO=LINE                     15070039
         BAL   R14,SPACE1          <== Print line                       15080041
         STRING '   GPR08-11: ',(RBGRS8,,X),2X,(RBGRS9,,X),2X,         X15090039
               (RBGRS10,,X),2X,(RBGRS11,,X),INTO=LINE                   15100039
         BAL   R14,SPACE1          <== Print line                       15110041
         STRING '   GPR12-15: ',(RBGRS12,,X),2X,(RBGRS13,,X),2X,       X15120039
               (RBGRS14,,X),2X,(RBGRS15,,X),INTO=LINE                   15130039
         BAL   R14,SPACE1          <== Print line                       15140041
         DROP  R6                      PRB                              15150022
PSW99    END_PROC                                                       15160032
*                                                                       15170039
*---------------------------------------------------------------------- 15180039
*        PRINT JOB/STEP INFORMATION                                     15190039
*---------------------------------------------------------------------- 15200039
*                                                                       15210039
JOBSTEP  BEGIN_PROC                                                     15220039
         BAL   R14,BLANK1              blank line                       15230039
         STRING 'JOB/STEP INFORMATION',INTO=LINE                        15240039
         BAL   R14,SPACE2              Double Space                     15250039
*                                                                       15260039
         L     R4,TCBJSCB              job step control block           15270039
         USING IEZJSCB,R4                                               15280039
         L     R5,JSCBJCT              Job Control Table                15290039
         USING JCT,R5                                                   15300039
         SLR   R7,R7                                                    15310039
         ICM   R7,B'0111',JCTACTAD     SVA OF ACT                       15320039
         USING IEFAACTB-16,R7                                           15330039
*                                                                       15340039
         STRING '  //',(JCTJNAME,,T),' JOB ',INTO=LINE                  15350042
         MVI   WKCELL3,C' '            no comma                         15360044
         MVI   WKCELL3+1,C'('          begin sub-list                   15370044
         SLR   R3,R3                                                    15380042
         ICM   R3,B'0001',ACTJNFLD     # OF ACCT FIELDS                 15390042
         BZ    JOBS120                 no account information           15400042
         CLC   =X'0100',ACTJNFLD       one null sub-field?              15410044
         BE    JOBS120                 yes, ignore                      15420044
         LA    R1,ACTJNFLD+1           first sub-parm                   15430042
         SLR   R2,R2                                                    15440042
*loop                                                                   15450042
JOBS114  ICM   R2,B'0001',0(R1)        size of sub-parm                 15460042
         STRING (1(R1),(R2)),INTO=MSG60                                 15470042
         BAL   R14,JOBS155             append new text to current line  15480042
         LA    R1,1(R2,R1)             skip current sub-field           15490042
         BCT   R3,JOBS114              next sub-field                   15500042
*endloop                                                                15510042
         LA    R15,LINE(R15)           last pos in line                 15520042
         MVI   0(R15),C')'             close sub-list                   15530042
         B     JOBS121                                                  15540044
*                                                                       15550042
JOBS120  MVI   WKCELL3+1,C','          ACCT field missing               15560044
*                                                                       15570044
JOBS121  CLC   ACTPRGNM,BLANKS         do we have a PROGRAMMER'S NAME ? 15580044
         BE    JOBS122                 no, jump                         15590042
         STRING (ACTPRGNM,,T),INTO=MSG60                                15600042
         BAL   R14,JOBS155             append new text to current line  15610042
*                                                                       15620042
JOBS122  CLI   JCTJCSMF,X'E0'          TSO user?                        15630042
         BE    JOBS125                 yes, jump                        15640042
         CLI   JCTJCSMF,X'E0'          Started Task?                    15650044
         BE    JOBS125                 yes, jump                        15660044
         STRING 'CLASS=',JCTJCSMF,INTO=MSG60                            15670042
         BAL   R14,JOBS155             append new text to current line  15680042
*                                                                       15690042
JOBS125  STRING 'MSGCLASS=',JCTJMGPO,INTO=MSG60                         15700042
         BAL   R14,JOBS155             append new text to current line  15710042
*                                                                       15720042
JOBS130  STRING 'MSGLEVEL=(1,1)',INTO=MSG60     MSGLEVEL=(1,1)          15730042
         TM    JCTJMGLV,INCMMGL1       MSGLEVEL=1 ?                     15740042
         BO    JOBS133                 yes, jump                        15750042
         MVI   MSG60+10,C'2'           MSGLEVEL=(2,1)                   15760042
         TM    JCTJMGLV,INCMMGL2       MSGLEVEL=2 ?                     15770042
         BO    JOBS133                 yes, jump                        15780042
         MVI   MSG60+10,C'0'           MSGLEVEL=(0,1)                   15790042
JOBS133  TM    JCTJMGLV,INCMALL        MSGLEVEL=(,1) ?                  15800042
         BO    JOBS134                 yes, jump                        15810042
         MVI   MSG60+12,C'0'           MSGLEVEL=(,0)                    15820042
JOBS134  BAL   R14,JOBS155             append new text to current line  15830042
*                                                                       15840042
JOBS136  SLR   R6,R6                                                    15850042
         ICM   R6,B'0111',JCTJCTX      SVA OF JCTX                      15860042
         USING JCTX,R6                                                  15870042
         L     R1,JCTXJTL              JOB TIME limit (ESA410)          15880042
         CLI   SPLEVEL,4               running on ESA 410?              15890042
         BNL   JOBS136T                yes, jump                        15900042
         SLR   R1,R1                                                    15910042
         ICM   R1,B'0111',JCTJMRTL     JOB TIME limit (XA,ESA313)       15920042
JOBS136T LTR   R1,R1                   TIME=0 (TSO) ?                   15930042
         BZ    JOBS140                 yes, exit                        15940042
         SLR   R0,R0                                                    15950042
         D     R0,=F'100'              get time in seconds              15960042
         SLR   R0,R0                                                    15970042
         D     R0,=F'60'               get time in minutes              15980042
         STRING 'TIME=(',((R1),,L),',',((R0),,L),')',INTO=MSG60         15990042
         BAL   R14,JOBS155             append new text to current line  16000042
*                                                                       16010042
JOBS140  L     R6,JSCSCT               Current step's SCT               16020042
         USING SCT,R6                                                   16030042
         LH    R2,JCTEQREG             region parm from job card        16040042
         CH    R2,=H'16383'            region > 16M ?                   16050042
         BE    JOBS146                 yes, jump                        16060042
         CLM   R2,B'0111',SCTRGSZ      same as REGION on EXEC card ?    16070042
         BNE   JOBS147                 no, exit                         16080042
JOBS146  ICM   R2,B'0111',SCTRGSZ      yes, use value from EXEC card    16090042
         STRING 'REGION=',((R2),,L),'K',INTO=MSG60                      16100042
         BAL   R14,JOBS155             append new text to current line  16110042
         BSM   R5,0                    make R5 negative                 16120042
*                                                                       16130042
JOBS147  TM    JCTSTAT2,JCTPERFM       PERFORM specified on EXEC?       16140042
         BZ    JOBS149                 no, jump                         16150042
         STRING 'PERFORM=',(SCTPRFMF,H,L),INTO=MSG60                    16160042
         BAL   R14,JOBS155             append new text to current line  16170042
         BSM   R6,0                    make R6 negative                 16180042
*                                                                       16190042
JOBS149  L     R2,PSAAOLD-PSA(,0)      MY ASCB                          16200042
         USING ASCB,R2                                                  16210042
         L     R3,ASCBASXB             MY ASXB                          16220042
         USING ASXB,R3                                                  16230042
         STRING 'USER=',(ASXBUSER,,T),INTO=MSG60                        16240042
         BAL   R14,JOBS155             append new text to current line  16250042
         ICM   R3,B'1111',ASXBSENV     MY ACEE                          16260042
         BNP   JOBS149Z                no RACF, exit                    16270042
         USING ACEE,R3                                                  16280042
         STRING 'GROUP=',(ACEEGRPN,,T),INTO=MSG60                       16290042
         BAL   R14,JOBS155             append new text to current line  16300042
JOBS149Z BAL   R14,SPACE2          <== Double Space                     16310042
         B     JOBS162                                                  16320042
*                                                                       16330042
*        append MSG60 to LINE                                           16340042
*                                                                       16350042
JOBS155  ST    R14,WKCELL3+4           save return address              16360042
         LTR   R0,R15                  save length                      16370042
         BZ    JOBS155C                zero length, jump                16380042
         LA    R14,MSG60               FIRST POS                        16390042
JOBS155L CLI   0(R14),C' '             imbedded space?                  16400042
         BE    JOBS155Q                YES, EXIT                        16410042
**MSGL   CLI   0(R14),C','             imbedded comma?                  16420042
**MSGL   BE    JOBS155Q                YES, EXIT                        16430042
         LA    R14,1(,R14)             BUMP POINTER                     16440042
         BCT   R15,JOBS155L            SCAN AREA                        16450042
         B     JOBS155C                YES, EXIT                        16460042
JOBS155Q MVC   EYECATCH,MSG60          move to work area                16470042
         STRING '''',(EYECATCH,(R0)),'''',INTO=MSG60                    16480042
         LR    R0,R15                  save length                      16490042
JOBS155C STRING (LINE,,T),(WKCELL3,2,T),(MSG60,(R0)),',',INTO=EYECATCH  16500044
         CL    R15,=F'80'              overflow?                        16510042
         BH    JOBS155O                yes, jump                        16520042
         STRING (LINE,,T),(WKCELL3,2,T),(MSG60,(R0)),INTO=LINE          16530044
         B     JOBS155X                                                 16540042
JOBS155O STRING (LINE,,T),',',INTO=LINE                                 16550042
         BAL   R14,SPACE1          <== Single space                     16560042
         STRING '  // ',(MSG60,(R0)),INTO=LINE                          16570042
JOBS155X MVI   WKCELL3,C','            next parm needs a comma          16580042
         MVI   WKCELL3+1,C' '          next parm needs no space         16590044
         L     R14,WKCELL3+4           return address                   16600042
         BR    R14                                                      16610042
*                                                                       16620039
JOBS162  MVC   WKCELL1(5),=C'Below'    default placement for SWA        16630039
         TM    JCTSTAT2,JCTSWAUP       SWA above?                       16640039
         BZ    JOBS163                 no, jump                         16650039
         MVC   WKCELL1(5),=C'Above'    yes, remember it                 16660039
JOBS163  MVC   WKCELL2(3),=C'No '      default                          16670039
         TM    JCTSTAT2,JCTBLP         BLP authorized?                  16680039
         BZ    JOBS164                 no, jump                         16690039
         MVC   WKCELL2(3),=C'Yes'      yes, remember it                 16700039
JOBS164  MVC   WKCELL3(3),=C'No '      default                          16710039
         TM    JSCBJJSB,JSCBJNLF       Job Journaling active?           16720039
         BO    JOBS168                 no, jump                         16730039
         MVC   WKCELL3(3),=C'Yes'      yes, remember it                 16740039
JOBS168  L     R3,JSCBSSIB             point to the SSIB                16750039
         USING SSIB,R3                                                  16760039
         STRING '    Sub-System(',SSIBSSNM,')',                        X16770039
               '  JOB-Id(',SSIBJBID,')',                               X16780039
               '  SWA(',(WKCELL1,5),')',     SWA(below/above)          X16790039
               '  BLP(',(WKCELL2,3,T),')',     BLP(yes/no)             X16800039
               '  Journal(',(WKCELL3,3,T),')', Job Journal (yes/no)    X16810039
               '  ASID(X''',(ASCBASID,,X),''')',                       X16820039
               INTO=LINE                                                16830039
         BAL   R14,SPACE1          <== Single space                     16840039
*                                                                       16850039
JOBS170  ICM   R0,B'0111',JCTJMRJD     OS/390 R3 Bug?                   16860049
         BZ    JOBS172                 yes, use Y2K date from JCTX      16870049
         ZAP   WKCELL1,JCTJMRJD        yydddF   (prior to HBB4430)      16880049
         ZAP   WKCELL2,JCTSSD          yydddF   (prior to HBB4430)      16890049
         B     JOBS173                 continue                         16900049
JOBS172  EQU   *                                                        16910049
         SLR   R14,R14                                                  16920049
         ICM   R14,B'0111',JCTJCTX     SVA OF JCTX                      16930049
         ZAP   WKCELL1,JCTXJMRD-JCTX(,R14) 0cyydddF (HBB4430 and up)    16940049
         ZAP   WKCELL2,JCTXSSD-JCTX(,R14) 0cyydddF (HBB4430 and up)     16950049
JOBS173  EQU   *                                                        16960049
         SLR   R0,R0                                                    16970049
         SLR   R1,R1                                                    16980039
         ICM   R1,B'0111',JCTJMRJT     job start time (binary)          16990039
         D     R0,=F'00360000'         GET HOURS                        17000039
         LR    R2,R1                   HH                               17010039
         LR    R1,R0                   REMAINDER                        17020039
         SLR   R0,R0                                                    17030039
         D     R0,=F'6000'             GET MINUTES IN R1                17040039
         LR    R3,R1                   MM                               17050039
         LR    R1,R0                   REMAINDER                        17060039
         SLR   R0,R0                                                    17070039
         D     R0,=F'100'              GET SECONDS IN R1                17080039
         STRING '    Job Start Date: ',(WKCELL1,P,YYYY-MM-DD),         X17090049
               ' (',(WKCELL1+4+1,1,X),'.',(WKCELL1+4+2,P,R3Z),') ',    X17100057
               '  Time: ',((R2),,R2Z),':',((R3),,R2Z),':',((R1),,R2Z), X17110057
               INTO=LINE                                                17120039
         BAL   R14,SPACE2          <== Double space                     17130039
*                                                                       17140039
*        CPU time used (JOB)                                            17150039
*                                                                       17160039
JOBS180  SLR   R0,R0                                                    17170039
         L     R1,ACTJTIME             Accumulated TCB time             17180039
         A     R1,JCTSRBT              Accumulated SRB time             17190039
         BZ    JOBS200                 zero, quit                       17200039
         D     R0,=F'00360000'         GET HOURS                        17210039
         LR    R2,R1                   HH                               17220039
         LR    R1,R0                   REMAINDER                        17230039
         SLR   R0,R0                                                    17240039
         D     R0,=F'6000'             GET MINUTES IN R1                17250039
         LR    R3,R1                   MM                               17260039
         LR    R1,R0                   REMAINDER                        17270039
         SLR   R0,R0                                                    17280039
         D     R0,=F'100'              GET SECONDS IN R1                17290039
         STRING '    CPU time used: ',((R2),,R3Z),'H',((R3),,R2Z),'M', X17300039
               ((R1),,R2Z),'S',((R0),,R2Z),                            X17310039
               INTO=LINE                                                17320039
**           1X,(ACTJTIME,,X),1X,(JCTSRBT,,X),                       X  17330039
         BAL   R14,SPACE2          <== Double Space                     17340039
*                                                                       17350039
*        //stepname EXEC PGM=program,REGION=1234K,TIME=(30,0)           17360039
*                                                                       17370039
JOBS200  SLR   R7,R7                   SCTX address                     17380039
         ICM   R7,B'0111',SCTXBTTR     address of SCTX (SCT extension)  17390039
         USING SCTX,R7                                                  17400039
         SLR   R0,R0                                                    17410039
         ICM   R1,B'1111',SCTXSTL      step time limit (ESA410)         17420039
         BNZ   *+8                     OK, jump                         17430039
         ICM   R1,B'0111',SCTSTIME     step time limit (XA/ESA310)      17440039
         D     R0,=F'100'              get it in seconds                17450039
         SLR   R0,R0                                                    17460039
         D     R0,=F'60'               get it in minutes                17470039
         STRING '  //',(SCTSNAME,,T),' EXEC PGM=',(SCTPGMNM,,T),       X17480039
               ',TIME=(',((R1),,L),',',((R0),,L),')',                  X17490039
               INTO=LINE                                                17500039
*                                                                       17510039
         LTR   R5,R5                   REGION specified on JOB card?    17520039
         BM    JOBS230                 yes, jump                        17530039
         STRING (LINE,,T),',REGION=',(SCTRGSZ,FL3,L),'K',INTO=LINE      17540039
JOBS230  LH    R2,SCTNIUSL             max number of DD stmts           17550039
         SH    R2,SCTLALOC             minus # of godd DDs              17560039
         BZ    JOBS240                 zero, jump                       17570039
         STRING (LINE,,T),',DYNAMNBR=',((R2),,L),INTO=LINE              17580039
JOBS240  EQU   *                                                        17590039
         LTR   R6,R6                   PERFORM specified on JOB?        17600039
         BO    JOBS250                 yes, jump (JOB overrides EXEC)   17610039
         TM    SCTSDP,SCTEPRFM         PERFORM specified on EXEC?       17620039
         BZ    JOBS250                 no, jump                         17630039
         STRING (LINE,,T),',PERFORM=',(SCTPRFMF,H,L),INTO=LINE          17640039
JOBS250  EQU   *                                                        17650039
         SLR   R2,R2                                                    17660039
         ICM   R2,B'0011',SCTSEXEC     PARM length                      17670039
         BZ    JOBS270                 no PARM, jump                    17680039
         STRING (LINE,,T),',',INTO=LINE                                 17690039
         BAL   R14,SPACE1          <== next line                        17700039
         STRING '  // PARM=''',(SCTXPARM,(R2)),'''',                   X17710039
               INTO=LINE                                                17720039
JOBS270  BAL   R14,SPACE2          <== Double Space                     17730039
*                                                                       17740039
JOBS300  L     R6,PSAAOLD-PSA(,0)      ASCB                             17750039
         USING ASCB,R6                                                  17760039
         L     R7,ASCBOUCB             MY OUCB                          17770039
         USING OUCB,R7                                                  17780039
         STRING '    PERFORM(',(OUCBSPG,H,L),')',                      X17790039
               '   DPRTY(X''',(ASCBDP,,X),''')',  dispatching priority X17800039
               INTO=LINE                                                17810039
         BAL   R14,SPACE1          <== Print line                       17820041
*                                                                       17830039
JOBS410  SLR   R0,R0                                                    17840039
         SLR   R1,R1                                                    17850039
         ICM   R1,B'0111',JCTJMRSS     Step start time (binary)         17860039
         D     R0,=F'00360000'         GET HOURS                        17870039
         LR    R2,R1                   HH                               17880039
         LR    R1,R0                   REMAINDER                        17890039
         SLR   R0,R0                                                    17900039
         D     R0,=F'6000'             GET MINUTES IN R1                17910039
         LR    R3,R1                   MM                               17920039
         LR    R1,R0                   REMAINDER                        17930039
         SLR   R0,R0                                                    17940039
         D     R0,=F'100'              GET SECONDS IN R1                17950039
         STRING '    Step Start Date: ',(WKCELL2,P,YYYY-MM-DD),        X17960049
               ' (',(WKCELL1+4+1,1,X),'.',(WKCELL1+4+2,P,R3Z),') ',    X17970057
               '  Time: ',((R2),,R2Z),':',((R3),,R2Z),':',((R1),,R2Z), X17980057
               INTO=LINE                                                17990039
         BAL   R14,SPACE1          <== Print line                       18000041
*                                                                       18010039
*        CPU TIME (STEP)                                                18020039
*                                                                       18030039
JOBS420  LM    R0,R1,ASCBEJST          GET ELAPSED JOB TCB TIME         18040039
         CLM   R0,B'1100',=F'0'        IS TOD ACCURATE?                 18050039
         BE    JOBS421                 BRANCH IF YES                    18060039
         SR    R0,R0                   ZERO OUT R0                      18070039
         SR    R1,R1                   ZERO OUT R1                      18080039
JOBS421  DS    0H                                                       18090039
         SRDL  R0,0012                 IN MICRO-SECONDS                 18100039
         LM    R14,R15,ASCBSRBT        GET ELAPSED SRB TIME             18110039
         CLM   R14,B'1100',=F'0'       IS TOD ACCURATE?                 18120039
         BE    JOBS422                 BRANCH IF YES                    18130039
         SR    R14,R14                 ZERO OUT R14                     18140039
         SR    R15,R15                 ZERO OUT R15                     18150039
JOBS422  DS    0H                                                       18160039
         SRDL  R14,0012                IN MICRO-SECONDS                 18170039
         ALR   R1,R15                  ADD TCB AND SRB TIME             18180039
         BNO   JOBS423                 BRANCH IF NO OVERFLOW            18190039
         AH    R0,=H'1'                HANDLE CARRY                     18200039
JOBS423  DS    0H                                                       18210039
         AR    R0,R14                                                   18220039
         D     R0,=F'10000'            GET IN HUNDREDTHS                18230039
         CH    R0,=H'5000'          -  ROUND UP NEEDED ?                18240039
         BL    JOBS427              -  BRANCH IF NOT                    18250039
         AH    R1,=H'1'             -  ROUND UP                         18260039
*                                                                       18270039
JOBS427  SLR   R0,R0                                                    18280039
         D     R0,=F'100'              TIME IN SECOND                   18290039
         LR    R3,R0                   SAVE REMAINING 1/100             18300039
         SLR   R0,R0                                                    18310039
         D     R0,=F'60'               TIME IN MINUTES                  18320039
         LR    R2,R0                   SAVE REMAINING SECONDS           18330039
         SLR   R0,R0                                                    18340039
         D     R0,=F'60'               TIME IN HOURS                    18350039
         STRING ((R1),,L),'H',((R0),,R2Z),'M',INTO=WKCELL1              18360039
         LTR   R1,R1                   MORE THAN 1 HOUR?                18370039
         BNZ   JOBS429                 YES, JUMP                        18380039
         STRING ((R0),,L),'M',((R2),,R2Z),'S',INTO=WKCELL1              18390039
         LTR   R0,R0                   MORE THAN 1 MINUTE?              18400039
         BNZ   JOBS429                 YES, JUMP                        18410039
         STRING ((R2),,L),'.',((R3),,R2Z),INTO=WKCELL1                  18420039
JOBS429  STRING '    CPU time used: ',WKCELL1,INTO=LINE                 18430039
         BAL   R14,SPACE2          <== Double Space                     18440039
*                                                                       18450039
*        Storage Allocation Table                                       18460039
*                                                                       18470039
JOBS600  MVI   MINLINES,6                                               18480041
         STRING '  Virtual Storage Usage:',INTO=LINE                    18490041
         BAL   R14,SPACE2          <== Double Space                     18500039
         L     R5,TCBTCT               SMF Timing Control Table         18510039
         USING SMFTCT,R5                                                18520039
         L     R5,TCTCRTBL             SMF Storage Control Table        18530039
         USING TCTCORE,R5                                               18540039
         L     R6,ASCBLDA              Local Data Area                  18550039
         USING LDA,R6                                                   18560039
         STRING 30X,'Limit      In Use    Available    High-watermark',x18570039
               INTO=LINE                                                18580039
         BAL   R14,SPACE2          <== Double Space                     18590039
         L     R0,LDALIMIT             LIMIT                            18600039
         SRL   R0,10                   BYTES -> KILOS                   18610039
         L     R1,LDALOAL              user region current value        18620039
         SRL   R1,10                   BYTES -> KILOS                   18630039
         LR    R2,R0                   LIMIT                            18640039
         SLR   R2,R1                   AVAILABLE                        18650039
         L     R3,TCTLWM               high-watermark                   18660039
         SRL   R3,10                   BYTES -> KILOS                   18670039
         STRING '    User SPLS (Below)  ',INTO=LINE,((R0),,R11B),'K',  X18680039
               ((R1),,R11B),'K',((R2),,R12B),'K',((R3),,R14B),'K'       18690039
         BAL   R14,SPACE1          <== Print line                       18700039
         L     R0,LDASIZA              SIZE OF PRIVATE AREA             18710039
         SL    R0,LDALIMIT             LIMIT                            18720039
         SRL   R0,10                   BYTES -> KILOS                   18730039
         L     R1,LDAHIAL              auth region current value        18740039
         SRL   R1,10                   BYTES -> KILOS                   18750039
         LTR   R2,R0                   LIMIT                            18760039
         BZ    *+6                     region>16M, jump                 18770039
         SLR   R2,R1                   AVAILABLE                        18780039
         L     R3,TCTHWM               high-watermark                   18790039
         SRL   R3,10                   BYTES -> KILOS                   18800039
         STRING '    Auth SPLS (Below)  ',INTO=LINE,((R0),,R11B),'K',  X18810039
               ((R1),,R11B),'K',((R2),,R12B),'K',((R3),,R14B),'K'       18820039
         BAL   R14,SPACE1          <== Print line                       18830039
         L     R0,LDAELIM              LIMIT                            18840039
         SRL   R0,10                   BYTES -> KILOS                   18850039
         L     R1,LDAELOAL             user region current value        18860039
         SRL   R1,10                   BYTES -> KILOS                   18870039
         LR    R2,R0                   LIMIT                            18880039
         SLR   R2,R1                   AVAILABLE                        18890039
         L     R3,TCTELWM              high-watermark                   18900039
         SRL   R3,10                   BYTES -> KILOS                   18910039
         STRING '    User SPLS (Above)  ',INTO=LINE,((R0),,R11B),'K',  X18920039
               ((R1),,R11B),'K',((R2),,R12B),'K',((R3),,R14B),'K'       18930039
         BAL   R14,SPACE1          <== Print line                       18940039
         L     R0,LDAESIZA             SIZE OF PRIVATE AREA             18950039
         SL    R0,LDAELIM              LIMIT                            18960039
         SRL   R0,10                   BYTES -> KILOS                   18970039
         L     R1,LDAEHIAL             auth region current value        18980039
         SRL   R1,10                   BYTES -> KILOS                   18990039
         LTR   R2,R0                   LIMIT                            19000039
         BZ    *+6                     region=0M, jump                  19010039
         SLR   R2,R1                   AVAILABLE                        19020039
         L     R3,TCTEHWM              high-watermark                   19030039
         SRL   R3,10                   BYTES -> KILOS                   19040039
         STRING '    Auth SPLS (Above)  ',INTO=LINE,((R0),,R11B),'K',  X19050039
               ((R1),,R11B),'K',((R2),,R12B),'K',((R3),,R14B),'K'       19060039
         BAL   R14,SPACE1              Print line                       19070041
JOBSTP99 END_PROC                                                       19080039
*                                                                       19090000
*---------------------------------------------------------------------- 19100000
*        PRINT RB CHAIN                                                 19110000
*---------------------------------------------------------------------- 19120000
*                                                                       19130000
PRB00    BEGIN_PROC                                                     19140032
         CL    R9,TCBJSTCB             MAIN TASK?               @920630 19150039
         BNE   PRB1000                 NO, JUMP                 @920630 19160000
         ICM   R0,B'1111',TCBLTC       YES, ANY SUB-TASKS?      @921020 19170000
         BZ    PRB20                   NONE, JUMP               @921020 19180000
*                                                                       19190000
*        DISPLAY TCB TREE AND RB CHAINS (IF TCB IS NOT JSTCB)           19200000
*                                                                       19210000
PRB1000  BAL   R14,BLANK1          <== BLANK LINE                       19220039
         MVI   MINLINES,5                                               19230000
         STRING 'TCB TREE AND RB CHAINS:',INTO=LINE                     19240041
         BAL   R14,SPACE1              PRINT LINE                       19250041
         STRING '0   TCB ADDRESS',18X,INTO=LINE121,                    X19260039
               'PROGRAM    IC  STAB  FLAGS1 CDFLGS    DDNAME'           19270006
         BAL   R14,SPACE1              PRINT LINE                       19280041
         L     R9,TCBJSTCB             THE JOB STEP TCB                 19290041
         SLR   R3,R3                   INDENTATION INDEX                19300000
*LOOP                                                                   19310000
PRB1100  STCM  R9,B'0111',WKCELL1      STORE TCB ADDR                   19320039
         STRING (BLANKS,4(R3)),(WKCELL1,3,X),INTO=LINE121               19330039
         TM    TCBFLGS5,TCBFC          task ended already?              19340035
         BO    PRB1288                 yes, next TCB                    19350035
         SLR   R6,R6                   first time switch for NEXTRB     19360032
*                                                                       19370000
*        Process RB chain from the oldest RB                            19380032
*--LOOP                                                                 19390000
PRB1200  BAL   R14,NEXTRB              Point to next RB                 19400032
         LTR   R6,R6                   end of chain?                    19410032
         BZ    PRB1290                 yes, exit loop                   19420032
         USING RBPREFIX,R6                                              19430032
         CLI   RBSTAB1,RBFTPRB         IS THIS A PRB?                   19440000
         BNE   PRB1240                 NO, jump                         19450032
*227     TM    RBCDFLGS,RBCDSYNC       CHECK FLAGS                      19460027
*227     BO    PRB1260                 JUMP IF IT IS A SYNCH PRB        19470027
         SLR   R1,R1                                                    19480027
         ICM   R1,B'0111',RBCDE1       Do we have a CDE?                19490027
         BZ    PRB1230                 No, jump (must be a SYNCH PRB)   19500032
         MVC   WKCELL1,BLANKS          TASKLIB DDNAME                   19510000
         ICM   R15,B'1111',TCBJLB      LOAD/TEST DCB ADDRESS            19520027
         BZ    PRB1220                 NO TASKLIB, JUMP                 19530032
         MVC   WKCELL1,=C'-LNKLST-'                                     19540026
         L     R14,CVTPTR(,0)          POINT AT CVT                     19550000
         CL    R15,CVTLINK-CVTMAP(,R14) SYS1.LINKLIB                    19560027
         BE    PRB1220                 JUMP IF SYS1.LINKLIB DCB ADDR    19570032
         LH    R15,DCBTIOT-IHADCB(,R15) LOAD TIOT OFFSET                19580027
         A     R15,TCBTIO              CHANGE OFFSET INTO AN ADDRESS    19590027
         MVC   WKCELL1,4(R15)          MOVE TASKLIB DDNAME              19600027
*                                                                       19610027
*        "LINK" PRB                                                     19620032
*                                                                       19630032
PRB1220  STRING INTO=(LINE+30,L'LINE-30),2X,                           X19640039
               (CDNAME-CDENTRY(R1),8),3X,      PGM NAME                X19650032
               (RBWLIC+3,1,X),2X,      IC                              X19660032
               (RBSTAB,2,X),4X,        STATUS BYTE                     X19670032
               (RBFLAGS1,,X),5X,       Flags                           X19680032
               (RBCDFLGS,,X),6X,       FLAGS                           X19690032
               WKCELL1                 DDNAME OF TASKLIB                19700000
*        DISPLAY REG1 FOR DATACOM SUB-TASK                      @930824 19710026
         CLC   =C'DBISBPR ',CDNAME-CDENTRY(R1)    DATACOM/DB?   @930824 19720026
         BNE   PRB1270                 no, jump                 @930824 19730026
         LA    R1,LINE+30(R15)         END OF TEXT              @930824 19740039
         STRING ' R1=',(RBGRS1,,X),INTO=((R1),5+8)              @930824 19750039
         B     PRB1270                                                  19760000
*                                                                       19770032
*        "SYNCH" PRB                                                    19780032
*                                                                       19790032
PRB1230  MVC   WKCELL1,RBGRS15         PICK UP ENTRY POINT ADDRESS      19800032
         NI    WKCELL1+3,X'FE'         SET BIT 31 TO ZERO               19810000
         STRING INTO=(LINE+30,L'LINE-30),2X,                           X19820039
               (WKCELL1,4,X),3X,       EP ADDRESS                      X19830032
               (RBWLIC+3,1,X),2X,                                      X19840032
               (RBSTAB,2,X),4X,        FLAGS                           X19850032
               (RBFLAGS1,,X),5X,       FLAGS                           X19860032
               (RBCDFLGS,,X)                                            19870000
         B     PRB1270                                                  19880032
*                                                                       19890032
*        SVRB                                                           19900032
*                                                                       19910032
PRB1240  TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?                 19920032
         BNO   PRB1250                 no, jump                         19930032
         STRING INTO=(LINE+30,L'LINE-30),2X,                           X19940039
               WKCELL1,3X,             SVC 055                         X19950032
               (RBWLIC+3,1,X),2X,                                      X19960032
               (RBSTAB,2,X),4X,        FLAGS                           X19970032
               (RBFLAGS1,,X),5X,       FLAGS                           X19980032
               (RBCDFLGS,,X)                                            19990032
         B     PRB1270                                                  20000032
*                                                                       20010032
*        IRB                                                            20020032
*                                                                       20030032
PRB1250  TM    RBSTAB1,RBFTIRB         IS THIS AN IRB?                  20040032
         BNO   PRB1280                 no, ignore it                    20050032
         STRING INTO=(LINE+30,L'LINE-30),2X,                           X20060039
               '-IRB    ',3X,          IRB                             X20070032
               (RBWLIC+3,1,X),2X,                                      X20080032
               (RBSTAB,2,X),4X,        FLAGS                           X20090032
               (RBFLAGS1,,X),5X,       FLAGS                           X20100032
               (RBCDFLGS,,X)                                            20110032
*                                                                       20120000
PRB1270  CLC   RBOPSW,SDWAEC1          Abending RB?                     20130032
         BNE   PRB1271                 No, jump                         20140032
         MVI   LINE+29+1,C'*'          Yes, flag it                     20150039
PRB1271  BAL   R14,SPACE1              PRINT LINE                       20160039
         ICM   R1,B'1111',$RTM2WA      RTM2WA located?                  20170042
         BNP   PRB1279                 NO, JUMP                         20180043
         USING RTM2WA,R1                                                20190042
         TM    RTM2ERRA,RTM2ABTM       ABTERM?                          20200043
         BO    PRB1275                 yes, jump                        20210043
         TM    RTM2ERRA,RTM2PCHK       PROGRAM CHECK?                   20220042
         BNO   PRB1279                 NO, JUMP                         20230043
         L     R0,RTM2AEC1             GET INTERRUPT CODE IN R0         20240042
         DROP  R1                      RTM2WA                           20250042
         STRING '-PCK',(RBWLIC+3,FL1,R3Z),'-',INTO=WKCELL1              20260032
         B     PRB1280                 NO, JUMP                         20270043
PRB1275  MVC   WKCELL1,=C'-ABTERM-'                                     20280043
         B     PRB1280                 NO, JUMP                         20290043
PRB1279  STRING '-SVC',(RBWLIC+3,FL1,R3Z),'-',INTO=WKCELL1              20300043
PRB1280  B     PRB1200                 LOOP THROUGH RB TABLE            20310032
*--ENDLOOP                                                              20320000
PRB1288  STRING '  TASK TERMINATED',INTO=(LINE+30,L'LINE-30)            20330039
         BAL   R14,SPACE1              PRINT LINE                       20340039
*                                                                       20350035
PRB1290  BAL   R14,SCANTCB             GET NEXT TCB                     20360013
         BNZ   PRB1100                 PROCESS NEXT TCB                 20370000
*ENDLOOP                                                                20380000
         L     R9,PSATOLD-PSA(,0)      POINT TO ABENDING TCB            20390039
*                                                                       20400000
*        DISPLAY RB CHAIN FOR ABENDING TCB                              20410000
*                                                                       20420000
PRB20    BAL   R14,BLANK1          <== BLANK LINE                       20430039
         MVI   MINLINES,5                                               20440000
         STRING 'ABENDING TCB: ',(PSATOLD-PSA+1(0),3,X),INTO=LINE       20450041
         BAL   R14,SPACE1          <== Print line                       20460041
         SLR   R6,R6                   first time switch for NEXTRB     20470032
*                                                                       20480032
*        Process RB chain from the oldest RB                            20490032
*--LOOP                                                                 20500032
PRB21    BAL   R14,NEXTRB              Point to next RB                 20510032
         LTR   R6,R6                   end of chain?                    20520032
         BZ    PRB99                   yes, exit loop                   20530032
         CL    R6,MY_PRB               END OF CHAIN?                    20540032
         BE    PRB99                   yes, exit loop                   20550032
         USING RBPREFIX,R6                                              20560000
         LA    R0,RBBASIC              POINT TO BASIC SECTION           20570000
         ST    R0,WKCELL1              KEEP ADDR FOR DISPLAY            20580000
         MVI   MINLINES,3                                               20590000
*                                                                       20600000
         TM    RBSTAB1,RBFTSVRB        IS THIS AN SVRB?                 20610000
         BO    PRB29                   YES, JUMP                        20620000
*                                                                       20630000
         TM    RBSTAB1,RBFTIRB         IS THIS AN IRB?                  20640000
         BO    PRB30                   YES, JUMP                        20650000
*                                                                       20660000
*227     TM    RBCDFLGS,RBCDSYNC       CHECK FLAGS                      20670027
*227     BO    PRB28                   JUMP IF IT IS A SYNCH PRB        20680027
*227     L     R5,RBCDE                GET ADDR OF CDE/LPDE             20690027
         SLR   R5,R5                                                    20700027
         ICM   R5,B'0111',RBCDE1       Do we have a CDE?                20710027
         BZ    PRB28                   No, jump (must be a SYNCH PRB)   20720027
         STRING INTO=LINE121,                                          X20730039
               '0  PRB: ',(WKCELL1+1,3,X),                             X20740000
               '  STAB: ',(RBSTAB,,X),            STATUS BYTES         X20750000
               '  FLAGS1: ',(RBFLAGS1,,X),        FLAGS                X20760007
               '  CDFLGS: ',(RBCDFLGS,,X),        FLAGS                X20770007
               '  CDNAME: ',(CDNAME-CDENTRY(R5),8) PROGRAM NAME         20780000
         BAL   R14,SPACE1          <== Print line                       20790041
         B     PRB31                                                    20800000
*                                                                       20810000
PRB28    MVC   WKCELL2,RBGRS15         PICK UP ENTRY POINT ADDRESS      20820000
         NI    WKCELL2+3,X'FE'         SET BIT 31 TO ZERO               20830000
         STRING INTO=LINE121,                                          X20840039
               '0  PRB: ',(WKCELL1+1,3,X),                             X20850000
               '  STAB: ',(RBSTAB,,X),            STATUS BYTES         X20860000
               '  FLAGS1: ',(RBFLAGS1,,X),        FLAGS                X20870007
               '  CDFLGS: ',(RBCDFLGS,,X),        FLAGS                X20880007
               '  EPADDR: ',(WKCELL2,4,X)         ENTRY POINT           20890000
         BAL   R14,SPACE1          <== Print line                       20900041
         CL    R6,MY_PRB               MY RBPREFIX ?                    20910000
         BNE   PRB31                   NO, JUMP                         20920000
         B     PRB39                   YES, QUIT                        20930000
*                                                                       20940000
PRB29    STRING INTO=LINE121,                                          X20950039
               '0 SVRB: ',(WKCELL1+1,3,X),                             X20960000
               '  STAB: ',(RBSTAB,,X),            STATUS BYTES         X20970007
               '  FLAGS1: ',(RBFLAGS1,,X),        FLAGS                X20980007
               '  CDFLGS: ',(RBCDFLGS,,X)         FLAGS                 20990007
         BAL   R14,SPACE1          <== Print line                       21000041
         STRING 'SVC ROUTINE',INTO=MSG20                                21010000
         TM    RBFLAGS1,RBABEND        IS THIS THE ABEND SVRB?          21020000
         BNO   PRB32                   NO, JUMP                         21030000
         STRING 'RTM',INTO=MSG20                                        21040000
         B     PRB32                   JUMP OVER CSVQRY00 IF SVRB       21050008
*                                                                       21060000
PRB30    MVC   WKCELL2(4),RBCDE        IRB EP ADDRESS                   21070000
         NI    WKCELL2+3,X'FE'         SET BIT 31 TO ZERO               21080000
         STRING INTO=LINE121,                                          X21090039
               '0  IRB: ',(WKCELL1+1,3,X),                             X21100000
               '  STAB: ',(RBSTAB,,X),            STATUS BYTES         X21110000
               '  FLAGS1: ',(RBFLAGS1,,X),        FLAGS                X21120007
               '  CDFLGS: ',(RBCDFLGS,,X),        FLAGS                X21130007
               '  EPADDR: ',(WKCELL2,4,X)         ENTRY POINT           21140000
         BAL   R14,SPACE1          <== Print line                       21150041
*                                                                       21160000
PRB31   #SETMASK RBOPSW+4              SET MASK FOR ADDR CLEAN-UP       21170000
         L     R1,RBOPSW+4             PICK UP ADDR OF NEXT INSTR.      21180000
         BAL   R14,CSVQRY00        <== FIND CORRESPONDING CDE           21190008
*                                                                       21200000
PRB32    TM    RBFLAGS1,RBXWAIT        THIS RB IN WAIT?                 21210041
         BNO   PRB33                   NO, JUMP                         21220041
         STRING 2X,(MSG20,,T),' *ISSUED WAIT',INTO=MSG60                21230041
         B     PRB38                                                    21240041
*                                                                       21250041
PRB33    ICM   R1,B'1111',$RTM2WA      RTM2WA located?                  21260042
         BNP   PRB37                   NO, JUMP                         21270042
         USING RTM2WA,R1                                                21280042
         TM    RTM2ERRA,RTM2ABTM       ABTERM?                          21290043
         BO    PRB36                   yes, jump                        21300043
         TM    RTM2ERRA,RTM2PCHK       PROGRAM CHECK?                   21310042
         BNO   PRB37                   NO, JUMP                         21320043
         STRING 2X,(MSG20,,T),' *PROGRAM CHECK*',INTO=MSG60             21330041
         L     R0,RTM2AEC1             GET INTERRUPT CODE IN R0         21340042
         DROP  R1                      RTM2WA                           21350042
         L     R1,=A(PCKTABLE)         START OF PCK TABLE               21360041
         BAL   R14,SCANTBL             FIND PCK NAME                    21370041
         BNE   PRB38                   NOT FOUND, JUMP                  21380041
         STRING (MSG60,,T),' (',(2(R1),(R2)),')',INTO=MSG60             21390041
         B     PRB38                                                    21400036
*                                                                       21410000
PRB36    STRING 2X,(MSG20,,T),' *SYSTEM ISSUED SVC 13 (ABEND)',       --21420043
               INTO=MSG60                                               21430041
         B     PRB38                                                    21440043
*                                                                       21450000
PRB37    STRING 2X,(MSG20,,T),' ISSUED SVC ',(RBWLIC+3,FL1,L0),       --21460000
               INTO=MSG60                                               21470041
         L     R0,RBWLIC               GET INTERRUPT CODE IN R0         21480000
         L     R1,=A(SVCTABLE)         START OF SVC TABLE               21490000
         BAL   R14,SCANTBL             FIND SVC NAME                    21500000
         BNE   PRB38                   NOT FOUND, JUMP                  21510000
         STRING (MSG60,,T),' (',(2(R1),(R2)),')',INTO=MSG60             21520041
*                                                                       21530000
PRB38    STRING 5X,INTO=LINE,                                          X21540039
               'W-L-IC ',(RBWLIC,1,X),            WAIT COUNT           X21550000
               '-',(RBWLIC+1,1,X),                INSTRUCTION LENGTH   X21560000
               '-',(RBWLIC+2,2,X),                INTERRUPT CODE       X21570032
               '  PSW ',(RBOPSW,4,X),1X,(RBOPSW+4,4,X),                X21580032
               MSG60                   DIAGNOSTIC                       21590041
         BAL   R14,SPACE1          <== Print line                       21600041
*                                                                       21610030
*        Display R14-R1 from previous RB                                21620042
*                                                                       21630042
         ST    R6,WKCELL1              save RB addr                     21640032
         BAL   R14,NEXTRB              next RB                          21650032
         STRING 5X,INTO=LINE,                                          X21660039
               ' R14=',(RBGRS14,,X),                                   X21670030
               '  R15=',(RBGRS15,,X),                                  X21680030
               '  R0=',(RBGRS0,,X),                                    X21690030
               '  R1=',(RBGRS1,,X)                                      21700030
         BAL   R14,SPACE1          <== Print line                       21710041
         L     R6,WKCELL1              restore RB addr                  21720032
*                                                                       21730000
PRB39    B     PRB21                   PROCESS NEXT RB                  21740042
*ENDLOOP                                                                21750000
PRB99    END_PROC                                                       21760032
*---------------------------------------------------------------------- 21770000
*        TCB TREE SCAN ROUTINE                                          21780000
*---------------------------------------------------------------------- 21790000
SCANTCB  BEGIN_PROC SAVE=NO                                             21800032
         LR    R1,R9                   SAVE TCB ADDRESS                 21810039
         L     R9,TCBLTC-TCB(,R9)      DAUGHTER                         21820039
         LA    R3,1(,R3)               INDENTATION INDEX                21830000
*LOOP                                                                   21840000
SCANTCB2 LTR   R9,R9                   CHECK FOR END OF CHAIN           21850039
         BNZR  R14                     PASS VALID TCB ADDRESS           21860000
         L     R9,TCBNTC-TCB(,R1)      SISTER                           21870039
         L     R1,TCBOTC-TCB(,R1)      MOTHER                           21880000
         BCT   R3,SCANTCB2             INDENTATION INDEX                21890000
*ENDLOOP                                                                21900000
         SR    R9,R9                   SET CC=0                         21910039
         BR    R14                     GOBACK                           21920000
*                                                                       21930032
*---------------------------------------------------------------------- 21940032
*        SCAN RB chain backwards (from oldest RB)                       21950032
*              Input:  R9 points to the TCB                             21960039
*                      R6 points to current RBPREFIX                    21970032
*              Output: R6 point to next RB                              21980032
*---------------------------------------------------------------------- 21990032
*                                                                       22000032
         USING RBPREFIX,R6                                              22010032
NEXTRB   BEGIN_PROC SAVE=NO                                             22020032
         LA    R0,RBBASIC              point to basic section           22030032
         SLR   R6,R6                   end of chain                     22040032
         CL    R0,TCBRBP               end of chain?                    22050032
         BER   R14                     yes, goback with R6=0            22060032
         ICM   R6,B'1111',TCBRBP       Point to top RB (most recent)    22070032
         BZR   R14                     no RB for this TCB, goback       22080032
*--LOOP                                                                 22090032
NEXTRB2  SH    R6,=Y(RBBASIC-RBPREFIX) POINT TO RBPREFIX                22100032
         CLM   R0,B'0111',RBLINK+1     is this the next RB?             22110032
         BE    NEXTRB4                 yes, exit loop                   22120041
         TM    RBSTAB2,RBTCBNXT        oldest RB (end of chain) ?       22130032
         BO    NEXTRB4                 yes, exit loop                   22140041
         LA    R1,RBBASIC              previous RB in chain             22150041
         ICM   R6,B'0111',RBLINK+1     POINT TO PREVIOUS RB (OR TCB)    22160032
         BNZ   NEXTRB2                 next RB in chain                 22170034
*--ENDLOOP                                                              22180032
         BR    R14                     goback with R6=0                 22190034
*                                                                       22200041
*        Retrieve addr of RTM2WA associated with previous SVRB          22210043
*                                                                       22220041
NEXTRB4  ST    R1,$RTM2WA              previous RB                      22230042
         ICM   R1,B'1111',TCBRTWA      RTM2WA                           22240042
         BZ    NEXTRB4N                lost, exit                       22250041
         USING RTM2WA,R1                                                22260042
*loop                                                                   22270041
NEXTRB4L CLC   RTM2VRBC,$RTM2WA        SVRB addr?                       22280042
         BE    NEXTRB4X                yes, exit                        22290041
         ICM   R1,B'1111',RTM2PREV     end of RTM2WA chain?             22300042
         BNZ   NEXTRB4L                no, process next one             22310041
*ensloop                                                                22320041
NEXTRB4N BCTR  R1,0                    R1=FFFFFFFF                      22330041
*                                                                       22340041
NEXTRB4X ST    R1,$RTM2WA              RTM2WA address or FFFFFFFF       22350042
         BR    R14                     goback                           22360041
         DROP  R6,R1                   RBPREFIX,RTM2WA                  22370042
*                                                                       22380000
*---------------------------------------------------------------------- 22390000
*        SCAN SVC/PCK TABLES                                            22400000
*---------------------------------------------------------------------- 22410000
*                                                                       22420000
SCANTBL  BEGIN_PROC SAVE=NO                                             22430032
         SLR   R2,R2                                                    22440032
*LOOP                                                                   22450000
SCANTBL2 IC    R2,1(,R1)               PICK UP ENTRY LENGTH             22460000
         CLM   R0,B'0001',0(R1)        COMPARE SVC NUMBER WITH INTCODE  22470000
         BER   R14                     EQUAL, QUIT LOOP                 22480000
         LA    R1,2(R2,R1)             BUMP TO NEXT ENTRY IN SVC TABLE  22490000
         CLI   0(R1),FF                END OF TABLE?                    22500042
         BNE   SCANTBL2                NO, TRY NEXT ENTRY               22510000
*ENDLOOP                                                                22520000
         LTR   R14,R14                 SET CC^                          22530000
         BR    R14                                                      22540000
*                                                                       22550000
*---------------------------------------------------------------------* 22560056
*                                                                     * 22570056
*   NAME     ENTPT    ATTRB SP ATTR  ATTR2  USE    MAJ-CDE   LENGTH   * 22580056
*                                                                     * 22590056
*   SHOWJPAQ 840BAA30   30  FC  31    22    0001             0007E0   * 22600056
*   JPAQ     840BAA30   30      35    02           SHOWJPAQ           * 22610056
*                                                                     * 22620056
*---------------------------------------------------------------------* 22630056
*                                                                       22640000
PGM00    BEGIN_PROC                                                     22650032
         BAL   R14,SPACE1          <== Print line                       22660056
         STRING 'JOB PACK AREA FOR ABENDING STEP',INTO=LINE             22670056
         BAL   R14,SPACE1          <== Print line                       22680056
         MVI   MINLINES,6                                               22690000
         STRING    '   Name     EntPt   Attrb Sp Attr Attr2 Attr3 Use  X22700056
               Maj-CDE  Length Load-pnt Data-Set Name',INTO=LINE        22710056
         BAL   R14,SPACE1           <- Print line                       22720056
         SLR   R5,R5                   first-time switch                22730056
*LOOP                                                                   22740056
JPAQ11   BAL   R14,NEXTCDE          <- get next CDE                     22750056
         LTR   R5,R5                   end of JPAQ?                     22760056
         BZ    JPAQ91                  yes, exit                        22770056
         USING CDENTRY,R5                                               22780056
*                                                                       22790056
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +22800056
               INADDR=CDENTPT,         ADDRESS                         +22810056
               OUTEPNM=EPNAME,         RETURN EP NAME                  +22820056
               OUTPID=PID,             PROVIDER ID                     +22830056
               OUTPDATA=PDATA,         PROVIDER DATA                   +22840056
               OUTEPTKN=MODTOKEN,      RETURN TOKEN                    +22850056
               MF=(E,CSVQRYWK)         WORK AREA                        22860056
         LTR   R2,R15                  pass return code                 22870056
         BZ    JPAQ17                  OK, continue                     22880056
         STRING 'CSVQUERY Failed, R15=',((R2),,L),INTO=CSVDWORK         22890056
         LA    R1,CSVDWORK             message                          22900056
         B     JPAQ82                                                   22910056
*                                                                       22920056
JPAQ17   CLC   =C'PGMF',PID            LOADED FROM JOBLIB/STEPLIB?      22930056
         BNE   JPAQ31                  no, jump                         22940056
         OC    PDATA,PDATA             Any provider data returned?      22950056
         BZ    JPAQ41                  no, quit                         22960056
         LA    R2,X'000000FF'          mask for NR                      22970056
         N     R2,PDATA_TTRN           load TTRN from Provider Data     22980056
         CLI   PDATA+1,X'01'           LOADED FROM -LNKLST- ?           22990056
         BE    JPAQ34                  yes, jump                        23000056
         CLI   PDATA+1,X'02'           LOADED FROM TASKLIB ?            23010056
         BE    JPAQ50                  yes, jump                        23020056
*                                                                       23030056
*        Loaded from JOBLIB/STEPLIB/TASKLIB                             23040056
*                                                                       23050056
JPAQ21   TM    PDATA,X'80'             loaded from a PDSE?              23060056
         BZ    JPAQ21L                 no, jump                         23070056
         L     R3,PDATA_DDN+4          yes, get LFMD address            23080056
         MVC   PDATA_DDN,044(R3)       move true ddname                 23090056
JPAQ21L  L     R3,TCBTIO               TIOT                             23100056
         USING TIOT1,R3                                                 23110056
         LA    R3,TIOENTRY             First TIOT Entry                 23120056
         USING TIOENTRY,R3                                              23130056
         SLR   R0,R0                   PREPARE IC                       23140056
*LOOP                                                                   23150056
JPAQ22   CLC   PDATA_DDN,TIOEDDNM      is this my ddname ?              23160056
         BE    JPAQ60                  yes, exit loop                   23170056
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY     23180056
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY            23190056
         CLI   TIOELNGH,0              IS THIS THE END?                 23200056
         BNZ   JPAQ22                  NOT YET, LOOP THROUGH TIOT       23210056
*ENDLOOP                                                                23220056
*        DDname has been freed (not found in TIOT)                      23230056
*                                                                       23240056
         STRING (PDATA_DDN,,T),'+',((R2),,L),INTO=CSVDWORK              23250056
         LA    R1,CSVDWORK             message                          23260056
         B     JPAQ80                  exit                             23270056
*                                                                       23280056
*        Get module's TTRN in linklist (PID=LLAF)                       23290056
*                                                                       23300056
JPAQ31   CLC   =C'LLAF',PID            LOADED FROM LINK-LIST?           23310056
         BNE   JPAQ41                  NO, EXIT                         23320056
         MVC   CSVDWORK,=AL2(1,L'CSVDWORK)                              23330056
         MVC   PDS2NAME,EPNAME         EPNAME                           23340056
         L     R1,CVTPTR               CVT address                      23350056
         L     R1,CVTLINK-CVTMAP(,R1)  link-list DCB                    23360056
         BLDL  (1),CSVDWORK            ISSUE BLDL (to LLA)              23370056
         LTR   R15,R15                                                  23380056
         BNZ   JPAQ45                  NOT FOUND, QUIT                  23390056
         IC    R2,PDS2CNCT             pick-up concat#                  23400056
         MVC   PDATA_DDN,DDNAME        move ddname                      23410056
*                                                                       23420056
*        Find link-list dsname from LLT                                 23430056
*                                                                       23440056
JPAQ34   MH    R2,=Y(LLTNEXT-LLTENTRY) make it an offset into the LLT   23450056
         L     R14,X'0224'(,0)         PSAAOLD   A(ASCB)                23460056
         L     R14,ASCBASSB-ASCB(,R14) ASSB                             23470056
         L     R14,ASSBDLCB-ASSB(,R14) CSVDLCB                          23480056
         L     R3,DLCBLLT@-DLCB(,R14)  LLT                              23490056
         LA    R1,LLTDSN-LLT(R2,R3)    change offset to address         23500056
         B     JPAQ80                  exit                             23510056
*                                                                       23520056
*        PDATA=zero or PID not equal to PGMF or LLAF                    23530056
*                                                                       23540056
JPAQ41   STRING 'PID(',(PID,,T),')',INTO=WORK44                         23550056
         LA    R1,WORK44               message                          23560056
         LA    R15,4                   RC=4                             23570056
         B     JPAQ82                                                   23580056
*                                                                       23590056
*        BLDL_RC>0                                                      23600056
*                                                                       23610056
JPAQ45   STRING 1X,INTO=WORK44         dsname not found                 23620056
         B     JPAQ82                                                   23630056
*                                                                       23640056
*        PDATA=X'08020000,007D2D00,008D1768,00000000'                   23650056
*        PDATA may be related to DESERV/IGWSMDE ???                     23660056
*        It seems that PDATA+0=X'08' ???                                23670056
*                      PDATA+1=PDS2LIBF (the "Z byte").                 23680056
*                      PDATA+4=TTRN                                     23690056
*                      PDATA+8=A(TCB)                                   23700056
*                                                                       23710056
JPAQ50   LA    R1,TCB                  R1=A(TCB) - my own TCB           23720056
         TM    PDATA+0,X'08'           X'08' ??                         23730056
         BNO   JPAQ51                  no, jump                         23740056
         L     R14,PDATA+8             R14=A(TCB)                       23750056
         CLC   TCBTIO,TCBTIO-TCB(R14)  is this a TCB ?                  23760056
         BNE   JPAQ51                  no, jump                         23770056
         LR    R1,R14                  R1=A(TCB)                        23780056
JPAQ51   L     R1,TCBJLB-TCB(,R1)      R1=A(DCB) STEPLIB/JOBLIB/TASKLIB 23790056
         LH    R3,040(,R1)             DCBTIOT                          23800056
         AL    R3,TCBTIO               ADD A(TIOT)                      23810056
         MVC   PDATA_DDN,TIOEDDNM      copy JOBLIB/STEPLIB ddname       23820056
*                                                                       23830056
*        DDname found - Retrieve dsname from JFCB                       23840056
*                                                                       23850056
JPAQ60   LTR   R2,R2                   first data set in concat?        23860056
         BZ    JPAQ66                  yes, exit                        23870056
         SLR   R0,R0                                                    23880056
*loop                                                                   23890056
JPAQ61   IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY     23900056
         ALR   R3,R0                   BUMP UP TO NEXT ENTRY            23910056
         BCT   R2,JPAQ61               next concat#                     23920056
*endloop                                                                23930056
JPAQ66   LA    R2,CSVDWORK+4           WORK AREA                        23940056
         ST    R2,CSVDWORK             WORK AREA                        23950056
         USING ZB505,R2                                                 23960056
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA                  23970056
         MVC   SWVA,TIOEJFCB           SVA OF THE JFCB                  23980056
         SWAREQ FCODE=RL,EPA=CSVDWORK,MF=(E,SWAREQL1),UNAUTH=YES        23990056
         L     R1,SWBLKPTR             31-BIT ADDRESS OF JFCB           24000056
*                                                                       24010056
JPAQ80   SLR   R15,R15                 RC=0                             24020056
*                                                                       24030056
JPAQ82   L     R6,CDXLMJP              POINT TO XL (OR MAJOR CDE)       24040056
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES                 24050056
         BO    JPAQ85                  JUMP IF THIS IS A MINOR CDE      24060056
         USING XTLST,R6                                                 24070056
         STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),2X,(CDSP,,X),X24080056
               2X,(CDATTR,,X),4X,(CDATTR2,,X),4X,(CDATTR3,,X),2X,      X24090056
               (CDUSE,,X),10X,(XTLMSBLN,,X),1X,(XTLMSBAD,,X),          X24100056
               1X,((R1),44,T),         DSname from CDEX                X24110056
               INTO=LINE                                                24120056
         BAL   R14,SPACE1           <- Print line                       24130056
         B     JPAQ11                                                   24140056
JPAQ85   STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),6X,          X24150056
               (CDATTR,,X),4X,(CDATTR2,,X),4X,(CDATTR3,,X),            X24160056
               7X,(CDNAME-CDENTRY(R6),8),                              X24170056
               17X,((R1),44,T),        DSname from CDEX                X24180056
               INTO=LINE                                                24190056
         BAL   R14,SPACE1           <- Print line                       24200056
         B     JPAQ11                  next JPAQ entry                  24210056
*ENDLOOP                                                                24220056
*                                                                       24230056
* ATTRB: 80-EOM 40-IDENTY 20-DIRTY 10-CDEX 08-LPDE 04-GLOBAL 02-CONTA.. 24240056
*  ATTR: 80-NIP/MLPA 40-NIC 20-RENT 10-REUS 08-NREUS 04-MINOR 02-JPAQ   24250056
* ATTR2: 80-SP0 40-REL 20-XLE 10-RLC 08-AMODE_ANY 04-OVLY 02-APFLIB ... 24260056
*                                                                       24270056
JPAQ91   BAL   R14,BLANK1           <- Print blank line                 24280056
         STRING '   ATTRB: 80-EOM 40-IDENTY 20-DIRTY 10-CDEX ',        X24290056
               '08-LPDE 04-GLOBAL 02-CONTAMINATION 01-RACF',           X24300056
               INTO=LINE                                                24310056
         BAL   R14,SPACE1           <- NEXT LINE                        24320056
         STRING '    ATTR: 80-NIP/MLPA 40-NIC 20-RENT 10-REUS ',       X24330056
               '08-NREUS 04-MINOR 02-JPAQ 01-NOT_OL',                  X24340056
               INTO=LINE                                                24350056
         BAL   R14,SPACE1           <- NEXT LINE                        24360056
         STRING '   ATTR2: 80-SP0 40-REL 20-XLE 10-RLC ',              X24370056
               '08-AMODE_ANY 04-OVLY 02-APFLIB 01-AC=1',               X24380056
               INTO=LINE                                                24390056
         BAL   R14,SPACE1           <- NEXT LINE                        24400056
         STRING '   Attr3: 80-OpMvsPath 40-PML',                       X24410056
               INTO=LINE                                                24420056
         BAL   R14,SPACE1           <- NEXT LINE                        24430056
         BAL   R14,BLANK1           <- Print blank line                 24440056
*---------------------------------------------------------------------- 24450056
*        PRINT LOAD-LIST                                                24460056
*---------------------------------------------------------------------- 24470056
         MVI   MINLINES,6                                               24480000
         STRING 'LOAD LIST FOR ABENDING TCB',INTO=LINE                  24490039
         BAL   R14,SPACE1          <== Print line                       24500041
         STRING '0   NAME     ENTPT   ATTRB SP ATTR ATTR2  ',          X24510056
               '  COUNT  SYSCT     LENGTH LOAD-PNT',INTO=LINE121        24520056
         BAL   R14,SPACE1          <== Print line                       24530041
         SLR   R7,R7                   first-time switch                24540041
*                                                                       24550000
*        PRINT LLE CHAIN                                                24560000
*LOOP                                                                   24570000
PGM51    BAL   R14,NEXTLLE          <- get next LLE                     24580041
         LTR   R7,R7                   end of load-list ?               24590041
         BZ    PGM80                   yes, exit                        24600041
         USING LLE,R7                                                   24610041
         L     R5,LLECDPT              CDE PTR                          24620000
         TM    CDATTR,CDMIN            CHECK ATTRIBUTES                 24630000
         BNO   PGM52                   JUMP IF THIS IS A MAJOR CDE      24640000
         L     R5,CDXLMJP              POINT TO MAJOR CDE               24650000
PGM52    L     R6,CDXLMJP              POINT TO XL                      24660000
         TM    CDATTRB,CDELPDE         CHECK ATTRIBUTES                 24670000
         BO    PGM55                   JUMP IF THIS IS A LPA MODULE     24680000
         STRING 3X,CDNAME,1X,(CDENTPT,,X),2X,(CDATTRB,,X),2X,          X24690056
               (CDSP,,X),2X,(CDATTR,,X),4X,(CDATTR2,,X),5X,            X24700056
               (LLECOUNT,,X),3X,(LLESYSCT,,X),6X,                      X24710056
               (XTLMSBLN,,X),1X,(XTLMSBAD,,X),INTO=LINE                 24720056
         BAL   R14,SPACE1          <== Print line                       24730041
         B     PGM51                   LOOP THROUGH LOAD LIST           24740041
         USING LPDE,R5                                                  24750000
PGM55    STRING 3X,LPDENAME,1X,(LPDENTP,,X),2X,(LPDEATTB,,X),2X,       X24760056
               (LPDESP,,X),2X,(LPDEATTR,,X),4X,(LPDEATT2,,X),5X,       X24770056
               (LLECOUNT,,X),3X,(LLESYSCT,,X),6X,                      X24780056
               (LPDEXTLN+1,3,X),1X,(LPDEXTAD,,X),INTO=LINE              24790056
         BAL   R14,SPACE1          <== Print line                       24800041
         B     PGM51                   LOOP THROUGH LOAD LIST           24810041
*ENDLOOP                                                                24820000
PGM80    END_PROC                                                       24830032
*                                                                       24840036
*---------------------------------------------------------------------- 24850036
*        Scan JPAQ backwards (from oldest CDE)                          24860036
*              Input:  R5 points to current CDENTRY                     24870036
*              Output: R5 point to next CDE                             24880036
*---------------------------------------------------------------------- 24890036
*                                                                       24900036
NEXTCDE  BEGIN_PROC SAVE=NO                                             24910036
         USING *,R15                                                    24920036
         LR    R0,R5                   point to current CDE             24930036
         L     R5,PSATOLD-PSA(,0)      my TCB                           24940036
         L     R5,TCBJSTCB-TCB(,R5)    job-step TCB                     24950036
         L     R5,TCBJPQ-TCB(,R5)      Top CDE (most recent)            24960036
         LTR   R5,R5                   empty JPAQ?                      24970036
         BZR   R14                     yes, goback with R5=0            24980036
         USING CDENTRY,R5                                               24990036
*--LOOP                                                                 25000036
NEXTCDE2 CL    R0,CDCHAIN              is this the next RB?             25010036
         BER   R14                     yes, goback                      25020036
         ICM   R5,B'1111',CDCHAIN      previous CDE                     25030036
         BNZ   NEXTCDE2                not found yet, loop more         25040036
*--ENDLOOP                                                              25050036
         BR    R14                     goback with R5=0                 25060036
*                                                                       25070041
*---------------------------------------------------------------------- 25080041
*        Scan LOAD-LIST backwards (from oldest LLE)                     25090041
*              Input:  R7 points to current LLE                         25100041
*              Output: R7 point to next LLE                             25110041
*---------------------------------------------------------------------- 25120041
*                                                                       25130041
NEXTLLE  BEGIN_PROC SAVE=NO                                             25140041
         USING *,R15                                                    25150041
         LR    R0,R7                   point to current LLE             25160041
         L     R7,PSATOLD-PSA(,0)      my TCB                           25170041
         L     R7,TCBLLS-TCB(,R7)      Top LLE (most recent)            25180041
         LTR   R7,R7                   empty load list?                 25190041
         BZR   R14                     yes, goback with R7=0            25200041
         USING LLE,R7                                                   25210041
*--LOOP                                                                 25220041
NEXTLLE2 CL    R0,LLECHN               is this the next RB?             25230041
         BER   R14                     yes, goback                      25240041
         ICM   R7,B'1111',LLECHN       previous LLE                     25250041
         BNZ   NEXTLLE2                not found yet, loop more         25260041
*--ENDLOOP                                                              25270041
         BR    R14                     goback with R7=0                 25280041
         DROP  R5,R6,R7                CDE, XL, LLE                     25290000
*                                                                       25300039
*---------------------------------------------------------------------- 25310039
*        PRINT COM-REG                                                  25320039
*---------------------------------------------------------------------- 25330039
*                                                                       25340039
COMREG00 BEGIN_PROC                                                     25350039
         L     R5,PSATOLD-PSA(,0)      my TCB                           25360039
         L     R5,TCBJSTCB-TCB(,R5)    job-step TCB                     25370039
         L     R5,TCBJPQ-TCB(,R5)      Top CDE (most recent)            25380039
         LTR   R5,R5                   empty JPAQ?                      25390039
         BZ    COMREG99                yes, exit                        25400039
         USING CDENTRY,R5                                               25410039
*LOOP                                                                   25420039
COMREG12 CLC   =C'COM_REG ',CDNAME     is this the next RB?             25430039
         BE    COMREG21                yes, exit loop                   25440039
         ICM   R5,B'1111',CDCHAIN      previous CDE                     25450039
         BNZ   COMREG12                not found yet, loop more         25460039
*ENDLOOP                                                                25470039
         B     COMREG99                not found, exit                  25480039
COMREG21 L     R6,CDXLMJP              POINT TO XL                      25490039
         USING XTLST,R6                                                 25500039
         MVI   MINLINES,6                                               25510041
         BAL   R14,BLANK1          <== BLANK LINE                       25520041
         STRING 'COM_REG',INTO=LINE                                     25530041
         BAL   R14,SPACE1          <== print header                     25540039
         SLR   R0,R0                                                    25550039
         ICM   R0,B'0111',XTLMSBLN     LENGTH                           25560039
         L     R1,XTLMSBAD             ADDRESS                          25570039
         BAL   R14,PDUMP           <== PRINT COM-REG                    25580039
COMREG99 END_PROC                                                       25590039
         DROP  R5,R6                                                    25600039
*                                                                       25610000
*---------------------------------------------------------------------- 25620000
*        PRINT PROGRAM LINKAGE INFORMATION (SAVE AREA TRACE)            25630000
*---------------------------------------------------------------------- 25640000
*                                                                       25650000
LINK00   BEGIN_PROC                                                     25660032
         BAL   R14,BLANK1          <== BLANK LINE                       25670039
         MVI   MINLINES,10                                              25680000
         STRING '0SAVE AREA FORWARD TRACE (STARTING FROM TCBFSA)',     X25690032
               INTO=LINE121                                             25700039
         BAL   R14,SPACE1          <== Print line                       25710041
         L     R6,TCBFSA               FIRST SAVE AREA                  25720052
         LA    R7,STACK128             LOOP PREVENTION                  25730052
         XC    0(256,R7),0(R7)         CLEAN UP                         25740052
         MVI   MASKADDR,X'7F'          31-BIT MODE                      25750052
*LOOP                                                                   25760000
LINK10   CLM   R6,B'1000',=X'FF'       LO-SA FLAGGED?                   25770025
         BNE   LINK11                  NO, JUMP                         25780025
         ICM   R6,B'1000',X00          YES, ZERO IT                     25790025
LINK11   LA    R6,0(,R6)               CLEAR HI-ORDER BIT               25800025
         CL    R6,REGION24             DOES THIS LOOK RIGHT?            25810025
         BL    LINK90                  NO, QUIT                         25820009
        #S0C4  LINK90                                                   25830009
         CLC   0(72,R6),0              VALIDATE 72 BYTES                25840000
        #S0C4  RESET                                                    25850000
         BAL   R14,LINK200         <== edit save area data              25860001
         CL    R6,CURR_R13             is this the current save?        25870052
         BNE   *+8                     no, jump                         25880052
         MVI   CURR_R13,FF             yes, remember we saw it          25890052
         LA    R0,128                  MAX NUMBER OF SAVE AREAS         25900000
         LA    R1,STACK128             START OF STACK                   25910001
*--LOOP                                                                 25920000
LINK18   CLC   0(4,R1),8(R6)           ALREADY PROCESSED OR ZERO?       25930001
         BE    LINK90                  YES, QUIT                        25940000
         LA    R1,4(,R1)               BUMP INDEX                       25950000
         BCT   R0,LINK18               NEXT STACK ENTRY                 25960001
*--ENDLOOP                                                              25970000
         ST    R6,0(,R7)               REMEMBER THIS SAVE AREA          25980000
LINK19   LR    R0,R6                   current save area                25990036
         L     R6,8(,R6)               NEXT SAVE AREA                   26000036
         CLR   R6,R0                   points to itself?                26010036
         BE    LINK90                  yes, exit                        26020036
         LA    R7,4(,R7)               NEXT STACK ENTRY                 26030000
         B     LINK10                  DUMP IT TOO                      26040000
*ENDLOOP                                                                26050000
*        process save area at time of abend, if not processed already   26060001
*                                                                       26070001
LINK90   CLI   CURR_R13,FF             current save area processed?     26080042
         BE    LINK99                  yes, exit                        26090001
         L     R6,CURR_R13             point to current save area       26100002
         CL    R6,REGION24             DOES THIS LOOK RIGHT?            26110009
         BL    LINK99                  NO, QUIT                         26120009
        #S0C4  LINK99                                                   26130002
         CLC   0(72,R6),0              VALIDATE 72 BYTES                26140002
        #S0C4  RESET                                                    26150002
         STRING '0CURRENT SAVE AREA (R13 FROM LAST PRB)',              X26160013
               INTO=LINE121                                             26170039
         BAL   R14,SPACE1          <== Print line                       26180041
         BAL   R14,LINK200         <== edit save area data              26190001
LINK99   END_PROC                                                       26200032
*                                                                       26210001
*---------------------------------------------------------------------- 26220001
*        Edit save-area fields                                          26230001
*---------------------------------------------------------------------- 26240001
*                                                                       26250001
LINK200  BEGIN_PROC                                                     26260032
         MVI   MINLINES,8                                               26270001
         MVC   WKCELL1,BLANKS          clear work area                  26280034
         L     R1,FRSTSVRB             ABEND SVRB                       26290034
         CLM   R6,B'0111',RBGRS13+1-RBPREFIX(R1)  R13 at time of abend? 26300034
         BNE   LINK203                 no, jump                         26310034
         MVC   WKCELL1+3(3),=C'<=='    Current save area                26320034
LINK203  STRING INTO=LINE121,                                          X26330039
               '0 SAVE AREA: ',((R6),,X),                              X26340032
               '  WORD1: ',(0(R6),4,X),                                X26350032
               '  PREVIOUS: ',(4(R6),4,X),                             X26360032
               '  NEXT: ',(8(R6),4,X),WKCELL1                           26370034
         BAL   R14,SPACE1          <== Print line                       26380041
*                                                                       26390001
*        DECODE ENTRY ADDRESS                                           26400001
*                                                                       26410001
         MVC   VIACALL,=C'CALL '       CALL/LINK/SYNCH                  26420001
         MVC   REGS(52),20(R6)         MOVE R0-R12                      26430001
         MVC   REGS+56(8),12(R6)       MOVE R14-R15                     26440001
         L     R14,CVTPTR(,0)      <== GET CVT ADDRESS                  26450001
         LA    R0,CVTEXIT-CVTMAP(,R14) GET ADDR OF CVTEXIT FIELD        26460001
         CLM   R0,B'0111',13(R6)       IS THIS THE RETURN ADDRESS?      26470001
         BNE   LINK222                 NO, JUMP                         26480001
         TM    12(R6),X'7F'            IS THIS A 24-BIT ADDR?           26490001
         BNZ   LINK222                 NO, JUMP                         26500001
         MVC   VIACALL,=C'LINK '       YES, CHANGE 'CALL' TO 'LINK'     26510001
         B     LINK228                                                  26520001
*                                                                       26530001
*        CHECK IF REGISTERS SAVED WITH "STM R14,R10,20(R13)"            26540001
*                                                                       26550001
LINK222 #S0C4  LINK228                                                  26560001
**       L     R2,LASTPRB              POINT TO LAST PRB                26570022
**       CLI   RBOPSW+4-RBPREFIX(R2),0 AMODE24?                         26580022
**       BNE   LINK228                 NO, JUMP                         26590022
         L     R2,FRSTSVRB             POINT TO FIRST SVRB              26600001
**       CL    R6,RBGRS13-RBPREFIX(,R2) SAVE AREA AT TIME OF ABEND?     26610022
**       BNE   LINK228                 NO, JUMP                         26620022
**       CLI   20(R6),X'00'            BAL/BALR?                        26630022
**       BE    LINK228                 NO, JUMP                         26640022
         LM    R14,R1,20(R6)           R14-R1 FROM R0-R3 SLOTS          26650001
         CLI   32(R6),FF               R1 IN COMPLEMENT FORM?           26660042
         BNE   LINK223                 NO, JUMP                         26670001
         LPR   R1,R1                   YES, MAKE IT POSITIVE            26680001
*                                                                       26690019
LINK223  ICM   R1,B'1000',X00          CLEAN UP HI-ORDER BYTE           26700001
**       CL    R1,RBGRS1-RBPREFIX(,R2) IS THIS MY DCB ADDRESS?          26710022
**       BNE   LINK224                 NO, JUMP                         26720022
         CLM   R15,B'0111',DCBPUT+1-IHADCB(R1)   R15 in R1 slot?        26730022
         BE    LINK225                 yes, JUMP                        26740019
*read/write/check macro                                                 26750022
         USING DECB,R1                                                  26760039
LINK224  TM    DECBDCBA,X'7F'          valid DCB addr?                  26770039
         BNZ   LINK228                 NO, JUMP                         26780039
         TM    DECBDCBA+3,X'03'        valid DCB addr?                  26790039
         BNZ   LINK228                 NO, JUMP                         26800039
         L     R1,DECBDCBA             DCB address from DECB            26810039
         DROP  R1                      was DECB                         26820039
         CL    R1,REGION24             DOES THIS LOOK RIGHT?            26830039
         BL    LINK228                 NO, QUIT                         26840039
         CL    R1,REGION24+4           DOES THIS LOOK RIGHT?            26850039
         BH    LINK228                 NO, QUIT                         26860039
         CLM   R15,B'0111',DCBREAD+1-IHADCB(R1)  R15 in R1 slot?        26870022
         BE    LINK225                 yes, jump                        26880021
         CL    R15,DCBCHECK-IHADCB(,R1) DCBCHECK IN R1 SLOT?            26890022
         BNE   LINK228                 NO, JUMP                         26900021
*                                                                       26910019
*        validate DCB/DEB pointers                                      26920022
*                                                                       26930022
LINK225  ICM   R14,B'0111',DCBDEBAD+1-IHADCB(R1)   DEB address          26940022
         BZ    LINK228                 BAD, QUIT                        26950022
         CLM   R1,B'0111',DEBDCBAD+1-DEBBASIC(R14) COMP W/ DCB ADDR     26960022
         BNE   LINK228                 BAD, QUIT                        26970022
*                                                                       26980022
*        make sure R15 points to IGG019xx                               26990022
*                                                                       27000022
         LR    R1,R15                  PASS EP ADDR                     27010022
         ICM   R1,B'1000',X00          CLEAN UP                         27020001
         BAL   R14,CSVQRY00        <== FIND LOAD MODULE                 27030008
         LTR   R5,R5                   CDE FOUND?                       27040001
         BZ    LINK228                 NO, JUMP                         27050001
         CLC   =C'IGG019',CDNAME-CDENTRY(R5)                            27060020
         BNE   LINK228                 NO, JUMP                         27070020
         MVC   REGS(44),28(R6)                   MOVE R0-R10            27080001
         MVC   REGS+44(8),RBGRS11-RBPREFIX(R2)        R11-R12           27090001
         MVC   REGS+56(8),20(R6)                      R14-R15           27100001
         MVI   MASKADDR,X'00'          24-BIT MODE              @921003 27110001
         B     LINK231                                          @921003 27120001
*                                                                       27130001
LINK228 #S0C4  LINK237                                                  27140001
         ICM   R1,B'1111',REGS+60      R15 (ENTRY ADDRESS)              27150027
         BZ    LINK241                 NO EP ADDR, JUMP                 27160027
         CLM   R1,B'1111',BLANKS       R15 (ENTRY ADDRESS)              27170027
         BE    LINK241                 NO EP ADDR, JUMP                 27180027
         TM    REGS+56,X'80'           AMODE31 IN R14?                  27190001
         BZ    LINK228C                NO, JUMP                         27200001
         TM    REGS+56,X'40'           BAL R14,8(,R15) ?                27210001
         BO    LINK228C                YES, JUMP                        27220001
         BAL   R14,CSVQRY00        <== FIND LOAD MODULE                 27230008
         LTR   R5,R5                   CDE FOUND?                       27240001
         BP    LINK231                 YES, JUMP                        27250001
LINK228C MVI   MASKADDR,X'00'          24-BIT MODE                      27260001
         L     R1,REGS+60              R15 (ENTRY ADDRESS)              27270001
         BAL   R14,CSVQRY00        <== FIND LOAD MODULE                 27280008
         LTR   R5,R5                   CDE FOUND?                       27290001
         BNP   LINK237                 NO, JUMP                         27300001
*                                                                       27310001
*        EDIT EYE CATCHER AT ENTRY POINT                                27320001
*                                                                       27330001
LINK231  MVC   EYECATCH,BLANKS                                          27340001
         TM    REGS+63,1               R15 HAS ODD VALUE?               27350001
         BO    LINK234                 YES, DO NOT IDENTIFY ENTRY ADDR  27360001
         L     R1,REGS+60              R15 (ENTRY ADDRESS)              27370001
         N     R1,MASKADDR             CLEAN-UP ADDRESS                 27380001
        #S0C4  LINK234                                                  27390001
         CLC   0(24,R1),0              VALIDATE 24 BYTES                27400015
        #S0C4  RESET                                                    27410001
*sub-routine: B 4(15)                                                   27420014
LINK232B LA    R0,64                   default length for eye-catcher   27430022
         LA    R2,4(,R1)               first byte of eye-catcher        27440014
         CLC   =X'47FF00',0(R1)        IS THIS A BRANCH?                27450013
         BE    LINK233                 yes, JUMP                        27460013
*OS/VS COBOL INIT1                                                      27470014
LINK232C LA    R0,8+4                  modulenmVSR1                     27480022
         LA    R2,12(,R1)              first byte of eye-catcher        27490014
         CLC   =C'VSR1',8(R2)          OS/VS INIT1 signature?           27500014
         BE    LINK233                 yes, JUMP                        27510014
*SAVE MACRO                                                             27520014
LINK232S IC    R0,4(,R1)               LENGTH OF EYE CATCHER            27530022
         LA    R2,5(,R1)               first byte of eye-catcher        27540014
         CLC   =X'47F0',0(R1)          IS THIS A BRANCH?                27550001
         BNE   LINK232P                NO, JUMP                         27560022
         TM    2(R1),X'F0'             IS THIS A BRANCH?                27570022
         BO    LINK233                 yes, JUMP                        27580022
*PROGID macro                                                           27590022
LINK232P LA    R0,X'001A'              eye catcher length               27600022
         LR    R2,R1                   entry address (R15)              27610022
         SLR   R2,R0                   point to CSECT origin            27620022
         CLC   0(4,R1),=X'90EC,D00C'   PROGID prolog?                   27630022
         BNE   LINK234                 NO, JUMP                         27640022
         CLC   8(10,R1),=X'50E0D008,50D0E004,18DE'                      27650022
         BNE   LINK234                 NO, JUMP                         27660022
         CLC   20(4,R1),=X'41F0001A'   PROGID prolog?                   27670022
         BNE   LINK234                 NO, JUMP                         27680022
*                                                                       27690014
LINK233  STRING ', EYE CATCHER IS "',((R2),(R0)),'"',INTO=EYECATCH      27700018
         TR    EYECATCH,TRTPRINT       KEEP ONLY PRINTABLE CHARACTERS   27710001
*                                                                       27720001
*INK234  STRING 2X,EPNAME,' WAS ENTERED VIA ',VIACALL,                 X27730032
               ' AT OFFSET ',OFFSET,EYECATCH,INTO=LINE                  27740039
LINK234  STRING 1X,(EPNAME,,T),(OFFSET,,T),                            X27750039
               ' WAS ENTERED VIA ',(VIACALL,,T),EYECATCH,INTO=LINE      27760039
         BAL   R14,SPACE1L         <== print with lower-case            27770039
         B     LINK241                                                  27780001
*                                                                       27790001
LINK237  STRING ' *UNKNOWN WAS ENTERED VIA ',VIACALL,                  X27800039
               ' AT LOCATION ',(REGS+60,4,X),INTO=LINE                  27810039
         BAL   R14,SPACE1          <== Print line                       27820041
*                                                                       27830001
*        DECODE RETURN ADDRESS                                          27840001
*                                                                       27850001
LINK241  MVC   EYECATCH,BLANKS         CLEAR WORK AREA                  27860001
         CLI   VIACALL,C'C'            WAS IT A CALL?                   27870001
         BNE   LINK261                 NO, JUMP                         27880001
         MVI   MASKADDR,X'7F'          31-BIT MODE                      27890001
         L     R1,REGS+56              RETURN ADDRESS                   27900001
         SRL   R1,1                    CLEAN UP "T" BIT                 27910001
         SLL   R1,1                    CLEAN UP "T" BIT                 27920001
         BAL   R14,CSVQRY00        <== FIND LOAD MODULE                 27930008
         LTR   R5,R5                   CDE FOUND?                       27940001
         BP    LINK248                 YES, JUMP                        27950001
         SLR   R1,R1                                                    27960001
         ICM   R1,B'0111',REGS+56+1    TRY 24-BIT ADDRESS               27970052
         BAL   R14,CSVQRY00        <== FIND LOAD MODULE                 27980008
         LTR   R5,R5                   CDE FOUND?                       27990001
         BZ    LINK261                 NO, JUMP                         28000001
LINK248  STRING 4X,'RETURN ADDRESS',' IS ',MSG20,INTO=EYECATCH          28010052
         TM    REGS+56+3,1             R14 flagged by RETURN macro?     28020052
         BZ    LINK261                 NO, JUMP                         28030052
         STRING 4X,'RETURN ADDRESS',' WAS ',MSG20,INTO=EYECATCH         28040052
*                                                                       28050001
LINK261  STRING '0   GPR00-03: ',(REGS,4,X),2X,(REGS+4,4,X),2X,        X28060032
               (REGS+8,4,X),2X,(REGS+12,4,X),INTO=LINE121               28070039
         BAL   R14,SPACE1          <== Print line                       28080041
         STRING '   GPR04-07: ',(REGS+16,4,X),2X,(REGS+20,4,X),2X,     X28090039
               (REGS+24,4,X),2X,(REGS+28,4,X),INTO=LINE                 28100039
         BAL   R14,SPACE1          <== Print line                       28110041
         STRING '   GPR08-11: ',(REGS+32,4,X),2X,(REGS+36,4,X),2X,     X28120039
               (REGS+40,4,X),2X,(REGS+44,4,X),INTO=LINE                 28130039
         BAL   R14,SPACE1          <== Print line                       28140041
         STRING '   GPR12-15: ',(REGS+48,4,X),12X,                     X28150039
               (REGS+56,4,X),2X,(REGS+60,4,X),EYECATCH,INTO=LINE        28160039
         BAL   R14,SPACE1          <== Print line                       28170041
LINK299  END_PROC                                                       28180032
*                                                                       28190000
*---------------------------------------------------------------------- 28200000
*        PRINT OPEN FILES                                               28210000
*---------------------------------------------------------------------- 28220000
*                                                                       28230000
DEB000   BEGIN_PROC                                                     28240032
         ICM   R5,B'1111',TCBDEB       FIRST DEB                        28250000
         BZ    DEB099                  NO DEB, JUMP                     28260000
*LOOP                                                                   28270000
DEB011   SH    R5,=Y(DEBBASIC-DEBPREFX) POINT TO DEB PREFIX             28280000
         USING DEBPREFX,R5                                              28290000
         MVI   MINLINES,9                                               28300000
         LA    R0,DEBBASIC             POINT TO BASIC SECTION           28310000
         CLM   R0,B'0111',DCBDEBAD+1-IHADCB+DCBDEBUG  is it my own DCB? 28320022
         BE    DEB080                  YES, SKIP IT                     28330000
         ST    R0,WKCELL1+4            DEB ADDRESS FOR $PRINT           28340022
*                                                                       28350022
         BAS   R3,DEB032                                                28360022
         DC    C'VSAM',AL1(DEBAMVSM)                                    28370000
         DC    C'EXCP',AL1(DEBAMXCP)                                    28380000
         DC    C'SAM ',AL1(DEBAMSAM)                                    28390039
         DC    C'BDAM',AL1(DEBAMBDM)                                    28400000
         DC    C'JES ',AL1(DEBAMSUB)                                    28410039
         DC    C'VTAM',AL1(DEBAMVTM)                                    28420000
         DC    C'????',0H'0'                                            28430000
*--LOOP                                                                 28440000
DEB032   CLC   DEBAMTYP,4(R3)          IS THIS MY AMTYPE?               28450000
         BE    DEB040                  YES, JUMP                        28460000
         LA    R3,4+1(,R3)             BUMP TABLE PTR                   28470000
         CLI   0(R3),C'?'              END OF TABLE?                    28480000
         BNE   DEB032                  NEXT TABLE ENTRY                 28490000
*--ENDLOOP                                                              28500000
DEB040   SLR   R6,R6                   DCB/ACB addr set by VALDCB rtne  28510042
         BAL   R14,SWA000          <== locate DEB/DSAB/SIOT/JFCB/TIOT   28520042
         BAL   R14,VALDCB          <== LOCATE/VALIDATE DCB (or ACB)     28530042
         LTR   R6,R6                   CHECKED OUT OK?                  28540022
         BZ    DEB048                  NO, SKIP IT                      28550022
         ST    R6,WKCELL1              FOR $PRINT                       28560022
         LH    R0,DCBTIOT-IHADCB(,R6)  GET TIOT OFFSET FOR THIS DCB     28570022
         BAL   R14,EXCP00          <== GET EXCP COUNT IN R0             28580000
         B     DEB050                                                   28590022
*                                                                       28600022
DEB048   MVC   WKCELL1(4),DEBDCBAD     FOR $PRINT                       28610022
         MVC   DDNAME2(8),=C'********' DCB is bad                       28620023
         SLR   R0,R0                   EXCP=0                           28630022
         ICM   R15,B'1111',$SIOT       SIOT addr good?                  28640040
*EX 0,*                                                                 28650040
         BNP   DEB050                  no, exit                         28660040
         MVC   DDNAME2(8),SCTDDNAM-SIOT(R15)                            28670040
*                                                                       28680040
         L     R1,PSATOLD-PSA(,0)      MY TCB                           28690040
         L     R1,TCBTCT-TCB(,R1)      TCBTCT                           28700040
         USING SMFTCT,R1                                                28710040
         L     R1,TCTIOTBL             START OF I/O MEASUREMENT TABLE   28720040
         USING TCTTIOT,R1                                               28730040
         ICM   R15,B'1111',$DSAB       DSAB POINTER                     28740040
         BNP   DEB050                  no, exit                         28750040
         USING DSAB,R15                                                 28760040
         LH    R15,DSABTCTL            OFFSET TO TCT DD ENTRY           28770040
         LA    R15,TCTTIOT(R15)        DD LOOKUP TABLE ENTRY            28780040
         USING TCTIODSP,R15                                             28790040
         L     R15,TCTIOTSD            OFFSET TO I/O CTR ENTRY          28800040
         LA    R1,TCTTIOT(R15)         ADDRESS OF I/O CTR ENTRY         28810040
         USING TCTDDENT,R1                                              28820040
         L     R0,TCTDCTR              EXCP COUNT                       28830040
         DROP  R15,R1                                                   28840040
*                                                                       28850022
DEB050   IC    R1,DEBOPATB             OPEN OPTION                      28860022
         LA    R15,X'0F'               MASK FOR 'NR'                    28870000
         NR    R1,R15                  KEEP ONLY X'0F' BITS             28880000
         IC    R1,OPENOPT1(R1)         GET OFFSET TO OPENOPT2 ENTRY     28890000
         LA    R1,OPENOPT2(R1)         POINT TO OPEN OPTION             28900000
*                                                                       28910022
         BAL   R14,BLANK1          <== BLANK LINE                       28920039
         CLI   DEBAMTYP,DEBAMVSM       VSAM?                            28930000
         BE    DEB060                  YES, JUMP                        28940000
         CLI   DEBAMTYP,DEBAMSUB       SUB-SYSTEM DATA SET?             28950000
         BE    DEB070                  YES, JUMP                        28960041
***      STRING '0',INTO=LINE121,                                      X28970039
               ((R3),4),' DEB: ',(WKCELL1+5,3,X),                      X28980032
               2X,((R1),6),            IN/OUT/UPD                      X28990032
               '  DCB: ',(WKCELL1+1,3,X),                              X29000032
               '  DDN: ',DDNAME2,                                      X29010032
               '  EXCP: ',((R0),,L)                                     29020022
         STRING '0DEB=',(WKCELL1+5,3,X),                               +29030039
               ',',((R3),4,T),         SAM/VSAM/JES                    +29040039
               ',',((R1),6,T),         INPUT/OUTPUT/UPDATE/EXTEND/OUTIN+29050039
               ',DCB=',(WKCELL1+1,3,X),                                +29060039
               ',DDN=',(DDNAME2,,T),                                   +29070039
               ',EXCP=',((R0),,L),                                     +29080039
               INTO=LINE121                                             29090039
         TM    DEBFLGS1,DEBEOFDF       EOF flag ON?     IECEQU=DEBF1EOF 29100040
*LASTVOL BO    DEB056                  yes, jump                        29110040
*LASTVOL TM    DEBOFLGS,DEBEOF         EOF flag ON?     IECEQU=DEBOFEOF 29120040
         BZ    DEB057                  no, jump                         29130040
DEB056   LA    R15,LINE121(R15)        end of text                      29140040
         MVC   0(4,R15),=C',EOF'       append indicator                 29150040
DEB057   BAL   R14,SPACE1          <== Print line                       29160041
         CLI   DDNAME2,C'*'            DCB OK?                          29170022
         BE    DEB080                  no, exit                         29180022
         BAL   R14,PRDCB           <== PRINT DCB DATA                   29190000
         B     DEB080                                                   29200000
*                   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F      29210053
OPENOPT1 DC    AL1(00,06,00,12,18,00,42,24,00,00,00,00,00,00,30,36)     29220053
OPENOPT2 DC    C'INPUT RDBACKINOUT UPDAT OUTIN EXTENDOUTPUTOUTINX'      29230053
*                                                                       29240022
DEB060   STRING '0DEB=',(WKCELL1+5,3,X),                           VSAM+29250041
               ',',((R3),4,T),         VSAM                            +29260041
               ',ACB=',(WKCELL1,4,X),                                  +29270039
               ',DDN=',(DDNAME2,,T),                                   +29280039
               ',EXCP=',((R0),,L),                                     +29290039
               INTO=LINE121                                             29300039
         BAL   R14,SPACE1          <== Print line                       29310041
         CLI   DDNAME2,C'*'            ACB OK?                          29320022
         BE    DEB080                  no, exit                         29330022
         BAL   R14,PRACB           <== PRINT ACB/PLH (VSAM/JES)         29340022
         B     DEB080                                                   29350041
*                                                                       29360041
DEB070   STRING '0DEB=',(WKCELL1+5,3,X),                         SUBSYS+29370041
               ',',((R3),4,T),         SUBSYS                          +29380041
               ',',((R1),6,T),         INPUT/OUTPUT/UPDATE/EXTEND/OUTIN+29390041
               ',ACB=',(WKCELL1,4,X),                                  +29400041
               ',DDN=',(DDNAME2,,T),                                   +29410041
               ',EXCP=',((R0),,L),                                     +29420041
               INTO=LINE121                                             29430041
         BAL   R14,SPACE1          <== Print line                       29440041
         CLI   DDNAME2,C'*'            ACB OK?                          29450041
         BE    DEB080                  no, exit                         29460041
         BAL   R14,PRACB           <== PRINT ACB/PLH (VSAM/JES)         29470041
*                                                                       29480000
DEB080   ICM   R5,B'0111',DEBDEBAD+1   NEXT DEB IN CHAIN                29490000
         BNZ   DEB011                  TRY NEXT DCB                     29500000
*ENDLOOP                                                                29510000
DEB099   END_PROC                                                       29520032
*                                                                       29530022
*---------------------------------------------------------------------- 29540022
*        Print SDWA                                                     29550022
*---------------------------------------------------------------------- 29560022
*                                                                       29570022
PRWA00   BEGIN_PROC                                                     29580032
         STRING '0SCHEDULER WORK AREA',INTO=LINE121                     29590039
         BAL   R14,SPACE1          <== Print line                       29600041
         LA    R0,SDWALEN              LENGTH                           29610022
         LA    R1,SDWA                 ADDRESS                          29620022
         BAL   R14,DUMP32          <== PRINT SDWA                       29630022
PRWA99   END_PROC                                                       29640032
*                                                                       29650000
*---------------------------------------------------------------------- 29660000
*        GET EXCP COUNT FROM TCT                                        29670000
*---------------------------------------------------------------------- 29680000
*                                                                       29690000
EXCP00   BEGIN_PROC                                                     29700032
         L     R1,PSATOLD-PSA(,0)      MY TCB                           29710000
         L     R1,TCBTCT-TCB(,R1)      TCBTCT                           29720000
         L     R1,TCTIOTBL-SMFTCT(,R1) START OF I/O MEASUREMENT TABLE   29730000
         LA    R1,TCTIODSP-TCTTIOT(,R1) FIRST DD ENTRY                  29740000
         USING TCTDCBTD,R1                                              29750000
*LOOP                                                                   29760000
EXCP11   CL    R0,TCTDCBTD             SAME TIOT OFFSET?                29770000
         BE    EXCP21                  YES, EXIT LOOP                   29780000
         ICM   R15,B'1111',TCTDCBLE    END OF TABLE ?                   29790000
         LA    R1,TCTDCBLE             NEXT LOOKUP TABLE ENTRY          29800053
         BNZ   EXCP11                  NOT YET, TRY NEXT DD ENTRY       29810000
*ENDLOOP                                                                29820000
         SLR   R0,R0                   EXCP COUNT IS ZERO               29830000
         B     EXCP99                                                   29840000
*                                                                       29850000
EXCP21   L     R1,TCTIOTSD             OFFSET IN I/O MEASURE. TABLE     29860000
         L     R15,PSATOLD-PSA(,0)     MY TCB                           29870000
         L     R15,TCBTCT-TCB(,R15)    MY TCT                           29880000
         A     R1,TCTIOTBL-SMFTCT(,R15) START OF I/O MEASUREMENT TABLE  29890000
         USING TCTDDENT,R1                                              29900000
         ICM   R0,B'1111',TCTDCTR      EXCP COUNT IN R0                 29910000
EXCP99   LR    R1,R0                   EXCP COUNT IN R1 TOO             29920000
         END_PROC                                                       29930032
         DROP  R1                                                       29940000
*                                                                       29950000
*---------------------------------------------------------------------- 29960000
*        CONVERT UCBTYP TO UNITNAME                                     29970000
*---------------------------------------------------------------------- 29980000
*                                                                       29990000
GETUNIT  BEGIN_PROC                                                     30000032
         MVI   TENWORDS+20,X'01'       RETURN A LOOK-UP VALUE (BIT7)    30010000
         MVI   TENWORDS+21,X'00'       CLEAR UNUSED BYTE                30020000
         LA    R14,UNITNAME        <== UNITNAME+DEVTYPE                 30030000
         LA    R15,TENWORDS+20         FLAGS                            30040000
         STM   R14,R15,TENWORDS    <==                                  30050000
         OI    TENWORDS+4,X'80'        END-OF-LIST FLAG                 30060000
         LA    R1,TENWORDS             PARM LIST ADDRESS                30070000
         L     R15,IEFEB4UV            LOAD ROUTINE ADDRESS             30080000
         BALR  R14,R15             <== GET UNIT NAME                    30090000
         LTR   R15,R15                                                  30100000
         BNZ   GETUNIT6                BAD RETURN CODE, QUIT            30110000
         MVI   TENWORDS+20,X'20'       RETURN A UNIT NAME (BIT2)        30120000
         LA    R1,TENWORDS             PARM LIST ADDRESS                30130000
         L     R15,IEFEB4UV            LOAD ROUTINE ADDRESS             30140000
         BALR  R14,R15             <== GET UNIT NAME                    30150000
         LTR   R15,R15                                                  30160000
         BZ    GETUNIT9                GOOD RETURN CODE, GOBACK         30170000
GETUNIT6 MVC   UNITNAME,BLANKS         CONVERSION DID NOT WORK          30180000
GETUNIT9 DS    0H                                                       30190000
         END_PROC                                                       30200032
*                                                                       30210000
*---------------------------------------------------------------------- 30220000
*        VALIDATE DCB, FIND TIOT OFFSET                                 30230000
*---------------------------------------------------------------------- 30240000
*                                                                       30250000
VALDCB   BEGIN_PROC                                                     30260032
        #S0C4  VALDCB8                                                  30270000
         CLI   $ACB,FF                 VSAM/SUBSYS?                     30280042
         BNZ   VALDCB3                 YES, JUMP                        30290042
         USING DEBPREFX,R5                                              30300042
         USING IHADCB,R6                                                30310042
         TM    DCBTIOT,X'C0'           IS DCB OPEN?                     30320042
         BNZ   VALDCB5                 NO, JUMP                         30330042
*                                                                       30340000
*        VALIDATE DCB/DEB CROSS POINTERS                                30350000
*                                                                       30360000
         CLI   OCE_CODE,C'O'           OPEN SVC?                @921015 30370000
         BE    VALDCB3                 YES, SKIP DEB VALIDATION         30380000
         LTR   R5,R5                   DEB address set already?         30390042
         BNZ   VALDCB3                 YES, SKIP DEB VALIDATION         30400042
         SLR   R1,R1                                                    30410000
         ICM   R1,B'0111',DCBDEBAD+1   PICK UP DEB ADDRESS              30420000
         BZ    VALDCB8                 BAD, QUIT                        30430000
         CLM   R6,B'0111',DEBDCBAD+1-DEBBASIC(R1) COMP W/ DCB ADDR      30440000
         BNE   VALDCB8                 BAD, QUIT                        30450000
         SLR   R5,R5                                                    30460000
         ICM   R5,B'0111',DCBDEBAD+1   GET DEB ADDRESS          @920408 30470000
         SH    R5,=Y(DEBBASIC-DEBPREFX) POINT TO DEB PREFIX     @920408 30480000
*                                                                       30490000
*        LOCATE CORRESPONDING TIOT ENTRY                                30500000
*                                                                       30510000
VALDCB3  L     R1,TCBTIO               TIOT ADDRESS                     30520000
         LA    R1,0024(,R1)            FIRST DD ENTRY                   30530000
*LOOP                                                                   30540000
VALDCB3B CLI   4(R1),C' '              BLANK DDNAME?                    30550000
         BNH   VALDCB3F                YES, JUMP                        30560000
         MVC   DDNAME,4(R1)            SAVE DDNAME                      30570000
         SLR   R15,R15                 CONCAT#                          30580000
         B     VALDCB3G                                                 30590000
VALDCB3F LA    R15,1(,R15)             BUMP CONCAT#                     30600000
VALDCB3G CL    R1,$TIOT                is it my DD entry?               30610042
         BE    VALDCB4                 YES, QUIT                        30620000
         SLR   R0,R0                                                    30630000
         IC    R0,0(,R1)               LOAD TIOELNGH                    30640000
         AR    R1,R0                   NEXT TIOT ENTRY                  30650000
         CLI   0(R1),00                END-OF-TIOT REACHED?             30660000
         BNE   VALDCB3B                NOT YET, LOOP FURTHER            30670000
*ENDLOOP                                                                30680000
         B     VALDCB8                 END OF TIOT, QUIT                30690000
*                                                                       30700000
VALDCB4  MVC   DDNAME2,BLANKS          CLEAR WORK AREA                  30710000
         MVC   DDNAME2(8),DDNAME       SAVE DDNAME                      30720000
         LTR   R0,R15                  PASS CONCAT#                     30730000
         BZ    VALDCB9                 FIRST IN CONCAT, JUMP            30740000
         STRING (DDNAME,,T),'+',((R0),,R3Z),INTO=DDNAME2 SYSIN+002      30750000
         B     VALDCB9                                                  30760000
*                                                                       30770000
*        NON-OPEN DCB                                                   30780000
*                                                                       30790000
VALDCB5  CLI   DCBOFLGS,2              OPEN FLAGS OK?                   30800000
         BNE   VALDCB8                 NO, JUMP                         30810000
         MVC   DDNAME,DCBDDNAM         SAVE DDNAME                      30820000
         MVC   DDNAME2,DCBDDNAM        SAVE DDNAME                      30830000
         TR    DDNAME2,TRTPRINT                                         30840000
         CLC   DDNAME2,DCBDDNAM        GOOD DDNAME?                     30850000
         BE    VALDCB9                 YES, JUMP                        30860041
*                                                                       30870000
VALDCB8  SR    R6,R6                   NOT A DCB, GOBACK                30880000
         MVC   DDNAME,BLANKS           CLEAR DDN                        30890000
         MVC   DDNAME2,BLANKS          CLEAR DDN                        30900000
VALDCB9 #S0C4  RESET                                                    30910000
         END_PROC                                                       30920032
*                                                                       30930040
*---------------------------------------------------------------------- 30940040
*        Locate DSAB/SIOT/JFCB/TIOT from DEB extension                  30950040
*---------------------------------------------------------------------- 30960040
*                                                                       30970040
SWA000   BEGIN_PROC                                                     30980040
         MVI   $DCB,FF                 invalidate DCB address           30990042
         MVI   $ACB,FF                 invalidate ACB address           31000042
         MVI   $DSAB,FF                invalid address                  31010042
         MVI   $SIOT,FF                invalid address                  31020042
         MVI   $JFCB,FF                invalid address                  31030042
         MVI   $TIOT,FF                invalid address                  31040042
*                                                                       31050042
*        retrieve DCB/ACB address from DEB if R5=A(DEBPREFX)            31060042
*                                                                       31070042
SWA010   LTR   R5,R5                   DEB addr valid?                  31080042
         BZ    SWA020                  no, jump                         31090042
         USING DEBPREFX,R5                                              31100042
         LTR   R6,R6                   DCB/ACB addr valid?              31110042
         BNZ   SWA025                  yes, jump                        31120042
         ICM   R6,B'0111',DEBDCBAD+1   24-bit DCB/ACB addr              31130042
         CLI   DEBAMTYP,DEBAMSUB       AM=SUBSYS?                       31140042
         BE    SWA018                  yes, jump                        31150042
         CLI   DEBAMTYP,DEBAMVSM       AM=VSAM?                         31160042
         BNE   SWA025                  no, process DCB                  31170042
*                                                                       31180042
*        AM=VSAM                                                        31190042
*                                                                       31200042
SWA017   ST    R6,$ACB                 ACB address (24-bit)             31210042
         ICM   R0,B'1111',DEBRRQ       do we have an RMODE31 ACB?       31220042
         BZ    SWA030                  no, use RMODE24 ACB              31230042
         LR    R6,R0                   yes, use RMODE31 ACB             31240042
         B     SWA030                  Process ACB                      31250042
*                                                                       31260042
*        AM=SUBSYS                                                      31270042
*                                                                       31280042
SWA018   ST    R6,$ACB                 ACB address                      31290042
         ICM   R0,B'1111',DEBRRQ       do we have a DCB?                31300042
         BZ    SWA030                  no, use ACB                      31310042
         LR    R6,R0                   yes, use DCB                     31320042
         B     SWA025                  Process ACB                      31330042
*                                                                       31340042
*        if invoked with R5=0, set DEB addr from DCB/ACB                31350042
*                                                                       31360042
SWA020   LTR   R6,R6                   DCB/ACB addr valid?              31370042
         BZ    SWA090                  no, exit                         31380042
         TM    DCBOFLGS,DCBOFOPN       OPEN DCB?                        31390048
         BZ    SWA090                  no, exit                         31400048
         ICM   R5,B'0111',DCBDEBAD+1   DEB address from DCB/ACB         31410042
         SH    R5,=Y(DEBBASIC-DEBPREFX)  point at DEB prefix            31420042
*                                                                       31430042
SWA025   ST    R6,$DCB                 DCB address                      31440042
         USING IHADCB,R6                                                31450042
*                                                                       31460040
*        retrieve DSAB addr from DEB extension                          31470042
*                                                                       31480042
SWA030   TM    DEBFLGS1,DEBXTNIN       do we have a DEB extension?      31490042
         BZ    SWA090                  no, exit                         31500040
         ICM   R1,B'1111',DEBXTNP      DEB extension                    31510040
         BZ    SWA090                  zero, exit                       31520040
         USING DEBXTN,R1                                                31530040
         ICM   R2,B'1111',DEBXDSAB     OPENJ DSAB pointer               31540040
         BNZ   SWA035                  non-zero, jump                   31550042
         ICM   R2,B'1111',DEBXDSAB     DSAB pointer                     31560040
         BZ    SWA090                  no DSAB, exit                    31570040
         USING DSAB,R2                                                  31580040
SWA035   CLC   DSABID,=C'DSAB'         is this a DSAB?                  31590042
         BNE   SWA090                  no DSAB, jump                    31600040
         ICM   R1,B'1111',DSABSIOT     SIOT ptr                         31610040
         BNZ   SWA040                  ok, jump                         31620040
         LA    R1,TENWORDS+4           WORK AREA                        31630040
         ST    R1,TENWORDS             WORK AREA                        31640040
         USING ZB505,R1                                                 31650040
         XC    SWAEPAX,SWAEPAX         CLEAR WORK AREA                  31660040
         MVC   SWVA,DSABSSVA           SVA OF THE SIOT                  31670040
         DROP  R1                                                       31680040
         SWAREQ FCODE=RL,EPA=TENWORDS,MF=(E,SWAREQL1),UNAUTH=YES        31690040
         L     R1,SWBLKPTR-ZB505+TENWORDS+4  31-BIT ADDRESS OF SIOT     31700040
*                                                                       31710040
SWA040   ST    R2,$DSAB                DSAB ADDRESS                     31720040
         ST    R1,$SIOT                SIOT ADDRESS                     31730040
         USING INDMSIOT,R1                                              31740040
         MVC   $JFCB,SJFCBPTR          JFCB pointer                     31750040
         MVC   $TIOT,DSABTIOT          TIOENTRY pointer                 31760040
         DROP  R2,R1                   DSAB,SIOT                        31770040
*                                                                       31780040
SWA090   END_PROC                                                       31790040
         DROP  R5,R6                   DEB, DCB                         31800000
*                                                                       31810000
*---------------------------------------------------------------------- 31820000
*        PRINT DCB INFORMATION                                          31830000
*---------------------------------------------------------------------- 31840000
*                                                                       31850000
PRDCB    BEGIN_PROC                                                     31860032
         USING DEBPREFX,R5                                              31870000
         USING IHADCB,R6                                                31880000
         LTR   R6,R6                   DCBADDR=0?                       31890040
         BNP   PRDCB99                 yes, ignore                      31900040
         ST    R6,WKCELL1              STORE DCB ADDRESS                31910000
*                                                                       31920000
         LA    R15,=C'ISPSDAPOVS??'                                     31930000
         TM    DCBDSORG+0,X'80'        IS                               31940000
         BO    PRDCB07                 IS                               31950000
         LA    R15,2(,R15)                                              31960000
         TM    DCBDSORG+0,X'40'        PS                               31970000
         BO    PRDCB07                 PS                               31980000
         LA    R15,2(,R15)                                              31990000
         TM    DCBDSORG+0,X'20'        DA                               32000000
         BO    PRDCB07                 DA                               32010000
         LA    R15,2(,R15)                                              32020000
         TM    DCBDSORG+0,X'02'        PO                               32030000
         BO    PRDCB07                 PO                               32040000
         LA    R15,2(,R15)                                              32050000
         TM    DCBDSORG+1,X'08'        VS                               32060000
         BO    PRDCB07                 VS                               32070000
         LA    R15,2(,R15)                                              32080000
PRDCB07  MVC   XDSORG,0(R15)           MOVE DSORG                       32090000
*                                                                       32100000
         MVC   XRECFM,BLANKS                                            32110000
         LA    R1,XRECFM               START OF WORK AREA               32120000
         TM    DCBRECFM,DCBRECF        F/V/U                            32130000
         BNO   PRDCB08V                F/V/U                            32140000
         MVI   0(R1),C'F'              F/V/U                            32150000
PRDCB08V TM    DCBRECFM,DCBRECV        F/V/U                            32160000
         BNO   PRDCB08U                F/V/U                            32170000
         MVI   0(R1),C'V'              F/V/U                            32180000
PRDCB08U TM    DCBRECFM,DCBRECU        F/V/U                            32190000
         BNO   PRDCB08B                F/V/U                            32200000
         MVI   0(R1),C'U'              F/V/U                            32210000
PRDCB08B TM    DCBRECFM,DCBRECBR       .B                               32220000
         BNO   PRDCB08S                .B                               32230000
         MVI   1(R1),C'B'              .B                               32240000
         LA    R1,1(,R1)                                                32250000
PRDCB08S TM    DCBRECFM,X'08'          ..S                              32260000
         BNO   PRDCB08A                ..S                              32270000
         MVI   1(R1),C'S'              ..S                              32280000
         LA    R1,1(,R1)                                                32290000
PRDCB08A TM    DCBRECFM,X'04'          ...A                             32300000
         BNO   PRDCB08M                ...A                             32310000
         MVI   1(R1),C'A'              ...A                             32320000
PRDCB08M TM    DCBRECFM,X'02'          ...M                             32330000
         BNO   PRDCB08Z                ...M                             32340000
         MVI   1(R1),C'M'              ...M                             32350000
PRDCB08Z EQU   *                                                        32360000
         TM    DCBMACRF,DCBMRECP       EXCP DCB?                        32370000
         BO    PRDCB31                 YES, JUMP                        32380000
         TM    DCBMACRF,DCBMRGET       QSAM DCB?                        32390000
         BO    PRDCB41                 YES, JUMP                        32400000
         TM    DCBMACRF+1,DCBMRPUT     QSAM DCB?                        32410000
         BO    PRDCB41                 YES, JUMP                        32420000
         MVI   WKCELL1,C'P'            A "P" FOR BPAM                   32430000
         TM    DCBDSORG,JFCORGPO       BPAM DCB?                        32440000
         BO    PRDCB11                 YES, JUMP                        32450000
         MVI   WKCELL1,C'D'            A "D" FOR BDAM                   32460000
         TM    DCBDSORG,JFCORGDA       BDAM DCB?                        32470000
         BO    PRDCB11                 YES, JUMP                        32480000
         MVI   WKCELL1,C'S'            A "S" FOR BSAM                   32490000
PRDCB11  MVI   MINLINES,6                                               32500000
         STRING '0  B',(WKCELL1,1),'AM',                               X32510000
               ' DCB AT LOCATION ',(WKCELL1+1,3,X),                    X32520000
               6X,'RECFM=',(XRECFM,,T),                                X32530000
               ',LRECL=',(DCBLRECL,H,L),                               X32540000
               ',BLKSIZE=',(DCBBLKSI,H,L),                             X32550000
               ',BUFNO=',(DCBBUFNO,FL1,L),                             X32560000
               ',NCP=',(DCBNCP,FL1,L),                                 X32570000
               ',BUFL=',(DCBBUFL,H,L),                                 X32580000
               ',DSORG=',(XDSORG,,T),INTO=LINE121                       32590039
         BAL   R14,SPACE1          <== Print line                       32600041
         LA    R0,DCBLNGPO             LENGTH                           32610000
         LA    R1,IHADCB               ADDRESS                          32620000
         BAL   R14,DUMP32          <== PRINT IT                         32630000
*                                                                       32640029
*        Print DCBE, if present                                         32650029
*                                                                       32660029
         TM    DCBEODAD,DCBH0+DCBH1    Is DCBDCBE valid ?               32670029
         BNO   PRDCB16                 no, jump                         32680029
         L     R1,DCBDCBE              A(DCBE)                          32690029
         USING DCBE,R1                                                  32700029
         OC    DCBE(DCBEMINL),DCBE     validate                         32710029
         MVI   MINLINES,6                                               32720029
         STRING '0  DCBE AT LOCATION ',(DCBDCBE,,X),INTO=LINE121        32730039
         BAL   R14,SPACE1          <== print header                     32740039
         LH    R0,DCBELEN              length of DCBE                   32750029
         BAL   R14,DUMP32          <== print DCBE                       32760029
*                                                                       32770000
*        LOOK FOR DECB IF S001-XX ABEND                                 32780000
*                                                                       32790000
PRDCB16  CLI   OCE_CODE,C'E'           S001 ABEND?                      32800029
         BNE   PRDCB21                 NO, JUMP                         32810000
         L     R1,FRSTSVRB             LOAD ADDR OF FIRST SVRB          32820000
         L     R1,RBGRS4-RBPREFIX(,R1) R1 POINTS TO DECB                32830000
        #S0C4  PRDCB21                                                  32840000
         C     R6,DECDCBAD-DECB(,R1)   IS THIS MY DCB?                  32850000
         BNE   PRDCB21                 NO, QUIT                         32860000
         ST    R1,WKCELL1              STORE DECB ADDRESS               32870000
         STRING '0  DECB AT LOCATION ',(WKCELL1+1,3,X),INTO=LINE121     32880039
         BAL   R14,SPACE1          <== Print line                       32890041
         LA    R0,020                  LENGTH OF DECB                   32900000
         BAL   R14,DUMP32          <== PRINT DECB                       32910000
         L     R2,DECIOBPT-DECB(,R1)   PICK UP IOB ADDRESS FROM DECB+16 32920000
         USING IOBSTDRD-8,R2                                            32930000
         CL    R6,IOBDCBPT             IS THIS MY DCB?                  32940000
         BE    PRDCB24                 YES, JUMP                        32950000
*                                                                       32960000
*        LOCATE CURRENT IOB FROM DCBIOBA (DCB+68)                       32970041
*                                                                       32980000
PRDCB21 #S0C4  RESET                                                    32990000
         SLR   R2,R2                                                    33000000
         ICM   R2,B'0111',DCBIOBA+1    GET IOB ADDRESS (DCB+68)         33010000
         CLI   DCBNCP,1                NCP>1?                           33020000
         BNH   PRDCB24                 NO, JUMP                         33030000
         ICM   R2,B'0111',DCBICQE+1    YES, GET ICQE ADDRESS (DCB+28)   33040000
         STRING '0  ICQE AT LOCATION ',(DCBICQE+1,3,X),INTO=LINE121     33050039
         BAL   R14,SPACE1          <== Print line                       33060041
         LA    R0,032                  ICQE SIZE                        33070000
         LR    R1,R2                   ICQE ADDRESS                     33080000
         BAL   R14,DUMP32          <== PRINT ICQE                       33090000
         L     R2,ICQFIRST-ICQE(,R2)   POINT TO FIRST IOB IN CHAIN      33100000
         ICM   R2,B'1000',X00          zero first byte                  33110040
*SAMB    L     R2,ICQIOBAD-ICQE(,R2)   POINT TO IOB IN SAMB             33120000
*SAMB    SH    R2,=H'16'               POINT TO START OF SAMB           33130000
*SAMB    ST    R2,WKCELL1              STORE FOR STRING                 33140000
*SAMB    STRING '0  SAMB AT ADDRESS ',(WKCELL1+1,3,X),INTO=LINE         33150039
*SAMB    BAL   R14,SPACE1          <== Print line                       33160041
*SAMB    LA    R0,256                  SAMB SIZE                        33170000
*SAMB    LR    R1,R2                   SAMB ADDRESS                     33180000
*SAMB    BAL   R14,DUMP32          <== PRINT ICQE                       33190000
*SAMB    LA    R2,8(,R2)               SAMIOB (IOB PREFIX)              33200000
*                                                                       33210000
*        PRINT CURRENT IOB                                              33220000
*                                                                       33230000
PRDCB24  CL    R2,REGION24             DOES THIS LOOK RIGHT?            33240000
         BL    PRDCB99                 NO, QUIT                         33250000
         CLI   DEBAMTYP,DEBAMSUB       JES DEB?                         33260040
         BE    PRDCB99                 YES, QUIT                        33270040
         LA    R0,IOBSTDRD             STANDARD SECTION                 33280000
         ST    R0,WKCELL1              STORE FOR STRING                 33290000
         MVI   MINLINES,6                                               33300000
         STRING '0  IOB AT LOCATION ',(WKCELL1+1,3,X),INTO=LINE121      33310039
         BAL   R14,SPACE1          <== Print line                       33320041
         STRING '0   -08 ',56X,(IOBPREFX+08,4,X),1X,(IOBPREFX+12,4,X), X33330000
               INTO=LINE121                                             33340039
         BAL   R14,SPACE1          <== Print line                       33350041
         LA    R0,064                  IOB SIZE                         33360000
         LA    R1,IOBSTDRD             IOB ADDRESS                      33370000
         O     R1,=X'80000000'         NO CTLCHR                        33380000
         BAL   R14,DUMP32          <== PRINT IOB                        33390000
         ICM   R1,B'0111',IOBECBPT+1   PICK UP DECB ADDRESS             33400013
        #S0C4  PRDCB99                 DECB addr may be bad             33410039
         LA    R0,IOBSTDRD             STANDARD SECTION                 33420000
         C     R0,DECIOBPT-DECB(,R1)   DOES THIS LOOK RIGHT?            33430000
         BNE   PRDCB99                 NO, QUIT                         33440000
         MVI   MINLINES,4                                               33450000
         STRING '0  DECB AT LOCATION ',(IOBECBPT+1,3,X),INTO=LINE121    33460039
         BAL   R14,SPACE1          <== Print line                       33470041
         LA    R0,020                  DECB SIZE                        33480000
         BAL   R14,DUMP32          <== PRINT DECB                       33490000
         B     PRDCB99                                                  33500000
         DROP  R2                      IOB                              33510039
*                                                                       33520000
PRDCB31  MVI   MINLINES,5                                               33530000
         STRING '0  EXCP DCB AT LOCATION ',(WKCELL1+1,3,X),            X33540000
               INTO=LINE121                                             33550039
         BAL   R14,SPACE1          <== Print line                       33560041
         LA    R0,DCBLNGXE             LENGTH                           33570000
         LA    R1,IHADCB               ADDRESS                          33580000
         BAL   R14,DUMP32          <== PRINT IT                         33590000
         B     PRDCB99                                                  33600000
*                                                                       33610000
PRDCB41  MVI   MINLINES,6                                               33620000
         STRING '(GL,PL)',INTO=XMACRF                                   33630039
         CLI   DEBOPATB,DEBUPDAT       OPENED FOR UPDATE?               33640039
         BE    PRDCB41S                yes, jump                        33650039
*                                                                       33660039
*        edit MACRF codes                                               33670039
*                                                                       33680039
         BAS   R1,PRDCB41B             BR AROUND TABLE                  33690039
         DC    C'G',AL1(DCBMRGET)      40 GET                           33700039
         DC    C'M',AL1(DCBMRMVG)      10 MOVE MODE                     33710039
         DC    C'L',AL1(DCBMRLCG)      08 LOCATE MODE                   33720039
         DC    C'T',AL1(DCBMRSBG)      04 SUBSTITUTE MODE               33730039
         DC    C'C',AL1(DCBMRCRL)      02 CNTRL                         33740039
         DC    C'D',AL1(DCBMRDMG)      01 DATA MODE                     33750039
         DC    2X'00'                                                   33760039
PRDCB41B MVC   WKCELL3,DCBMACF1        move macrf byte (input/update)   33770039
         TM    DEBOPATB,DEBXTEND       OPENED FOR EXTEND/OUTPUT?        33780053
         BNO   PRDCB41C                no, jump                         33790039
         MVC   WKCELL3,DCBMACF2        move macrf byte (output/extend)  33800039
         BAS   R1,PRDCB41C             BR AROUND TABLE                  33810039
         DC    C'P',AL1(DCBMRPUT)      40 PUT                           33820039
         DC    C'M',AL1(DCBMRMVP)      10 MOVE MODE                     33830039
         DC    C'L',AL1(DCBMRLCP)      08 LOCATE MODE                   33840039
         DC    C'T',AL1(DCBMRTMD)      04 SUBSTITUTE MODE               33850039
         DC    C'C',AL1(DCBMRCTL)      02 CNTRL                         33860039
         DC    C'D',AL1(DCBMRDMD)      01 DATA MODE                     33870039
         DC    2X'00'                                                   33880039
PRDCB41C TM    WKCELL3,*-*             DCBMACF1/DCBMACF2                33890039
         MVC   XMACRF,BLANKS                                            33900039
*loop                                                                   33910039
PRDCB41D IC    R14,1(,R1)              MASK                             33920039
         EX    R14,PRDCB41C                                             33930039
         BZ    PRDCB41E                                                 33940039
         STRING (XMACRF,,T),((R1),1),INTO=XMACRF                        33950039
PRDCB41E LA    R1,1+1(,R1)             NEXT ENTRY                       33960039
         CLI   0(R1),C'A'              end of table?                    33970039
         BNL   PRDCB41D                not yet, loop more               33980039
*endloop                                                                33990039
PRDCB41S MVC   OPNBLKSI+2(2),DCBBLKSI  move BLKSI from DCB              34000039
         MVC   OPNLRECL+2(2),DCBLRECL  move LRECL from DCB              34010039
         CLI   DEBAMTYP,DEBAMSUB       JES DEB?                         34020039
         BE    PRDCB41Z                YES, EXIT                        34030040
         CLI   DEBLNGTH,16             DEB long enough?                 34040040
         BL    PRDCB41L                NO, TRY LBI                      34050054
         SR    R1,R1                   CLEAR REGISTER                   34060039
         SR    R2,R2                   CLEAR REGISTER                   34070039
         IC    R1,DEBNMEXT             NUMBER OF EXTENTS                34080039
         IC    R2,DEBEXSCL             EXTENT SCALE                     34090039
         SLL   R1,0(R2)                SIZE OF EXTENT                   34100039
         LA    R2,DEBBASND(R1)         ADJ TO PROPER OFFSET             34110039
         USING DEBACSMD,R2             Access Method Extension          34120039
         LH    R14,DEBLRECL            Get DCBLRECL before OPEN         34130039
         LH    R15,DEBBLKSI            Get DCBBLKSI before OPEN         34140039
         DROP  R2                      DEB                              34150039
         LTR   R14,R14                 DEBLRECL=0?                      34160053
         BZ    PRDCB41X                yes, use DCBLRECL                34170053
         TM    DCBRECFM,DCBRECU        RECFM=U?                         34180053
         BO    PRDCB41X                yes, use DCBLRECL                34190053
         ST    R14,OPNLRECL            save it for later                34200053
PRDCB41X LTR   R15,R15                 DEBBLKSI=0?                      34210053
         BNZ   PRDCB41Y                no, use it                       34220054
PRDCB41L TM    DCBEODAD,DCBH0+DCBH1    Is DCBDCBE valid ?               34230054
         BNO   PRDCB41Z                no, use DCBLRECL                 34240054
         L     R1,DCBDCBE              A(DCBE)                          34250054
         USING DCBE,R1                                                  34260054
         TM    DCBEFLG1,DCBESLBI       LBI IN EFFECT?                   34270054
         BNO   PRDCB41Z                no, use DCBLRECL                 34280054
         L     R15,DCBEBLKSI           LBI block size                   34290054
         DROP  R1                      DCBE                             34300054
PRDCB41Y ST    R15,OPNBLKSI            save it for later                34310054
*                                                                       34320039
PRDCB41Z STRING '0  QSAM',                                             X34330039
               ' DCB AT LOCATION ',(WKCELL1+1,3,X),                    X34340000
               6X,'MACRF=',(XMACRF,,T),                                X34350039
               ',RECFM=',(XRECFM,,T),                                  X34360039
               ',LRECL=',(OPNLRECL,F,L),                               X34370039
               ',BLKSIZE=',(OPNBLKSI,F,L),                             X34380039
               ',BUFNO=',(DCBBUFNO,FL1,L),                             X34390000
               ',DSORG=',(XDSORG,,T),INTO=LINE121                       34400039
         TM    DCBBFTEK,DCBBFTA        BFTEK=A?                         34410054
         BNO   PRDCB41K                NO, JUMP                         34420054
         STRING (LINE121,,T),',BFTEK=A',INTO=LINE121                    34430054
PRDCB41K EQU   *                                                        34440054
         BAL   R14,SPACE1          <== print header                     34450039
         LA    R0,DCBLNGQS             LENGTH                           34460000
         LA    R1,IHADCB               ADDRESS                          34470000
         BAL   R14,DUMP32          <== print DCB                        34480029
*                                                                       34490029
*        Print DCBE, if present                                         34500029
*                                                                       34510029
         TM    DCBEODAD,DCBH0+DCBH1    Is DCBDCBE valid ?               34520029
         BNO   PRDCB42                 no, jump                         34530029
         L     R1,DCBDCBE              A(DCBE)                          34540029
         USING DCBE,R1                                                  34550029
         OC    DCBE(DCBEMINL),DCBE     validate                         34560029
         MVI   MINLINES,6                                               34570029
         STRING '0  DCBE AT LOCATION ',(DCBDCBE,,X),INTO=LINE121        34580039
         BAL   R14,SPACE1          <== print header                     34590039
         LH    R0,DCBELEN              length of DCBE                   34600029
         BAL   R14,DUMP32          <== print DCBE                       34610029
*                                                                       34620000
*        PRINT CURRENT RECORD FOR A QSAM DCB                            34630000
*                                                                       34640000
PRDCB42  CLI   OCE_CODE,C'O'           ABEND DURING OPEN?               34650029
         BNE   PRDCB42J                NO, JUMP                         34660032
         CL    R6,SDWAGR02             WAS THIS FOR THIS DCB?           34670000
         BE    PRDCB99                 YES, QUIT                        34680000
*                                                                       34690000
*        If it's a SAM-CI DCB with MACRF=PM, do not print the record    34700032
*        pointed to by DCBRECAD; the DFP V3 version of IGG019DJ (the    34710032
*        SAM-CI QSAM processor) does not move any data to the buffer.   34720032
*        The record should be printed from the JES2 unprotected         34730032
*        buffer in the PRACB routine.                                   34740032
*                                                                       34750032
PRDCB42J CLI   DEBAMTYP,DEBAMSUB       SUB-SYSTEM DATA SET?             34760032
         BNE   PRDCB43                 no, jump                         34770032
         TM    DEBOPATB,DEBXTEND       OPENED FOR EXTEND/OUTPUT?        34780053
         BNO   PRDCB43                 NO, JUMP                         34790029
         TM    DCBMACRF+1,DCBMRPUT+DCBMRMVP  MACRF=PM?                  34800000
         BNO   PRDCB43                 NO, JUMP                         34810029
         CLI   SPLEVEL,2               CHECK MVS/SP LEVEL               34820000
         BH    PRDCB99                 QUIT (MODE=O,MACRF=PM,SPLEVEL=3) 34830000
*                                                                       34840000
PRDCB43  LM    R0,R1,DCBEOBAD          R0=EOBAD,R1=RECAD                34850039
         TM    DCBEODAD,DCBH0+DCBH1    Is DCBDCBE valid ?               34860039
         BO    PRDCB43C                yes, jump                        34870039
         ICM   R0,B'1000',X00          zero first byte (DCBNCP)         34880039
         ICM   R1,B'1000',X00          zero first byte (DCBRECBT)       34890039
*                                                                       34900039
*        locate start of current buffer                                 34910039
*                                                                       34920039
PRDCB43C MVC   REASON,=C'EOB'          invalid value in DCBEOBAD        34930053
         CL    R0,REGION24             EOBAD VALID?                     34940039
         BL    PRDCB90                 NO RECORD YET, QUIT              34950039
         CLI   DEBAMTYP,DEBAMSUB       SUB-SYSTEM DATA SET?             34960040
         BE    PRDCB43J                yes, jump                        34970040
         L     R2,DCBIOBA              current IOB                      34980039
         ICM   R2,B'1000',X00          zero first byte                  34990040
         USING IOBSTDRD-8,R2                                            35000039
         CL    R6,IOBDCBPT             does this IOB look right?        35010040
         BNE   PRDCB43F                no, jump                         35020041
         MVC   WKCELL2,IOBCCW          move r/w CCW                     35030041
         B     PRDCB43G                                                 35040041
*                                                                       35050041
*        Process ICB pointed to by DCBIOBS (chained scheduling)         35060041
*                                                                       35070041
PRDCB43F MVC   REASON,=C'006'          invalid IOB/ICB                  35080053
         TM    DCBCIND2,DCBCNCHS       Chained scheduling (i.e. tape) ? 35090041
         BZ    PRDCB90                 no, we're lost                   35100041
         USING IOBCCW-32,R2            CCW is at ICB+32                 35110041
         MVC   WKCELL2,IOBCCW          move r/w CCW                     35120041
         DROP  R2                      IOB                              35130041
*                                                                       35140041
*        Get buffer addr from R/W CCW (or IDAW)                         35150041
*                                                                       35160041
PRDCB43G SLR   R14,R14                                                  35170041
         ICM   R14,B'0111',WKCELL2+1   get buffer addr from CCW         35180041
         TM    WKCELL2+4,X'04'         IDA bit on?                      35190041
         BZ    PRDCB43S                no, jump                         35200040
         L     R14,0(,R14)             get 31-bit buffer address        35210039
         B     PRDCB43S                                                 35220040
*                                                                       35230040
PRDCB43J LR    R14,R0                  PASS DCBEOBAD                    35240040
         SH    R14,DCBBLKSI            SUBTRACT BUFFER LENGTH FROM EOB  35250040
         BNP   PRDCB90                 NO RECORD YET, QUIT              35260040
*                                                                       35270040
PRDCB43S ST    R14,BUFFER              BEGINNING OF CURR BUFFER         35280040
*                                                                       35290000
         TM    DCBRECFM,DCBRECU        U?                               35300000
         BO    PRDCB60                 YES, JUMP                        35310039
         TM    DCBRECFM,DCBRECV        V/VB?                            35320000
         BO    PRDCB70                 YES, JUMP                        35330039
         LH    R2,DCBLRECL             RECORD LENGTH IF FB              35340000
         TM    DCBRECFM,DCBRECF+DCBRECBR   FB?                          35350000
         BO    PRDCB50                 YES, JUMP                        35360039
         LH    R2,DCBBLKSI             RECORD LENGTH IF F               35370000
*F/FB                                                                   35380000
PRDCB50  TM    DEBOPATB,DEBXTEND       OPENED FOR EXTEND/OUTPUT?        35390053
         BNO   PRDCB80                 NO, JUMP                         35400039
         SR    R1,R2                   GET ADDR OF CURRENT RECORD       35410000
         MVC   REASON,=C'REC'          invalid value in DCBRECAD        35420053
         C     R1,BUFFER               TOO LOW?                         35430000
         BL    PRDCB90                 YES, JUMP                        35440039
*                                                                       35450000
*        LOCATE PREVIOUS RECORD (RECFM=F/FB)                            35460039
*                                                                       35470000
         TM    DCBRECFM,DCBRECF+DCBRECBR   FB?                          35480000
         BNO   PRDCB80                 NO, JUMP                         35490039
         LR    R0,R1                   GET ADDR OF CURRENT RECORD       35500000
         SR    R0,R2                   GET ADDR OF PREVIOUS RECORD      35510000
         C     R0,BUFFER               PREV RCD IN CURR BUFFER?         35520000
         BL    PRDCB80                 NO, JUMP                         35530039
         MVI   MINLINES,6                                               35540000
         STRING '0    PREVIOUS RECORD:',INTO=LINE121                    35550041
         BAL   R14,SPACE1          <== PRINT HEADER                     35560039
         LR    R1,R0                   PASS ADDRESS                     35570000
         LR    R0,R2                   LENGTH                           35580000
         BAL   R14,PDUMP           <== DUMP PREVIOUS RECORD             35590000
         AR    R1,R2                   GET ADDR OF CURRENT RECORD       35600000
         B     PRDCB80                                                  35610039
*                                                                       35620000
*        LOCATE CURRENT RECORD (RECFM=U)                                35630039
*                                                                       35640000
PRDCB60  LH    R2,DCBLRECL             RECORD LENGTH IF U               35650046
         C     R1,BUFFER               IS THIS THE START OF THE BUFFER? 35660046
         BE    PRDCB80                 YES, JUMP                        35670039
         SLR   R1,R2                   NO, POINT TO START OF RECORD (U) 35680046
         B     PRDCB80                                                  35690039
*                                                                       35700039
*        LOCATE CURRENT RECORD (RECFM=V/VB)                             35710039
*                                                                       35720039
*          MACRF=GM       DCBRECAD=next                                 35730039
*          MACRF=GL       DCBRECAD=current                              35740039
*          MACRF=(GL,PL)  DCBRECAD=current                              35750039
*          MACRF=PM       DCBRECAD=next                                 35760039
*          MACRF=PL       DCBRECAD=current                              35770039
*                                                                       35780000
PRDCB70  TM    DEBOPATB,DEBXTEND       OPENED FOR EXTEND/OUTPUT?        35790053
         BO    PRDCB71                 yes, jump                        35800039
         LH    R15,0(,R14)             pick up block length from BDW    35810039
         ALR   R15,R14                 1st byte after current block     35820039
         MVC   REASON,=C'BDW'          BUFFER/BDW/EOBAD incompatible    35830053
         CLR   R15,R0                  same as DCBEOBAD?                35840039
         BNE   PRDCB90                 NO, QUIT                         35850039
*                                                                       35860039
PRDCB71  CLI   XMACRF+1,C'L'           LOCATE mode?                     35870039
         BE    PRDCB78                 YES, JUMP                        35880039
*                                                                       35890039
*        DCBRECAD=next, scan current buffer to locate record            35900039
*                                                                       35910039
         LR    R0,R1                   first byte after current record  35920039
         LA    R1,4(,R14)              first record (skip BDW)          35930039
         SLR   R2,R2                                                    35940039
*--loop                                                                 35950039
PRDCB73L ICM   R2,B'0011',0(R1)        length of current record (RDW)   35960039
         MVC   REASON,=C'012'          RDW<4                            35970053
         CH    R2,=H'4'                is record at least 4 bytes?      35980039
         BL    PRDCB90                 no, quit                         35990039
         MVC   REASON,=C'013'          RDW is not LLLL0000              36000053
         CL    R2,OPNLRECL             record longer than LRECL?        36010039
         BH    PRDCB90                 yes, quit                        36020039
         MVC   REASON,=C'014'          RDW is not LLLL0000              36030053
         ICM   R2,B'1100',2(R1)        3rd-4th bytes of RDW             36040039
         BNZ   PRDCB90                 NO, QUIT                         36050039
         ALR   R1,R2                   1st byte after record            36060039
         CLR   R1,R0                   is this the record I want?       36070039
         BL    PRDCB73L                not yet, keep on scannin'        36080039
*--endloop                                                              36090039
         MVC   REASON,=C'015'          V/VB scan failed                 36100053
         BH    PRDCB90                 too high, exit                   36110039
         SLR   R1,R2                   point to record again            36120039
*                                                                       36130039
PRDCB78  LH    R2,0(,R1)               RECORD LENGTH IF V/VB            36140039
         CLM   R2,B'0011',DCBLRECL     GOOD RDW?                        36150000
         BH    PRDCB90                 NO, QUIT                         36160039
*                                                                       36170039
*        PRINT CURRENT RECORD (F/V/U)                                   36180039
*                                                                       36190039
PRDCB80  MVC   REASON,=C'000'          length=0                         36200053
         LTR   R0,R2                   LENGTH=0?                        36210039
         BZ    PRDCB90                 YES, JUMP                        36220039
         MVI   MINLINES,6                                               36230000
         STRING '0    CURRENT RECORD:',INTO=LINE121                     36240041
** STRING '0    CURRENT RECORD ',((R0),,X),1X,((R1),,X),1X,((R2),,X),  X36250032
               INTO=LINE                                                36260039
         BAL   R14,SPACE1          <== Print line                       36270041
         BAL   R14,PDUMP           <== DUMP IT                          36280000
         ST    R6,CURR_REC             CURRENT RECORD HAS BEEN PRINTED  36290000
         B     PRDCB99                                                  36300000
*                                                                       36310000
PRDCB90  STRING '0    CURRENT RECORD IS NOT AVAILABLE (',REASON,')',   X36320041
               INTO=LINE121                                             36330039
*ORG PRDCB90                                                            36340041
*        STM   R14,R15,WKCELL1                                          36350041
*        STRING '0    CURRENT RECORD IS NOT AVAILABLE (',REASON,')',   X36360041
               2X,(BUFFER,,X),1X,(WKCELL1,4,X),1X,(WKCELL1+4,4,X),     X36370041
               1X,((R0),,X),1X,((R1),,X),1X,((R2),,X),                 X36380041
               INTO=LINE121                                             36390041
         BAL   R14,SPACE1          <== Print line                       36400041
PRDCB99  END_PROC                                                       36410032
*                                                                       36420000
*---------------------------------------------------------------------- 36430000
*        PRINT ACB INFORMATION (VSAM, JES)                              36440000
*---------------------------------------------------------------------- 36450000
*                                                                       36460000
PRACB    BEGIN_PROC                                                     36470032
         USING DEBPREFX,R5                                              36480000
         L     R6,$ACB                 pick up ACB address              36490042
         STRING '0  ACB AT LOCATION ',((R6),,X),'   MACRF=(',          X36500022
               INTO=LINE121                                             36510039
         USING IFGACB,R6                                                36520000
*                                                                       36530022
*        display MACRF                                                  36540022
*                                                                       36550022
         BAS   R1,PRACB11A             BR AROUND TABLE                  36560022
         DC    C'KEY',AL1(ACBKEY)      80 00 00                         36570022
         DC    C'ADR',AL1(ACBADR)      40 00 00                         36580022
         DC    C'CNV',AL1(ACBCNV)      20 00 00                         36590022
         DC    C'SEQ',AL1(ACBSEQ)      10 00 00                         36600022
         DC    C'DIR',AL1(ACBDIR)      08 00 00                         36610022
         DC    C'IN ',AL1(ACBIN)       04 00 00                         36620022
         DC    C'OUT',AL1(ACBOUT)      02 00 00                         36630022
         DC    C'UBF',AL1(ACBUBF)      01 00 00                         36640022
PRACB11A TM    ACBMACR1,*-*                                             36650022
*loop                                                                   36660022
PRACB11B IC    R14,3(,R1)              MASK                             36670022
         EX    R14,PRACB11A                                             36680022
         BZ    PRACB11C                                                 36690022
         STRING (LINE,,T),((R1),3,T),',',INTO=LINE                      36700039
PRACB11C LA    R1,3+1(,R1)             NEXT ENTRY                       36710022
         CLI   0(R1),C'A'              end of table?                    36720022
         BNL   PRACB11B                not yet, loop more               36730022
*endloop                                                                36740022
         BAS   R1,PRACB12A             BR AROUND TABLE                  36750022
         DC    C'BWO',AL1(ACBBWO)      00 20 00                         36760022
         DC    C'SKP',AL1(ACBSKP)      00 10 00                         36770022
         DC    C'RST',AL1(ACBRST) NRS  80 04 00                         36780022
         DC    C'DSN',AL1(ACBDSN)      00 02 00                         36790022
         DC    C'AIX',AL1(ACBAIX) NRM  00 01 00                         36800022
PRACB12A TM    ACBMACR2,*-*                                             36810022
*loop                                                                   36820022
PRACB12B IC    R14,3(,R1)              MASK                             36830022
         EX    R14,PRACB12A                                             36840022
         BZ    PRACB12C                                                 36850022
         STRING (LINE,,T),((R1),3,T),',',INTO=LINE                      36860039
PRACB12C LA    R1,3+1(,R1)             NEXT ENTRY                       36870022
         CLI   0(R1),C'A'              end of table?                    36880022
         BNL   PRACB12B                not yet, loop more               36890022
*endloop                                                                36900022
         BAS   R1,PRACB13A             BR AROUND TABLE                  36910022
         DC    C'NLW',AL1(ACBNLW)      00 00 80    macr3                36920022
         DC    C'LSR',AL1(ACBLSR) NSR  00 00 40                         36930022
         DC    C'GSR',AL1(ACBGSR)      00 00 20                         36940022
         DC    C'ICI',AL1(ACBICI)      00 00 10                         36950022
         DC    C'DFR',AL1(ACBDFR) NDF  00 00 08                         36960022
         DC    C'SIS',AL1(ACBSIS)      00 00 04                         36970022
**       DC    C'A31',AL1(ACBA31)      00 00 01                         36980022
PRACB13A TM    ACBMACR3,*-*                                             36990022
*loop                                                                   37000022
PRACB13B IC    R14,3(,R1)              MASK                             37010022
         EX    R14,PRACB13A                                             37020022
         BZ    PRACB13C                                                 37030022
         STRING (LINE,,T),((R1),3,T),',',INTO=LINE                      37040039
PRACB13C LA    R1,3+1(,R1)             NEXT ENTRY                       37050022
         CLI   0(R1),C'A'              end of table?                    37060022
         BNL   PRACB13B                not yet, loop more               37070022
*endloop                                                                37080022
         LA    R15,LINE-1(R15)         last comma                       37090039
         MVI   0(R15),C')'             close sub-list                   37100022
*                                                                       37110029
         MVI   $AMBL,FF                invalidate AMBL address          37120042
         MVI   $AMB_D,FF               invalidate DATA AMB address      37130042
         MVI   $AMB_I,FF               invalidate INDX AMB address      37140042
         MVI   $AMDSB_D,FF             invalidate DATA AMDSB address    37150042
         MVI   $AMDSB_I,FF             invalidate INDX AMDSB address    37160042
         MVI   $PLHDR,FF               invalidate PLH HEADER address    37170042
*                                                                       37180042
*        Locate/validate AMBL (VSAM data set only)                      37190042
*                                                                       37200042
         L     R2,ACBAMBL              POINT TO AMBL                    37210022
         USING AMBL,R2                                                  37220022
         C     R2,REGION24             VALIDATE AMBL                    37230042
         BL    PRACB18                 LOST, QUIT                       37240042
        #S0C4  PRACB18                                                  37250042
         CLC   AMBL(64),0              VALIDATE                         37260042
         CLI   AMBLID,X'50'            am I lost?                       37270022
         BNE   PRACB18                 yes, exit                        37280022
         CL    R6,AMBLACB              AM I LOST?                       37290030
         BNE   PRACB18                 yes, exit                        37300030
         ST    R2,$AMBL                AMBL address OK                  37310042
*                                                                       37320022
*        BUFNI/BUFND/STRNO                                              37330022
*                                                                       37340022
PRACB16  CLI   DEBAMTYP,DEBAMVSM       VSAM?                            37350022
         BNE   PRACB18                 NO, JUMP                         37360022
        #S0C4  PRACB18                                                  37370022
PRACB16I ICM   R3,B'1111',AMBLIX       INDEX AMB                        37380030
         BZ    PRACB16D                NO INDEX, JUMP                   37390022
         USING AMB,R3                                                   37400030
         CLI   AMBID,X'40'             am I lost?                       37410042
         BNE   PRACB16D                YES, JUMP                        37420042
         L     R1,AMBBUFC              INDEX BUFC HEADER                37430030
         CLI   0(R1),X'70'             am I lost?                       37440022
         BNE   PRACB16D                yes, exit                        37450022
         ST    R3,$AMB_I               INDEX AMB address OK             37460042
         MVC   $AMDSB_I,AMBDSB         INDEX AMDSB address OK           37470042
         STRING (LINE,,T),',BUFNI=',(BUFCBUFN-BUFC(R1),FL1,L),         X37480039
               INTO=LINE                                                37490039
PRACB16D L     R3,AMBLDTA              DATA AMB                         37500030
         C     R3,REGION24             VALIDATE AMB                     37510042
         BL    PRACB16S                LOST, QUIT                       37520042
         CLI   AMBID,X'40'             VALIDATE AMB                     37530042
         BNE   PRACB16S                LOST, QUIT                       37540042
         CLC   AMB(188),0              VALIDATE DATA AMB                37550042
         ST    R3,$AMB_D               DATA AMB address OK              37560042
         MVC   $AMDSB_D,AMBDSB         DATA AMDSB address OK            37570042
         L     R1,AMBBUFC              DATA BUFC HEADER                 37580030
         CLI   0(R1),X'70'             validate BUFC                    37590042
         BNE   PRACB16S                LOST, QUIT                       37600042
         STRING (LINE,,T),',BUFND=',(BUFCBUFN-BUFC(R1),FL1,L),         X37610039
               INTO=LINE                                                37620039
         TM    AMBFLG1,AMBCREAT        CREATE MODE?                     37630030
         BZ    PRACB16S                NO, JUMP                         37640030
         STRING (LINE,,T),',CREATE',INTO=LINE                           37650039
PRACB16S L     R1,AMBPH                PICK UP ADDR OF PLH HEADER       37660030
         CLI   PLHID-IDAPLHDR(R1),X'30' VALIDATE                        37670042
         BNE   PRACB18                 LOST, QUIT                       37680022
         STRING (LINE,,T),',STRNO=',(PLHCNT-IDAPLHDR(R1),H,L),         X37690042
               INTO=LINE                                                37700039
         ST    R1,$PLHDR               PLH HEADER addr OK               37710042
*                                                                       37720022
PRACB18  MVI   MINLINES,6                                               37730022
         BAL   R14,SPACE1          <== print ACB address & MACRF        37740039
         LH    R0,ACBLENG              ACB LENGTH                       37750022
         LA    R1,IFGACB               ACB ADDRESS                      37760000
         BAL   R14,DUMP32          <== PRINT ACB                        37770000
*                                                                       37780000
         CLI   DEBAMTYP,DEBAMSUB       SUB-SYSTEM DATA SET?             37790000
         BE    PRACB70                 YES, JUMP                        37800000
         CLI   DEBAMTYP,DEBAMVSM       VSAM?                            37810000
         BNE   PRACB99                 NO, EXIT                         37820042
         CL    R2,$AMBL                AMBL address OK ?                37830042
         BNE   PRACB99                 NO, EXIT                         37840042
*                                                                       37850000
*        PRINT VSAM CONTROL BLOCKS                                      37860000
*                                                                       37870000
PRACB20  MVC   MSG60,BLANKS            optional attributes              37880042
         LA    R1,=C'DUMMY'                                             37890042
         TM    AMBLFLG1,AMBLDUMY       DD DUMMY?                        37900042
         BO    PRACB20X                YES, JUMP                        37910042
         LA    R1,=C'KSDS '                                             37920042
         TM    AMBLQ,AMBLKSDS          IS THIS A KSDS?                  37930042
         BO    PRACB20X                YES, JUMP                        37940042
         ICM   R3,B'1111',$AMB_D       DATA AMB                         37950042
         BNP   PRACB26                 BAD, JUMP                        37960042
         LA    R1,=C'LDS  '                                             37970042
         TM    AMBFLG0,AMBLDS          Is this an LDS?                  37980042
         BO    PRACB20X                YES, JUMP                        37990042
         L     R14,$AMDSB_D            A(AMDSB)                         38000042
         LA    R1,=C'RRDS '                                             38010042
         TM    AMDATTR-AMDSB(R14),AMDRRDS Is this an RRDS?              38020042
         BO    PRACB20X                YES, JUMP                        38030042
         LA    R1,=C'ESDS '                                             38040042
PRACB20X MVC   MSG60(5),0(R1)          DUMMY/KSDS/LDS/RRDS/ESDS         38050042
*                                                                       38060042
         TM    AMBLSHAR,AMBLWRIT       Update mode?                     38070042
         BNO   PRACB22                 NO, JUMP                         38080042
         STRING (MSG60,,T),',UPDATE',INTO=MSG60                         38090042
*                                                                       38100042
PRACB22  EQU   *                                                        38110042
*                                                                       38120042
PRACB26  MVI   MINLINES,6                                               38130042
         STRING '0  AMBL AT LOCATION ',(ACBAMBL,,X),6X,MSG60,          X38140042
               INTO=LINE121                                             38150042
         BAL   R14,SPACE1          <== Print line                       38160041
         SLR   R0,R0                                                    38170022
         IC    R0,AMBLLEN              AMBL LENGTH                      38180022
         LA    R1,AMBL                 AMBL ADDRESS                     38190022
         BAL   R14,DUMP32          <== PRINT AMBL                       38200000
*                                                                       38210000
*        Print DATA AMB                                                 38220042
*                                                                       38230042
         LA    R0,188                  AMB LENGTH                       38240000
         ICM   R1,B'1111',$AMB_D       DATA AMB                         38250042
         BNP   PRACB99                 BAD, QUIT                        38260042
         MVI   MINLINES,9                                               38270000
         STRING '0  DATA AMB AT LOCATION ',((R1),,X),                  X38280032
               '  DSNAME=',AMBDSNM,                                    X38290032
               INTO=LINE121                                             38300039
         BAL   R14,SPACE1          <== PRINT HEADER                     38310039
         BAL   R14,DUMP32          <== PRINT AMB                        38320000
         DROP  R1,R2                   AMBL                             38330022
*                                                                       38340000
         L     R2,AMBPH-AMB(,R1)       PICK UP ADDR OF PLH HEADER       38350039
         USING IDAPLHDR,R2                                              38360042
         MVI   MINLINES,4                                               38370000
         STRING '0  PLH HEADER AT LOCATION ',((R2),,X),INTO=LINE121     38380039
         BAL   R14,SPACE1          <== Print line                       38390041
         C     R2,REGION24             VALIDATE                         38400039
         BL    PRACB99                 LOST, QUIT                       38410000
        #S0C4  PRACB99                                                  38420000
         CLC   IDAPLHDR(16),0          VALIDATE                         38430042
         LA    R0,016                  PLHDR LENGTH                     38440039
         LA    R1,IDAPLHDR             PLH Header                       38450042
         BAL   R14,DUMP32          <== PRINT PLHDR                      38460000
         CLI   PLHID,X'30'             VALIDATE                         38470039
         BNE   PRACB99                 LOST, QUIT                       38480039
         LA    R3,IDAPLH               POINT PAST PLH HEADER            38490042
         USING IDAPLH,R3                                                38500042
         MVI   STRNO,0                 PLH/RPL sequence number          38510039
*                                                                       38520039
*        Print PLH (one for each string)                                38530039
*loop                                                                   38540039
PRACB40  C     R3,REGION24             VALIDATE                         38550042
         BL    PRACB99                 LOST, QUIT                       38560000
         IC    R14,STRNO               PLH sequence number              38570042
         LA    R14,1(,R14)             PLH sequence number              38580042
         STC   R14,STRNO               PLH sequence number              38590042
        #S0C4  PRACB99                                                  38600000
         CLC   0(210,R3),0             VALIDATE                         38610039
         CLC   =C'PLH',PLHIDENT        VALIDATE                         38620039
         BNE   PRACB99                 LOST, QUIT                       38630000
         STM   R2,R3,SAVPLHPT          save A(IDAPLHDR,IDAPLH)          38640042
         CLI   IDAPLH,FF               VALIDATE                         38650042
         BNE   PRACB69                 PLH not in use, try next one     38660042
*                                                                       38670042
*        Check if the PLH entry points to my ACB;                       38680042
*        If MACRF=LSR/GSR, the PLH entry could point to another         38690042
*        ACB that shares the same buffer pool.                          38700042
*                                                                       38710042
         C     R6,PLHACB               VALIDATE                         38720039
         BE    PRACB45                 OK, jump                         38730042
         LA    R0,IFGACB+1             VALIDATE                         38740042
         C     R0,PLHACB               VALIDATE                         38750042
         BNE   PRACB69                 not for this ACB, ignore it      38760042
*                                                                       38770042
PRACB45  MVI   MINLINES,10                                              38780042
         STRING '0  PLH AT LOCATION ',((R3),,X),INTO=LINE121            38790042
         CLC   PLHCNT,=H'1'            STRNO=1?                         38800042
         BE    PRACB45P                yes, do not count PLHs           38810042
         STRING '0  PLH',(STRNO,FL1,L),' AT LOCATION ',((R3),,X),      X38820042
               INTO=LINE121                                             38830042
PRACB45P BAL   R14,SPACE1          <== Print line                       38840042
*                                                                       38850042
PRACB46  LA    R0,210                  PLH LENGTH                       38860042
         LA    R1,IDAPLH               PASS PLH ADDRESS                 38870042
         BAL   R14,DUMP32          <== PRINT PLH                        38880042
*                                                                       38890000
*        PRINT RPL                                                      38900029
*                                                                       38910029
PRACB50  L     R4,PLHCRPL              PICK UP RPL ADDRESS              38920039
         USING IFGRPL,R4                                                38930039
         C     R4,REGION24             VALIDATE                         38940039
         BL    PRACB99                 LOST, QUIT                       38950000
        #S0C4  PRACB99                                                  38960000
         CLC   IFGRPL(76),0            VALIDATE RPL                     38970039
*                                                                       38980030
         BAL   R1,PRACB51R             BRANCH AROUND TABLE              38990030
         DC    C'GET  ',AL1(RPLGET)    REQUEST                          39000030
         DC    C'PUT  ',AL1(RPLPUT)    REQUEST                          39010030
         DC    C'POINT',AL1(RPLPOINT)  REQUEST                          39020030
         DC    C'ERASE',AL1(RPLERASE)  REQUEST                          39030030
         DC    C'*REQ ',AL1(255)       unknown request                  39040030
*--loop                                                                 39050030
PRACB51R CLC   RPLREQ,5(R1)            compare RPL request code         39060030
         BE    PRACB51S                equal, exit loop                 39070030
         LA    R1,5+1(,R1)             next entry                       39080030
         CLI   5(R1),255               end of table?                    39090030
         BNE   PRACB51R                no, try next entry               39100030
*--endloop                                                              39110030
PRACB51S MVI   MINLINES,6                                               39120030
         STRING '0  RPL AT LOCATION ',((R4),,X),3X,                    X39130039
               ((R1),5,T),',OPTCD=(',INTO=LINE121                       39140039
         CLC   PLHCNT,=H'1'            STRNO=1?                         39150042
         BE    PRACB51J                yes, do not count PLHs           39160039
         STRING '0  RPL',(STRNO,FL1,L),' AT LOCATION ',((R4),,X),3X,   X39170039
               ((R1),5,T),',OPTCD=(',INTO=LINE121                       39180039
*                                                                       39190029
*        display OPTCD                                                  39200029
*                                                                       39210029
PRACB51J BAS   R1,PRACB51A             BR AROUND TABLE                  39220039
         DC    C'LOC',AL1(RPLLOC)      80 00                            39230029
         DC    C'DIR',AL1(RPLDIR)      40 00                            39240029
         DC    C'SEQ',AL1(RPLSEQ)      20 00                            39250029
         DC    C'SKP',AL1(RPLSKP)      10 00                            39260029
         DC    C'KGE',AL1(RPLKGE)      04 00                            39270030
         DC    C'GEN',AL1(RPLGEN)      02 00                            39280030
PRACB51A TM    RPLOPT1,*-*                                              39290029
*loop                                                                   39300029
PRACB51B IC    R14,3(,R1)              MASK                             39310029
         EX    R14,PRACB51A                                             39320029
         BZ    PRACB51C                                                 39330029
         STRING (LINE,,T),((R1),3,T),',',INTO=LINE                      39340039
PRACB51C LA    R1,3+1(,R1)             NEXT ENTRY                       39350029
         CLI   0(R1),C'A'              end of table?                    39360029
         BNL   PRACB51B                not yet, loop more               39370029
*endloop                                                                39380029
         BAS   R1,PRACB52A             BR AROUND TABLE                  39390029
         DC    C'KEY',AL1(RPLKEY)      00 80                            39400029
         DC    C'ADR',AL1(RPLADR)      00 40                            39410029
         DC    C'CNV',AL1(RPLCNV)      00 20                            39420029
         DC    C'BWD',AL1(RPLBWD)      00 10                            39430029
         DC    C'UPD',AL1(RPLUPD)      00 02                            39440030
         DC    C'NSP',AL1(RPLNSP)      00 01                            39450044
PRACB52A TM    RPLOPT2,*-*                                              39460029
*loop                                                                   39470029
PRACB52B IC    R14,3(,R1)              MASK                             39480029
         EX    R14,PRACB52A                                             39490029
         BZ    PRACB52C                                                 39500029
         STRING (LINE,,T),((R1),3,T),',',INTO=LINE                      39510039
PRACB52C LA    R1,3+1(,R1)             NEXT ENTRY                       39520029
         CLI   0(R1),C'A'              end of table?                    39530029
         BNL   PRACB52B                not yet, loop more               39540029
*endloop                                                                39550029
         LA    R15,LINE-1(R15)         last comma                       39560039
         MVI   0(R15),C')'             close sub-list                   39570029
         OC    RPLFDBK,RPLFDBK         any error?                       39580029
         BZ    PRACB53                 no, jump                         39590029
         STRING (LINE,,T),',FDBK=',(RPLFDBK,,X),INTO=LINE               39600039
PRACB53  BAL   R14,SPACE1          <== print RPL header                 39610039
*                                                                       39620029
         SLR   R0,R0                                                    39630000
         IC    R0,RPLLEN               RPL LENGTH                       39640029
         LA    R1,IFGRPL               RPL address                      39650029
         BAL   R14,DUMP32          <== PRINT RPL                        39660000
*                                                                       39670000
         CL    R6,RPLDACB              VALIDATE                         39680029
         BNE   PRACB99                 LOST, QUIT                       39690000
         L     R1,RPLARG               SEARCH ARGUMENT                  39700029
         C     R1,REGION24             VALIDATE                         39710000
         BL    PRACB60                 NONE FOUND, JUMP                 39720029
        #S0C4  PRACB60                                                  39730029
         CLI   0(R1),0                 VALIDATE SEARCH ARGUMENT         39740000
         L     R14,$AMDSB_D            DATA AMDSB                       39750042
         LH    R0,AMDKEYLN-AMDSB(,R14) KEY LENGTH                       39760000
         MVI   MINLINES,5                                               39770000
         STRING '0    SEARCH ARGUMENT:',INTO=LINE121                    39780039
         BAL   R14,SPACE1          <== Print line                       39790041
         LTR   R0,R0                   IS THIS A KSDS?                  39800000
         BNZ   PRACB59                 YES, JUMP                        39810029
         LA    R0,004                  NO, ARG IS AN RBA                39820000
PRACB59  BAL   R14,PDUMP           <== PRINT KEY                        39830029
         DROP  R4                      RPL                              39840039
*                                                                       39850000
*        Print current record (from PLH)                                39860039
*                                                                       39870039
PRACB60  MVI   MINLINES,6                                               39880029
         LM    R2,R3,SAVPLHPT          restore A(PLHDR,PLH)             39890039
         ICM   R0,B'1111',PLHLRECL     PICK UP RECORD LENGTH            39900039
         BNP   PRACB68                 zero, quit                       39910039
         L     R1,PLHRECP              PICK UP RECORD ADDRESS           39920039
         C     R1,REGION24             VALIDATE                         39930000
         BL    PRACB68                 LOST, QUIT                       39940039
        #S0C4  PRACB68                                                  39950039
         CLI   0(R1),0                 VALIDATE                         39960039
         STRING '0    CURRENT RECORD:',INTO=LINE121                     39970039
         BAL   R14,SPACE1          <== Print line                       39980041
         BAL   R14,PDUMP           <== PRINT RECORD                     39990000
         B     PRACB69                                                  40000039
PRACB68  STRING '0    CURRENT RECORD IS NOT AVAILABLE',INTO=LINE121     40010039
 STRING (LINE121,,T),' R0=',((R0),,X),' R1=',((R1),,X),INTO=LINE121,   X40020039
               ' R2=',((R2),,X),' R3=',((R3),,X),' R4=',((R4),,X)       40030039
         BAL   R14,SPACE1          <== Print line                       40040041
*                                                                       40050039
PRACB69  LM    R2,R3,SAVPLHPT          restore A(PLHDR,PLH)             40060039
*ORG PRACB69                                                            40070039
         ICM   R3,B'1111',PLHCHAIN     do we have another PLH?          40080039
         BNZ   PRACB40                 yes, process it                  40090039
*endloop                                                                40100039
         DROP  R3                      IDAPLH                           40110042
         B     PRACB99                                                  40120029
*                                                                       40130000
*        PRINT DCB IF THIS IS A JES ACB                                 40140028
*                                                                       40150000
PRACB70  SLR   R1,R1                                                    40160000
         ICM   R1,B'0111',DEBRRQ+1     DCB ADDRESS (JES)                40170000
         BZ    PRACB71                 NO DCB, JUMP                     40180000
        #S0C4  PRACB71                                                  40190000
         CLC   ACBDEB,ACBDEB-IFGACB(R1) DOES THIS LOOK LIKE A DCB?      40200000
         BNE   PRACB71                 NO, JUMP                         40210000
         CLC   ACBTIOT,ACBTIOT-IFGACB(R1) DOES THIS LOOK LIKE A DCB?    40220000
         BNE   PRACB71                 NO, JUMP                         40230000
         LR    R6,R1                   PASS DCB ADDRESS                 40240000
         BAL   R14,PRDCB           <== PRINT DCB ALSO                   40250000
**       L     R7,DCBCICB              CICB                             40260000
**       USING CICB,R7                                                  40270000
         CL    R6,CURR_REC             CURRENT RECORD PRINTED ALREADY?  40280000
         BE    PRACB99                 YES, QUIT                        40290000
         ICM   R6,B'0111',DEBDCBAD+1   RELOAD ACB ADDRESS (JES)         40300000
*                                                                       40310000
*        Retrieve current record: DEB->SDB->UBF->BFD                    40320048
*                                                                       40330000
PRACB71 #S0C4  PRACB97                                                  40340053
         MVC   REASON,=C'001'          INPUT                            40350053
         TM    DEBOPATB,DEBXTEND       OPEN FOR EXTEND/OUTPUT?          40360053
         BNO   PRACB97                 NO, QUIT                         40370053
         SLR   R7,R7                                                    40380053
         ICM   R7,B'0111',DEBIRBB      SDB (SUB-SYSTEM DATA SET BLOCK)  40390053
         CLI   DEBIRBB,X'FF'           HJE7707?                         40400053
         BNE   *+8                     no, jump                         40410053
         SLL   R7,8-1                  yes, DEBIRBB contains bits 1-24  40420053
         USING SDB,R7                                                   40430048
         MVC   REASON,=C'SDB'          SDB                              40440053
         CLC   =C'SDB ',SDBID          SDBID                            40450048
         BNE   PRACB97                 I'M LOST, QUIT                   40460053
        #S0C4  PRACB72N                                                 40470048
*        Offsets to SDBDEB,SDBUBF,BFDLOC,BFDDATA                        40480053
*        SDBDEB and SDBUBF are defined in SHASMAC($SDB)                 40490053
*        BFDLOC was defined in $BFD until HJE3313, then in $BUFFER      40500053
*        BFDDATA was defined in $BFD until HJE3313;                     40510053
*        As of HJE7705, the offset to BFDDATA is the same as TPBUFST    40520053
*        Test pgm in SCANMODL displays values for current JES2          40530053
*        As of HJE7707, BFDDATA is defined again as BFDSTART.           40540053
         BAL   R2,PRACB72              br around table                  40550048
         DC    X'007C,00B4,0018,0036'  XA 2.2                           40560053
         DC    X'0084,00E4,002C,0084'  ESA 420                          40570053
         DC    X'008C,00EC,002C,0088'  OS/390 R3                        40580053
         DC    X'008C,011C,002C,0088'  OS/390 R5   ????                 40590053
         DC    X'0094,0124,002C,0088'  OS/390 R10                       40600053
         DC    X'009C,0144,0064,0068'  z/OS R4     HJE7707              40610053
*loop                                                                   40620048
PRACB72  LH    R1,0(,R2)               SDBDEB-SDB                       40630048
         L     R1,SDB(R1)              SDBDEB                           40640048
         CLM   R1,B'0111',ACBDEB       SDBDEB                           40650048
         BNE   PRACB72N                NOT MY JES2, JUMP                40660048
         LH    R1,2(,R2)               SDBUBF-SDB                       40670048
         L     R4,SDB(R1)              SDBUBF (BUFFER ADDRESS)          40680048
         USING UBF,R4                                                   40690048
         CLC   =C'UBF ',UBFID          BFDID                            40700048
         BE    PRACB81                 This is my JES2, jump            40710048
PRACB72N LA    R2,2+2+2+2(,R2)         next table entry                 40720048
         CLC   PRACB72,0(R2)           SDBDEB-SDB                       40730048
         BNE   PRACB72                 SCAN BUFFER                      40740048
*endloop                                                                40750048
         MVC   REASON,=C'UBF'          UBF                              40760053
*        As of HJE7707, JES2 no longer uses a UBF, only a PBF           40770053
         B     PRACB97                 I'M LOST, QUIT                   40780053
*                                                                       40790000
*        Scan JES2 unprotected buffer to retrieve the current record    40800048
*                                                                       40810048
PRACB81  MVC   REASON,=C'0C4'          S0C4 in UBF                      40820053
        #S0C4  PRACB97                                                  40830053
         LH    R1,4(,R2)               SDBLOC-UBF                       40840053
         L     R3,UBF(R1)              SDBLOC (CURR POS IN BUFFER)      40850048
         LH    R1,6(,R2)               BFDDATA-UBF                      40860053
         LA    R0,UBF(R1)              BFDDATA                          40870053
         SLR   R1,R1                                                    40880048
         CR    R3,R0                   ANY RECORD YET?                  40890000
         BE    PRACB98                 NO, QUIT                         40900000
*LOOP                                                                   40910000
PRACB81C LR    R2,R0                   Copy record address              40920053
         USING LRC,R2                                                   40930000
         IC    R1,LRCTLENG             LENGTH OF TEXT                   40940000
         TM    LRCFLAG1,LRC1CCTL       CTLCHR PRESENT?                  40950000
         BNO   PRACB81N                NO, JUMP                         40960000
         LA    R1,1(,R1)               YES, ADD 1 TO LENGTH             40970000
PRACB81N LA    R0,LRCTEXT(R1)          POINT PAST RECORD                40980000
         CLR   R0,R3                   WAS THIS THE LAST RECORD?        40990000
         BL    PRACB81C                NO, LOOP FURTHER                 41000000
*ENDLOOP                                                                41010000
         MVI   MINLINES,6                                               41020000
         STRING '0    CURRENT RECORD:',INTO=LINE121                     41030041
         BAL   R14,SPACE1          <== Print line                       41040041
         LR    R0,R1                   PASS LENGTH                      41050000
         LA    R1,LRCTEXT              PASS ADDRESS                     41060000
         BAL   R14,PDUMP           <== DUMP CURRENT RECORD              41070000
         B     PRACB99                 NO, QUIT                         41080000
*                                                                       41090053
PRACB97  EQU   *                                                        41100053
         STRING '0    CURRENT RECORD IS NOT AVAILABLE (',REASON,')',   X41110053
               INTO=LINE121                                             41120053
         BAL   R14,SPACE1          <== Print line                       41130053
         B     PRACB99                 NO, QUIT                         41140053
*                                                                       41150000
PRACB98  STRING '0    NO RECORD WRITTEN YET.',INTO=LINE121              41160039
         BAL   R14,SPACE1          <== Print line                       41170041
*                                                                       41180000
PRACB99  END_PROC                                                       41190032
         DROP  R4,R5,R6,R7             UBF, DEB, ACB, SDB               41200048
*                                                                       41210000
*---------------------------------------------------------------------- 41220000
*        SCAN JPAQ/LPAD TO FIND CALLER'S CDE                            41230008
*---------------------------------------------------------------------- 41240000
*                                                                       41250000
CSVQRY00 BEGIN_PROC                                                     41260032
         STM   R6,R7,TENWORDS          SAVE R6, R7                      41270000
         N     R1,MASKADDR             CLEAN-UP ADDRESS                 41280000
         L     R5,PSATOLD-PSA(,0)      MY TCB                           41290000
         L     R5,TCBJSTCB-TCB(,R5)    JOB STEP TCB                     41300000
         ICM   R5,B'1111',TCBJPQ-TCB(R5)  FIRST CDE ON JPA QUEUE        41310027
         BZ    CSVQRY20                EMPTY QUEUE, SKIP SEARCH         41320027
         USING CDENTRY,R5                                               41330000
*LOOP                                                                   41340000
CSVQRY11 TM    CDATTR2,CDXLE           IS THERE AN EXTENT LIST?         41350008
         BNO   CSVQRY12                NO, JUMP                         41360008
         TM    CDATTR,CDNIC            this module being loaded?        41370000
         BO    CSVQRY12                yes, jump                        41380008
         L     R7,CDXLMJP              EXTENT LIST                      41390000
         USING XTLST,R7                                                 41400000
         C     R1,XTLMSBAD             WITHIN BOUNDARIES?               41410000
         BL    CSVQRY12                NO, IGNORE                       41420008
         L     R15,XTLMSBLA            LENGTH OF LOAD MOD               41430000
         LA    R15,0(,R15)             CLEAR HI-ORDER BIT               41440000
         A     R15,XTLMSBAD            ADD LOAD POINT ADDRESS           41450000
         CR    R1,R15                  WITHIN BOUNDARIES?               41460000
         BL    CSVQRY75                YES, PROCESS                     41470010
CSVQRY12 ICM   R5,B'1111',CDCHAIN      NEXT CDE IN QUEUE                41480008
         BNZ   CSVQRY11                GOOD ADDR, PROCESS               41490008
*ENDLOOP                                                                41500000
*                                                                       41510027
*        SCAN ACTIVE LPA QUEUE (MLPA/FLPA)                              41520027
*                                                                       41530027
CSVQRY20 L     R5,CVTPTR(,0)                                            41540027
         L     R5,CVTQLPAQ-CVTMAP(,R5) ACTIVE LPA QUEUE                 41550027
         ICM   R5,B'1111',0(R5)        FIRST CDE ON QUEUE               41560027
         BZ    CSVQRY60                EMPTY QUEUE, SKIP SEARCH         41570027
         USING CDENTRY,R5                                               41580027
*LOOP                                                                   41590027
CSVQRY21 TM    CDATTR2,CDXLE           IS THERE AN EXTENT LIST?         41600027
         BNO   CSVQRY22                NO, JUMP                         41610027
         L     R7,CDXLMJP              EXTENT LIST                      41620027
         USING XTLST,R7                                                 41630027
         C     R1,XTLMSBAD             WITHIN BOUNDARIES?               41640027
         BL    CSVQRY22                NO, IGNORE                       41650027
         L     R15,XTLMSBLA            LENGTH OF LOAD MOD               41660027
         LA    R15,0(,R15)             CLEAR HI-ORDER BIT               41670027
         A     R15,XTLMSBAD            ADD LOAD POINT ADDRESS           41680027
         CR    R1,R15                  WITHIN BOUNDARIES?               41690027
         BL    CSVQRY75                YES, PROCESS                     41700027
CSVQRY22 ICM   R5,B'1111',CDCHAIN      NEXT CDE IN QUEUE                41710027
         BNZ   CSVQRY21                GOOD ADDR, PROCESS               41720027
*ENDLOOP                                                                41730027
*                                                                       41740000
*        SCAN LPA DIRECTORY IF MODULE NOT FOUND IN JPAQ                 41750000
*                                                                       41760000
CSVQRY60 L     R6,CVTPTR(,0)                                            41770027
         L     R6,CVTLPDIA-CVTMAP(,R6)                                  41780000
         USING LPDE,R6                                                  41790000
*LOOP                                                                   41800000
CSVQRY61 TM    LPDEATTR,LPDEMIN        MINOR LPDE?                      41810008
         BO    CSVQRY62                YES, JUMP                        41820008
         LM    R15,R0,LPDEXTLN         LENGTH/LOAD ADDR                 41830000
         CR    R0,R1                                                    41840000
         BH    CSVQRY62                OUTSIDE BOUNDARIES, JUMP         41850008
         AR    R0,R15                                                   41860000
         CR    R0,R1                                                    41870000
         BH    CSVQRY71                MODULE FOUND, JUMP               41880009
CSVQRY62 LA    R6,LPDEXTAD+4           BUMP LPDE ADDR                   41890008
         CLI   LPDENAME,FF             END OF LPA DIRECTORY?            41900042
         BNE   CSVQRY61                NO, LOOP FURTHER                 41910008
*ENDLOOP                                                                41920000
         B     CSVQRY81                not found in LPA                 41930010
*                                                                       41940000
*        found in LPAD                                                  41950010
*                                                                       41960010
CSVQRY71 LR    R5,R6                   CDE=LPDE                         41970009
         S     R1,LPDEXTAD             GET OFFSET                       41980000
         MVC   EPNAME,LPDENAME         PASS EP NAME                     41990010
         B     CSVQRY85                                                 42000010
*                                                                       42010000
*        found in JPAQ                                                  42020010
*                                                                       42030010
CSVQRY75 S     R1,XTLMSBAD             GET OFFSET                       42040010
         MVC   EPNAME,CDNAME           PASS EP NAME                     42050010
         B     CSVQRY85                                                 42060010
         DROP  R5,R6,R7                CDE, LPDE, XTLST                 42070010
*                                                                       42080010
*        look for a nucleus module                                      42090010
*                                                                       42100010
CSVQRY81 LR    R5,R1                   save address                     42110010
         LR    R0,R1                   pass address                     42120010
         NUCLKUP BYADDR,ADDR=(R0),NAME=EPNAME                           42130010
         LTR   R15,R15                 addr found in nucleus?           42140010
         BNZ   CSVQRY95                no, quit                         42150010
         LR    R1,R5                   restore address                  42160010
         SLR   R1,R0                   GET OFFSET in R1                 42170010
*                                                                       42180009
CSVQRY85 ST    R1,TENWORDS+12          STORE OFFSET                     42190008
         STRING '+X''',(TENWORDS+14,2,X),'''',INTO=OFFSET               42200000
         CLI   TENWORDS+13,00                                           42210000
         BE    CSVQRY88                OFFSET LT 64K, JUMP              42220008
         STRING '+X''',(TENWORDS+13,3,X),'''',INTO=OFFSET               42230000
CSVQRY88 STRING (EPNAME,,L),OFFSET,INTO=MSG20                           42240010
         B     CSVQRY99                QUIT                             42250009
*                                                                       42260009
*        not found anywhere                                             42270009
*                                                                       42280009
CSVQRY95 SR    R5,R5                                                    42290009
         MVC   MSG20,BLANKS            NO PGM FOUND                     42300009
         MVC   EPNAME,=C'*UNKNOWN'     NO PGM FOUND                     42310009
*                                                                       42320009
CSVQRY99 LM    R6,R7,TENWORDS          RESTORE R6, R7                   42330008
         END_PROC                                                       42340032
*                                                                       42350000
*---------------------------------------------------------------------- 42360000
*        PRINT OBJECT INSTRUCTION IF X'44' OPCODE                       42370000
*---------------------------------------------------------------------- 42380000
*                                                                       42390000
EXECUTE  BEGIN_PROC                                                     42400032
         CLI   SDWAILC1,4              ILC=4?                           42410000
         BNE   EXEC999                 NO, QUIT                         42420000
        #S0C4  EXEC999                                                  42430041
         CLI   0(R6),X'44'             IS THIS AN EXECUTE?              42440000
         BNE   EXEC999                 NO, QUIT                         42450000
*                                                                       42460000
         ICM   R0,B'0001',1(R6)        R1,RX                            42470000
         LA    R2,X'000F'              MASK FOR NR                      42480000
         NR    R2,R0                   R2=(RX)                          42490000
         BZ    EXEC12                  NO RX, JUMP                      42500000
         AR    R2,R2                   R*4                              42510000
         AR    R2,R2                   R*4                              42520000
         L     R2,SDWAGRSV(R2)         POINT TO RX SLOT                 42530000
*                                                                       42540000
EXEC12   SR    R14,R14                                                  42550000
         ICM   R14,B'0011',2(R6)       D2(B2)                           42560000
         LA    R15,X'0FFF'             MASK FOR "NR"                    42570000
         NR    R15,R14                 R15=D2                           42580000
         SRL   R14,12                  R14=(B2)                         42590000
         AR    R14,R14                 R14*2                            42600000
         BZ    EXEC30                  B2=R0, JUMP                      42610000
         AR    R14,R14                 R14*4                            42620000
         AL    R2,SDWAGRSV(R14)        ADD VALUE(B2)                    42630000
*                                                                       42640000
EXEC30   LA    R6,0(R15,R2)            ADD D2, CLEAN UP                 42650000
         N     R6,MASKADDR             CLEAN-UP ADDRESS                 42660000
         BAL   R14,PRINTI          <== PRINT INSTRUCTION (USES R6)      42670000
         STRING '   EXECUTED INSTRUCTION AT LOCATION ',((R6),,X),      X42680041
               ' IS ',(MSG20,(R1)),INTO=LINE121                         42690039
         BAL   R14,SPACE1          <== Print line                       42700041
EXEC999  END_PROC                                                       42710032
*                                                                       42720000
*---------------------------------------------------------------------- 42730000
*        PRINT INSTRUCTION                                              42740000
*---------------------------------------------------------------------- 42750000
*                                                                       42760000
PRINTI   BEGIN_PROC                                                     42770032
         STRING '**** **** ****',INTO=MSG20 INIT OUTPUT AREA            42780000
         LA    R1,014                  MAX LENGTH                       42790000
        #S0C4  PRINTI9                                                  42800000
         MVC   WKCELL1(2),0(R6)        1ST HALFWORD                     42810000
         UNPK  MSG20+0(5),WKCELL1+0(3) CONVERT TO HEX                   42820000
         TR    MSG20+0(4),TABHEX-240   CONVERT TO HEX                   42830000
         LA    R1,004                  4 BYTES                          42840000
         CLI   0(R6),X'40'             TEST INSTRUCTION LENGTH          42850000
         BL    PRINTI9                 OK, JUMP                         42860000
         MVC   WKCELL1(4),0(R6)        2 HALFWORDS                      42870000
         MVI   MSG20+4,C' '            CLEAN UP                         42880000
         UNPK  MSG20+5(5),WKCELL1+2(3) CONVERT TO HEX                   42890000
         TR    MSG20+5(4),TABHEX-240   CONVERT TO HEX                   42900000
         LA    R1,009                  9 BYTES                          42910000
         CLI   0(R6),X'C0'             TEST INSTRUCTION LENGTH          42920000
         BL    PRINTI9                 OK, JUMP                         42930000
         MVC   WKCELL1(6),0(R6)        6 HALFWORDS                      42940000
         MVI   MSG20+9,C' '            CLEAN UP                         42950000
         UNPK  MSG20+10(5),WKCELL1+4(3) CONVERT TO HEX                  42960000
         TR    MSG20+10(4),TABHEX-240  CONVERT TO HEX                   42970000
         MVI   MSG20+14,C' '           CLEAN UP                         42980000
         LA    R1,014                  55 BYTES                         42990000
PRINTI9 #S0C4  RESET                                                    43000000
         END_PROC                                                       43010032
*                                                                       43020000
*---------------------------------------------------------------------- 43030000
*                                                                       43040039
*        PDUMP ROUTINE    R0=LENGTH,R1=ADDRESS                          43050000
*                                                                       43060039
*+0000 00036800  C1C2C3C4 812653D8  00000000 00000000  *ABCDA  Q      * 43070040
*+0010 00036810-0003685F same as above (X'0050' bytes)                  43080040
*+0060 00036860  00FD3BF0 00000000  078D2000 00C941A2  *   0          * 43090040
*---------------------------------------------------------------------- 43100000
*                                                                       43110000
PDUMP    BEGIN_PROC                                                     43120032
        #S0C4  PDUMP99,PUSH                                             43130041
         STM   R0,R3,TENWORDS          KEEP LENGTH AND ADDRESS          43140000
         LTR   R0,R0                   length=0?                        43150039
         BNP   PDUMP99                 yes, quit                        43160039
         MVI   LINE121,C'0'            CTLCHR                           43170039
         L     R3,TENWORDS             LENGTH                           43180000
         AL    R3,TENWORDS+4           LIMIT                            43190000
         BCTR  R3,0                    BXLE LIMIT                       43200000
*LOOP                                                                   43210000
PDUMP4   LR    R0,R1                   GET ADDRESS                      43220000
         SL    R0,TENWORDS+4           MAKE OFFSET                      43230000
         STM   R0,R1,TENWORDS+12       OFFSET, ADDRESS                  43240000
         L     R2,TENWORDS             LENGTH                           43250000
         AL    R2,TENWORDS+4           1ST BYTE AFTER AREA              43260000
         SR    R2,R1                   # OF REMAINING BYTES             43270000
         BNP   PDUMP99                 FINISHED, QUIT                   43280000
*                                                                       43290000
         MVC   MSG20,BLANKS            CLEAR WORK AREA                  43300000
         CH    R2,=H'16'                                                43310000
         BL    *+8                                                      43320000
         LH    R2,=H'16'                                                43330000
         LR    R14,R2                  PASS LENGTH FOR MVC              43340000
         BCTR  R14,0                   FOR EX                           43350000
**      #S0C4  PDUMP99                                                  43360041
         EX    R14,*+4                 MOVE FIELD                       43370000
         MVC   MSG20(*-*),0(R1)        MOVE FIELD                       43380000
**      #S0C4  RESET                                                    43390041
         TR    MSG20,TRTPRINT                                           43400000
*                                                                       43410000
         LR    R0,R2                   PASS LENGTH                      43420000
         CH    R0,=H'12'                                                43430000
         BH    PDUMP16                 SNAP 16 BYTES                    43440000
         CH    R0,=H'08'                                                43450000
         BH    PDUMP12                 SNAP 12 BYTES                    43460000
         CH    R0,=H'04'                                                43470000
         BH    PDUMP08                 SNAP  8 BYTES                    43480000
PDUMP04  STRING ((R1),(R0),X),INTO=(MSG60,36)                           43490041
         B     PDUMP33                                                  43500000
PDUMP08  SH    R0,=H'04'                                                43510000
         STRING ((R1),4,X),1X,(4(R1),(R0),X),INTO=(MSG60,36)            43520041
         B     PDUMP33                                                  43530000
PDUMP12  SH    R0,=H'08'                                                43540000
         STRING ((R1),4,X),1X,(4(R1),4,X),2X,(8(R1),(R0),X),           X43550039
               INTO=(MSG60,36)                                          43560041
         B     PDUMP33                                                  43570000
PDUMP16  SH    R0,=H'12'                                                43580000
         STRING (0(R1),4,X),1X,(4(R1),4,X),2X,                         X43590039
               (8(R1),4,X),1X,(12(R1),(R0),X),INTO=(MSG60,36)           43600041
PDUMP33  STRING '  +',(TENWORDS+12+2,2,X),1X,(TENWORDS+12+4,4,X),3X,   X43610039
               (MSG60,36),'   *',(MSG20,16),'*',                       X43620041
               INTO=LINE                                                43630039
         BAL   R14,SPACE1L         <== print with lower-case            43640039
*                                                                       43650040
*        do not print lines with identical contents                     43660040
*                                                                       43670040
         CH    R2,=H'16'               increment                        43680040
         BNE   PDUMP39                 no, jump                         43690040
         LA    R14,48(,R1)             48 bytes beyond current addr     43700040
         CLR   R14,R3                  more than 48 bytes left?         43710040
         BH    PDUMP39                 no, jump                         43720040
         CLC   16(32,R1),0(R1)         3 identical lines?               43730040
         BNE   PDUMP39                 no, jump                         43740040
         LA    R0,16(,R1)              start of -SAME- area             43750040
*--loop                                                                 43760040
PDUMP37L CLC   16(16,R1),0(R1)         same contents?                   43770040
         BNE   PDUMP38                 yes, exit                        43780040
         ALR   R1,R2                   next line                        43790040
         LA    R14,32(,R1)             32 bytes beyond current addr     43800040
         CLR   R14,R3                  more than 32 bytes left?         43810040
         BNH   PDUMP37L                                                 43820040
*--endloop                                                              43830040
PDUMP38  LR    R14,R0                  first -SAME- line                43840040
         SL    R14,TENWORDS+4          MAKE OFFSET                      43850040
         LR    R15,R1                  last -SAME line                  43860040
         ALR   R15,R2                  first non-SAME- line             43870040
         SLR   R15,R0                  size of -SAME- area              43880040
         STM   R14,R0,TENWORDS+12      offset, size, start              43890040
         LA    R0,15(,R1)              last -SAME- byte                 43900040
         STRING '  +',(TENWORDS+12+2,2,X),1X,                          X43910040
               (TENWORDS+20,4,X),'-',((R0),,X),                        X43920040
               ' (X''',(TENWORDS+18,2,X),''' BYTES) SAME AS ABOVE',    X43930040
               INTO=LINE                                                43940040
         BAL   R14,SPACE1          <== Print line                       43950041
PDUMP39  BXLE  R1,R2,PDUMP4                                             43960039
*ENDLOOP                                                                43970000
PDUMP99  LM    R0,R3,TENWORDS          LENGTH/START ADDRESS             43980000
        #S0C4  POP                                                      43990041
         END_PROC                                                       44000032
*                                                                       44010000
*---------------------------------------------------------------------- 44020000
*        DUMP32 ROUTINE    R0=LENGTH,R1=ADDRESS                         44030000
*---------------------------------------------------------------------- 44040000
*                                                                       44050000
DUMP32   BEGIN_PROC                                                     44060032
         LTR   R1,R1                   HI-ORDER BIT ON?                 44070013
         LA    R1,0(,R1)               CLEAN UP HI-BIT                  44080013
         STM   R0,R2,TENWORDS          KEEP LENGTH AND ADDRESS          44090000
         BM    DUMP32A                 YES, NO DOUBLE SPACE             44100000
         MVI   LINE121,C'0'            CTLCHR                           44110039
*LOOP                                                                   44120000
DUMP32A  LR    R0,R1                   GET ADDRESS                      44130013
         SL    R0,TENWORDS+4           MAKE OFFSET                      44140000
         STM   R0,R1,TENWORDS+12       OFFSET, ADDRESS                  44150005
         L     R0,TENWORDS             LENGTH (R0)                      44160005
         AL    R0,TENWORDS+4           1ST BYTE AFTER AREA (add R1)     44170005
         SR    R0,R1                   # OF REMAINING BYTES             44180000
         BNP   DUMP32Z                 FINISHED, QUIT                   44190000
         STRING '   +',(TENWORDS+12+3,1,X),INTO=LINE                    44200039
         OC    TENWORDS(3),TENWORDS    offset > FF ?                    44210022
         BZ    DUMP32L                 no, jump                         44220022
         STRING '  +',(TENWORDS+12+2,2,X),INTO=LINE                     44230039
DUMP32L  LA    R2,LINE+8               FIRST WORD                       44240039
         BAL   R14,DUMP32X             00-03                            44250000
         BAL   R14,DUMP32X             04-07                            44260000
         BAL   R14,DUMP32X             08-11                            44270000
         BAL   R14,DUMP32X             12-15                            44280000
         LA    R2,1(,R2)               WIDE MARGIN IN THE MIDDLE        44290000
         BAL   R14,DUMP32X             16-19                            44300000
         BAL   R14,DUMP32X             20-23                            44310000
         BAL   R14,DUMP32X             24-27                            44320000
         BAL   R14,DUMP32X             28-31                            44330000
         BAL   R14,SPACE1          <== Print line                       44340041
         LTR   R0,R0                   # OF REMAINING BYTES             44350000
         BP    DUMP32A                 PRINT NEXT 32 BYTES              44360000
*ENDLOOP                                                                44370000
DUMP32Z  LM    R0,R2,TENWORDS          LENGTH/START ADDRESS             44380000
         END_PROC                                                       44390032
*                                                                       44400000
DUMP32X  LTR   R0,R0                   # OF REMAINING BYTES             44410000
         BNPR  R14                     FINISHED, QUIT                   44420000
         MVC   0(4,R2),0(R1)           PREVENT S0C4 IF R1=.....FFC      44430041
         UNPK  0(9,R2),0(5,R2)         TRANSLATE TO HEX                 44440041
         TR    0(8,R2),TABHEX-240      TRANSLATE TO HEX                 44450000
         SH    R0,=H'4'                DECREMENT LENGTH                 44460000
         LA    R1,4(,R1)               PTR IN INPUT AREA                44470000
         MVI   8(R2),C' '                                               44480000
         LA    R2,9(,R2)               PTR IN OUTPUT LINE               44490000
         BR    R14                                                      44500000
TABHEX   DC    C'0123456789ABCDEF'                                      44510000
*                                                                       44520000
*---------------------------------------------------------------------- 44530000
*        PRINT ROUTINE                                                  44540056
*---------------------------------------------------------------------- 44550000
*                                                                       44560000
SPACE2   ST    R14,SPACE2RE            save R14                         44570039
         BAL   R14,SPACE1          <== print current line               44580041
         L     R14,SPACE2RE            restore R14                      44590039
         B     SPACE1L                 print blank line                 44600039
*        print blank line                                               44610039
BLANK1   MVC   LINE121,BLANKS          BLANK LINE                       44620039
         B     SPACE1L                 print blank line                 44630039
*        convert to caps                                                44640039
SPACE1   TR    LINE,TRTPRINT           get rid of non-printable chars   44650039
         OC    LINE,BLANKS             make it all caps                 44660039
*                                                                       44670039
SPACE1L  BALR  R15,0                                                    44680039
         SAVE  (14,2),,SPACE1                                           44690039
         CLC   MINLINES,RLINES         ENOUGH LINES LEFT?               44700000
         BH    SPACE1D                 NO, JUMP                         44710039
         LA    R0,3                    COUNT LINES                      44720000
         CLI   LINE121,C'-'            COUNT LINES                      44730039
         BE    SPACE1B                 COUNT LINES                      44740039
         LA    R0,2                    COUNT LINES                      44750000
         CLI   LINE121,C'0'            COUNT LINES                      44760039
         BE    SPACE1B                 COUNT LINES                      44770039
         LA    R0,1                    COUNT LINES                      44780000
SPACE1B  SR    R1,R1                                                    44790039
         ICM   R1,1,RLINES             ANY LINES LEFT?                  44800000
         BZ    SPACE1D                 NO, JUMP                         44810039
         SR    R1,R0                   DECREMENT LINE COUNT             44820000
         BNM   SPACE1K                 NOT END-OF-PAGE YET, JUMP        44830039
SPACE1D  MVI   LINE121,C'1'            NEW PAGE                         44840039
         LA    R1,060-1                RESET LINE COUNTER               44850000
         CLC   LINE,BLANKS             BLANK LINE?                      44860039
         BNE   SPACE1K                 NO, JUMP                         44870039
         MVI   LINE121,C'+'            YES, KEEP IT                     44880039
         SR    R1,R1                   RESET LINE COUNTER               44890000
SPACE1K  STCM  R1,1,RLINES             NUMBER OF REMAINING LINES        44900039
         MVI   MINLINES,0              RESET MINLINES                   44910000
*                                                                       44920000
         ST    R13,DYNAM24+4           OLD SAVE AREA (DYNAM31)          44930000
         LA    R13,DYNAM24             NEW SAVE AREA (DYNAM24)          44940000
         PUT   DCBDEBUG,LINE121        ISSUE PUT WITH AMODE24           44950056
         MVC   LINE121,BLANKS          BLANK OUT                        44960039
         L     R13,4(,R13)             OLD SAVE AREA (DYNAM31)          44970056
         RETURN (14,2)                                                  44980000
         DROP                                                           44990000
*                                                                       45000000
*---------------------------------------------------------------------- 45010000
*        RECOVERY ROUTINE FOR TRAPPING MY OWN ABENDS                    45020000
*---------------------------------------------------------------------- 45030000
*                                                                       45040000
         CNOP  0,8                                                      45050043
         DC    C'RETRY00'              EYE CATCHER                      45060043
RETRY00  LA    R15,012                 R0 VALUE FOR 'NO SDWA ALLOCATED' 45070000
         CLR   R0,R15                  SDWA ALLOCATED?                  45080000
         BALR  R15,0                   LOCAL BASE                       45090000
         BNE   RETRY04-*(,R15)         YES, JUMP                        45100000
         SR    R15,R15                 SET RC=0 (IF R0=12)              45110000
         BR    R14                     RETURN TO EXIT PROLOG            45120000
*                                                                       45130000
RETRY04  BALR  R15,0                   LOCAL BASE                       45140000
         SAVE  (14,12),,RETRY04        SAVE REGS                        45150000
         BALR  R7,0                                                     45160000
         USING *,R7                                                     45170000
RETRY11  LR    R8,R1                   SAVE ADDR OF SDWA                45180000
         USING SDWA,R8                                                  45190000
         L     R4,SDWAPARM             =A(DYNAM31)                      45200039
         USING DYNAM31,R4                                               45210039
         CLI   #RETRY,0                ANY RETRY ADDRESS?               45220000
         BE    RETRY70                 NO, JUMP                         45230000
*                                                                       45240000
RETRY40  CLC   =X'0C4000',SDWACMPC     S0C4 ABEND?                      45250000
         BNE   RETRY70                 NO, IGNORE                       45260000
         CL    R7,SDWANXT1             RETRY11 > ABEND ?                45270000
         BH    RETRY70                 YES, IGNORE                      45280000
         SLR   R10,R10                                                  45290000
         ICM   R10,B'0011',#RETRY      GET 16-BIT OFFSET                45300000
         ALR   R10,R7                  CHANGE OFFSET TO ADDRESS         45310000
         CL    R10,SDWANXT1            RETRY < ABEND ?                  45320000
         BL    RETRY70                 YES, IGNORE                      45330000
         NI    SDWACMPF,255-SDWAREQ    NO DUMP                          45340000
         B     RETRY77                                                  45350000
*                                                                       45360000
RETRY70  LA    R10,RETRY99             RETRY ADDRESS                    45370000
         WTO   '==> DEBUGGING ROUTINE ABENDED <==',ROUTCDE=11           45380000
         MVC   SDWAGR13,DYNAM31+4      RTM SAVE AREA                    45390000
*                                                                       45400000
RETRY77  MVC   SDWASRSV,SDWAGRSV       MOVE REGISTERS                   45410000
         MVI   #RETRY,0                RESET RETRY ADDRESS              45420000
         SETRP WKAREA=(R8),                                            X45430036
               RETADDR=(R10),RC=4,    <== RETRY                        X45440036
               FRESDWA=YES,RETREGS=YES                                  45450000
RETRY99  RETURN (14,12)                GOBACK TO RTM                    45460000
*---------------------------------------------------------------------* 45470048
*        BEGIN_PROC bootstrap                                         * 45480048
*---------------------------------------------------------------------* 45490048
BEGIN_PROC AH  R15,0(,R15)             add offset to far routine        45500048
         BR    R15                     branch to far routine            45510048
*********************************************************************** 45520000
         MACRO                                                          45530000
&NAME    TABLE &FN                                                      45540000
&I       SETA  2                                                        45550000
&J       SETA  &FN                                                      45560000
&NAME2   SETC  '&NAME'                                                  45570000
.LOOP    AIF   (T'&SYSLIST(&I) EQ 'O').NEXT                             45580000
         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').HH                         45590000
&K       SETA  K'&SYSLIST(&I)                                           45600000
&NAME2   DC    AL1(&J,&K),C'&SYSLIST(&I)'                               45610000
.HH      AIF   ('&SYSLIST(&I)'(1,1) NE '''').NEXT                       45620000
&K       SETA  K'&SYSLIST(&I)-2                                         45630000
&NAME2   DC    AL1(&J,&K),C&SYSLIST(&I)                                 45640000
.NEXT    ANOP                                                           45650000
&NAME2   SETC  ''                                                       45660000
&I       SETA  &I+1                                                     45670000
&J       SETA  &J+1                                                     45680000
         AIF   (&I LE N'&SYSLIST).LOOP                                  45690000
         MEND                                                           45700000
*********************************************************************** 45710000
TABLES   LOCTR                                                          45720000
SVCTABLE TABLE 0,EXCP,WAIT,POST,EXIT,GETMAIN,FREEMAIN,LINK,XCTL,       X45730000
               LOAD,DELETE,GETMAIN/FREEMAIN,TIME,SYNCH,ABEND,SPIE,     X45740000
               ERREXCP,PURGE,RESTORE,BLDL/FIND,OPEN,CLOSE,STOW,        X45750000
               'OPEN TYPE=J','CLOSE TYPE=T',DEVTYPE,TRKBAL,            X45760000
               LOCATE/CATALOG,OBTAIN,CVOL,SCRATCH,RENAME,FEOV,REALLOC, X45770000
               IOHALT,MGCR/QEDIT,WTO/WTOL,WTL,SEGLD/SEGWT,,LABEL,      X45780000
               EXTRACT,IDENTIFY,ATTACH,CIRB,CHAP,OVLYBRCH,TTIMER,      X45790000
               STIMER,DEQ,,,SNAP/SDUMP,RESTART,RELEX,DISABLE,EOV,      X45800000
               ENQ/RESERVE,FREEDBUF,RELBUF/REQBUF,OLTEP,STAE/ESTAE,    X45810000
               IKJEGS6A,DETACH,CHKPT,RDJFCB,,BTAMTEST,,                X45820000
               SYNADAF/SYNADRLS,BSP,GSERV                               45830000
         TABLE 79,STATUS,,SETPRT,,SMFWTM,GRAPHICS,DDRSWAP,ATLAS,DOM     45840000
         TABLE 91,VOLSTAT,TCBEXCP,TGET/TPUT,STCC,SYSEVENT,STAX,        X45850032
               'TSO TEST',PROTECT,DYNALLOC,IKJEFFIB,,,XLATE,,IMGLIB,,  X45860044
               MODESET,,'TYPE 3 ESR',DSTATUS,HASPSSSM,PGRLSE,PGFIX,    X45870044
               EXCPVR,,'TYPE 1 ESR',DEBCHK,,TESTAUTH,                  X45880032
               GETMAIN/FREEMAIN,VSAM,'TYPE 2 ESR',PURGEDEQ,,EVENTS      45890000
         TABLE 130,RACHECK,RACINIT,RACLIST,RACDEF                       45900000
         TABLE 138,PGSER,CVAF,,,,CIPHER                                 45910000
         DC    X'FF',0D'0'             END OF TABLE                     45920000
PCKTABLE TABLE 1,OPERATION,'PRIVILEGED OPERATION',EXECUTE,             X45930000
               PROTECTION,ADDRESSING,SPECIFICATION,DATA,               X45940000
               'FIXED-PT OVERFLOW','FIXED-PT DIVIDE',                  X45950000
               'DECIMAL OVERFLOW','DECIMAL DIVIDE',                    X45960000
               'EXPONENT OVERFLOW','EXPONENT UNDERFLOW',               X45970000
               SIGNIFICANCE,'FLOATING-PT DIVIDE',                      X45980000
               'SEGMENT TRANSLATION','PAGE TRANSLATION',               X45990000
               'TRANSLATION SPECIFICATION','SPECIAL OPERATION'          46000000
         DC    X'FF',0D'0'             END OF TABLE                     46010000
FF       EQU   X'FF'                                                    46020042
*---------------------------------------------------------------------- 46030000
*        DYNAMIC STORAGE                                                46040000
*---------------------------------------------------------------------- 46050000
DYNAM31  LOCTR                     <== R13                              46060000
         DS    18F                     SAVE AREA                        46070000
TENWORDS DS    10F                     WORK                             46080000
WKCELL1  DS    D                       WORK CELL                        46090000
WKCELL2  DS    D                       WORK CELL                        46100000
WKCELL3  DS    D                       WORK CELL                        46110039
REGION24 DS    A,A                     START/END OF 24-BIT REGION       46120000
REGION31 DS    A,A                     START/END OF 31-BIT REGION       46130000
DYN_TCB  DS    A(TCB)                  TCB FOR FREEMAIN                 46140000
DYNAM24P DS    A(DYNAM24)              24-BIT WORK AREA                 46150000
SPACE2RE DS    A(R14)                  save area for R14                46160039
ESTAEL   ESTAE MF=L                                                     46170000
MASKADDR DS    A(X'7FFFFFFF')          MASK FOR CLEANING UP ADDRESSES   46180000
LASTPRB  DS    A(RBPREFIX)             ADDR OF LAST PRB                 46190000
FRSTSVRB DS    A(RBPREFIX)             ADDR OF FIRST SVRB               46200000
ABNDSVRB DS    A(RBPREFIX)             ADDR OF ABEND SVRB               46210000
MY_PRB   DS    A(RBPREFIX)             MY OWN RBPREFIX                  46220000
CURR_R13 DS    A(R13)                  R13 at time of abend             46230001
BUFFER   DS    A                       START OF CURRENT BUFFER          46240000
CURR_REC DS    A(IHADCB)               CURRENT RCD PRINTED FOR THIS DCB 46250000
PREV_REC DS    A(IHADCB)               previous record                  46260039
OPNLRECL DS    F                       LRECL from DEBLRECL/DCBLRECL     46270039
OPNBLKSI DS    F                       BLKSIZE from DEBBLKSI/DCBBLKSI   46280039
REGS     DS    16F                                                      46290000
IEFEB4UV DS    V(IEFEB4UV)             IEFEB4UV                         46300000
BLDLWORK DS    0F,AL2(1,L'CSVDWORK)    prefix for BLDL                  46310056
         IHAPDS DSECT=NO,PDSBLDL=YES   PDS Directory                    46320056
*ASSB                                                                   46330056
*ASSBDLCB                                                               46340056
*DLCB                                                                   46350056
*DLCBLLT@                                                               46360056
*EPNM                                                                   46370056
*LLTDSN                                                                 46380056
*MODTOKEN                                                               46390056
*PDATA                                                                  46400056
*PDATA_DDN                                                              46410056
*PDATA_TTRN                                                             46420056
*PID                                                                    46430056
*WORK44                                                                 46440056
CSVDWORK EQU   BLDLWORK,*-BLDLWORK     Work area for CSVDSN routine     46450056
SWAREQL1 SWAREQ MF=L                                                    46460000
         CSVQUERY MF=(L,CSVQRYWK),PLISTVER=2                            46470056
ENQLIST  ENQ   (ENQNAMES,ENQNAMES,E,,STEP),MF=L                         46480050
ENQLISTL EQU   *-ENQLIST                                                46490050
SAVPLHPT DS    A(IDAPLHDR,IDAPLH)      save area                        46500042
$DSAB    DS    A(DSAB)                 set by VALDCB                    46510040
$JFCB    DS    A(INFMJFCB)             set by VALDCB                    46520040
$SIOT    DS    A(INDMSIOT)             set by VALDCB                    46530040
$TIOT    DS    A(TIOENTRY)             set by VALDCB                    46540040
$DCB     DS    A(IHADCB)                                                46550042
$ACB     DS    A(IFGACB)                                                46560042
$AMBL    DS    A(AMBL)                                                  46570042
$AMB_D   DS    A(AMB)                                                   46580042
$AMB_I   DS    A(AMB)                                                   46590042
$AMDSB_D DS    A(AMDSB)                                                 46600042
$AMDSB_I DS    A(AMDSB)                                                 46610042
$PLHDR   DS    A(IDAPLHDR)                                              46620042
$RPL     DS    A(IFGRPL)                                                46630042
$RTM2WA  DS    A(RTM2WA)               set by NEXTRB                    46640042
#RETRY   DS    H,H                     OFFSET TO RETRY ADDRESS          46650041
SPLEVEL  DS    X                       MVS/SP LEVEL: 1, 2, 3, 4         46660000
RLINES   DS    FL1'60'                 LINE COUNT                       46670000
MINLINES DS    FL1'01'                 MINIMUM NUMBER OF LINES          46680000
STRNO    DS    FL1                     string number (PLH/RPL)          46690039
DDNAME   DS    C'SYSPRINT'             SAVED DDNAME                     46700000
DDNAME2  DS    C'SYSPRINT+002'         SAVED DDNAME                     46710000
ABCODE   DS    C'ABEND=S013-18'        ABEND CODE                       46720000
XDSORG   DS    C'PS'                   DATA SET ORG                     46730000
XMACRF   DS    C'(GMC,PLC)'            DCBMACRF                         46740039
XRECFM   DS    C'UTBSAM'               RECORD FORMAT                    46750039
REASON   DS    C'SDB'                  reason code                      46760053
OCE_CODE DS    C                       O/C/E CODE                       46770000
ORIGIN2  DS    C'  (HSA)'              ORIGIN OF PSW2                   46780000
EPNAME   DS    CL8                     EP NAME                          46790000
OFFSET   DS    C'+X''123456'''         OFFSET FROM LOAD POINT           46800000
VIACALL  DS    C'SYNCH'                CALL/LINK/SYNCH                  46810000
MSG20    DS    CL20                                                     46820000
MSG60    DS    CL60                                                     46830041
VOLSER   DS    CL6                                                      46840000
STATUS   DS    C'OLD'                                                   46850000
UCB_NAME DS    C'1234'                 4-character device number (ESA4) 46860051
WORK44   DS    CL44                                                     46870056
EYECATCH DS    CL120                                                    46880000
TRTPRINT DS    XL256                                                    46890000
BLANKS   DS    CL121                   LOTS OF BLANKS                   46900000
UNITNAME DS    CL8,XL4,XL4             IEFEB4UV                         46910000
TITLE121 DS    CL121                   TITLE LINE                       46920000
X00      EQU   16,1                    X'00'                            46930000
STACK128 DS    128A                                                     46940000
SAVER012 DS    16F                     save area for R0=12 entry        46950043
*                                                                       46960056
PDATA    DS    XL16                                                     46970056
PDATA_DDN EQU PDATA+8,8,C'C'           DDNAME                           46980056
PDATA_TTRN EQU PDATA+4,4,C'X'          TTRN                             46990056
PID      DS    XL4                                                      47000056
MODTOKEN DS    XL8                                                      47010056
PDATA_DSN DS   CL44                                                     47020056
*                                                                       47030056
         DS    0D                                                       47040043
D31SDWA  DS    XL1000                  copy of RTM2's SDWA              47050043
DYN31FAR LOCTR                                                          47060000
         DS    (DYNAM31+4096-*)C       MAKE IT A FULL PAGE              47070000
DYNAM31L EQU   *-DYNAM31                                                47080000
*                                                                       47090000
*        24-BIT WORKING STORAGE        <-- R12                          47100000
*                                                                       47110000
DYNAM24  DSECT                                                          47120000
         DS    18F                     SAVE AREA                        47130000
OPENLIST OPEN  (DCBDEBUG,OUTPUT),MF=L                                   47140000
DCBDEBUG DCB   DSORG=PS,MACRF=PM,DDNAME=SYSDEBUG                        47150000
LINE121  DS    CL121                   PRINT LINE (control character)   47160039
LINE     EQU   LINE121+1,L'LINE121-1   PRINT LINE                       47170039
         DS    0D                      align place-holder for freemain  47180043
DYNAM24H DS    CL(DYNAM24+16384-*)     PLACE HOLDER                     47190043
DYNAM24L EQU   *-DYNAM24                                                47200000
         STRING (GENERATE,,LOCTR)                                       47210055
*********************************************************************** 47220000
         PRINT NOGEN                                                    47230000
PRINT    OPSYN ANOP                                                     47240000
         IHAPSA DSECT=YES              PREFIXED STORAGE AREA            47250000
         CVT   PREFIX=YES,DSECT=YES,LIST=NO                             47260000
*@@@     IHALLT DSECT=YES              LNKLST/LPALST tables             47270035
LLT      DSECT                                                          47280035
LLTLLT   DS    C'LLT '                 BLOCK ACRONYM                    47290035
LLTNO    DS    F                       NUMBER OF ENTRIES                47300035
LLTENTRY DS    0CL45                   DSNAME ENTRY                     47310035
LLTDSNL  DS    FL1                     DSNAME LENGTH AFTER TRUNCATION   47320035
LLTDSN   DS    CL44                    DATA SET NAME                    47330056
LLTNEXT  EQU   *                       NEXT ENTRY                       47340035
         CSVDLCB TITLE=NO              Dynamic Link-List                47350056
         IHAASCB DSECT=YES             ADDRESS SPACE CONTROL BLOCK      47360000
         IHAASSB LIST=NO               Address Space Secondary Block    47370056
         IHAASXB DSECT=YES             ADDRESS SPACE EXTENSION BLOCK    47380037
         IHAACEE                       Accessor Environment Element     47390040
         IHALDA                        Local Data Area                  47400037
CSCB     DSECT                                                          47410040
         IEECHAIN                      COMMAND SCHEDULER CONTROL BLOCK  47420000
         IKJTCB DSECT=YES              TASK CONTROL BLOCK               47430000
         IHASTCB                       Secondary TCB                    47440034
         IKJRB  DSECT=YES              REQUEST BLOCK                    47450000
         IHACDE                        CONTENTS DIRECTORY ENTRY         47460000
         IHALLE                        LOAD-LIST ELEMENT                47470000
         IHAXTLST                      EXTENT LIST                      47480000
         IEFTCT                        SMF TCT                          47490000
         IEFTIOT1                      TASK INPUT-OUTPUT TABLE          47500000
******** IEFZB4D5                                                       47510028
DSABQDB  DSECT                         DSAB QUEUE DESCRIPTOR BLOCK      47520028
DSQDBID  DS    C'DSAB'                 ACRONYM                          47530028
DSQATTRS DS    XL2                     ATTRIBUTES                       47540028
DSQQDBLN DS    H'32'                   QDB LENGTH                       47550028
DSQNELMS DS    F                       NUMBER OF ELEMENTS ON QUEUE      47560028
DSQFRSTP DS    A(DSAB)                 FIRST DSAB                       47570028
DSQLASTP DS    A(DSAB)                 LAST DSAB                        47580028
         IHADSAB                       DATA SET ASSOCIATION BLOCK       47590028
SIOT     DSECT                                                          47600028
         IEFASIOT                      STEP I/O TABLE                   47610028
JFCB     DSECT                                                          47620028
         IEFJFCBN                      JOB FILE CONTROL BLOCK           47630028
         DCBD  DSORG=PS,DEVD=DA        IHADCB                           47640000
         AIF   (D'DCBDCBE).SMS33                                        47650029
DCBDCBE  EQU   DCBRELAD                DCBE address                     47660029
.SMS33   ANOP                                                           47670029
         IHADCBE                       DFSMS/MVS DCB extension          47680057
         AIF   (D'DCBESLBI).SMS44                                       47690057
DCBESLBI EQU   X'20'                   z/OS R1                          47700057
DCBEBLKSI EQU  DCBE+28,4,C'F'          z/OS R1                          47710057
.SMS44   ANOP                                                           47720057
         IEZDEB                        DATA EXTENT BLOCK                47730000
         AIF   (D'DEBXTEND).DEB34      HDZ11C0                          47740053
DEBXTEND EQU   X'0E'                   OPEN EXTEND                      47750053
DEBOTINX EQU   X'06'                   OUTINX                           47760053
.DEB34   ANOP                                                           47770053
         IHADECB DSECT=YES             READ/WRITE                       47780000
         IEZIOB  DSECT=YES             I/O BLOCK                        47790000
         IEFUCBOB LIST=NO,PREFIX=NO    UNIT CONTROL BLOCK               47800000
         IEFJESCT                      JES VECTOR TABLE                 47810000
         IHASCB  DSECT=YES             STAE CONTROL BLOCK               47820000
         IHASDWA DSECT=YES,VRAMAP=NO   SDWA DSECT                       47830000
*@@      IHARTM2A                                                       47840042
RTM2WA   DSECT                                                          47850042
RTM2ID   DS    C'RTM2'                 CB ID                            47860042
RTM2ADDR DS    A(RTM2WA)               Address                          47870042
RTM2SPID DS    AL1(255)                sub-pool                         47880042
RTM2LGTH DS    FL3'972'                length                           47890042
RTM2CVT  DS    V(CVT)                  CVT addr                         47900042
RTM2TCBC DS    V(TCB)                  TCB addr                         47910042
RTM2VRBC DS    V(RBBASIC)              SVRB addr                        47920042
RTM2ASC  DS    V(ASCB)                 addr of ASCB                     47930042
RTM2CODE DS    0XL4                    completion code                  47940043
RTM2CCF  DS    X                       flags                            47950042
RTM2CC   DS    XL3                     Completion code                  47960042
RTM2EREG DS    16F                     GPRs at time of abend            47970043
         DS    7F                                                       47980043
RTM2EPSW DS    XL8                     EC PSW at time of error          47990042
RTM2AEC1 DS    XL8                     Additional EC mode information   48000042
         DS    10F                                                      48010042
RTM2FLGS DS   0BL4                     Error Flags                      48020043
RTM2ERRA DS    B                       Error type causing entry to RTM2 48030043
RTM2PCHK  EQU  X'40'                   Program Check                    48040042
RTM2ABTM  EQU  X'08'                   ABTERM (SVC 13)                  48050043
         DS    45F                                                      48060042
RTM2PREV DS    A                       Previous RTM2WA                  48070042
RTM2SDW2 EQU   RTM2WA+X'3DC',4,C'A'    RTM2's SDWA                      48080043
         IRAOUCB DSECT=YES             OUCB DSECT                       48090000
         IHALPDE                       LPDE DSECT                       48100000
         IHARD                         REGION DESCRIPTOR                48110000
IFGACBVS OPSYN  ANOP                                                    48120000
         IFGACB DSECT=YES              ACB DSECT                        48130000
IFGRPLVS OPSYN  ANOP                                                    48140000
         IFGRPL DSECT=YES              RPL DSECT                        48150000
         IEFZB505 LOCEPAX=YES          EPA MAPPING FOR SWAREQ           48160000
JCT      DSECT                         <--  JSCBJCT, LCTJCTAD           48170039
         DS    F,A,F,C'JCT '           PREFIX                           48180039
JCTEQREG EQU   *+92,2,C'H'             REGION IN K (MAX VALUE IS 16383) 48190039
         IEFAJCTB                      JOB Control Table                48200039
         AIF   (D'JCTSWAUP).JCT2                                        48210039
JCTSISO  EQU   2                       JCTSTAT2, NEW WITH DFP 2.3       48220039
JCTSWAUP EQU   1                       JCTSTAT2, NEW WITH DFP 2.3       48230039
.JCT2    ANOP                                                           48240039
         AIF   (D'JCTJMRTL).JCT3                                        48250039
JCTJMRTL EQU   INJMJCT+X'8C',3,C'F'    TIME limit (XA,ESA313)           48260039
.JCT3    ANOP                                                           48270039
JCTX     DSECT                         <--  JCTJCTX                     48280039
         DS    F,A,F,C'JCTX'           PREFIX                           48290039
         IEFJCTX                       JCT Extension                    48300039
         AIF   (D'JCTXJMRD).JCTX3                                       48310049
JCTXSSD  EQU   JCTXIN+X'58',4,C'P'     step start date  (HBB4430)       48320049
JCTXJMRD EQU   JCTXIN+X'5C',4,C'P'     job start date  (HBB4430)        48330049
         AIF   (D'JCTXJTL).JCTX3                                        48340039
JCTXJTL  EQU   JCTXIN+X'3C',4,C'F'     TIME limit (ESA410)              48350039
.JCTX3   ANOP                                                           48360039
SCT      DSECT                         Step Control Table               48370033
         DS    XL16                    PREFIX                           48380033
         IEFASCTB                      SCT                              48390000
         AIF   (D'SCTSTIME).SCT2                                        48400039
SCTSTIME EQU   SCT+X'15',3,C'F'        step time limit (XA/ESA31)       48410039
.SCT2    ANOP                                                           48420039
SCTX     DSECT                         Step Control Table Extension     48430033
         DS    XL16                    PREFIX                           48440033
         IEFSCTX DSECT=NO              SYS1.MODGEN                      48450033
         IEZJSCB                       JSCB                             48460000
         IEFJSSIB                      Sub-System Identification Block  48470039
*@@      IGGICQE                       INTERRUPT CONTROL QUEUE ELEMENT  48480000
ICQE     DSECT                         INTERRUPT CONTROL QUEUE ELEMENT  48490000
ICQECB   DS    F                       ECB POINTED TO BY IOB IN SAMB    48500000
ICQIOBAD DS    A(IOB)                  ADDRESS OF IOB IN SAMB           48510000
ICQFIRST DS    A(IOB)                  FIRST USER IOB                   48520000
ICQFLG   DS    X                       FLAG BYTE                        48530000
ICQEXND  EQU   X'80'                   EXCPVR PROCESSING NEEDED         48540000
ICQENDAD DS    AL3(IOB)                LAST USER IOB                    48550000
ICQFSTQ  DS    A(IOB)                  FIRST USER IOB IN QUEUE          48560000
ICQMAXQ  DS    FL1                     MAX NUMBER OF IOBS ON QUEUE      48570000
ICQNOQ   DS    FL1                     CURRENT NUMBER OF IOBS ON QUEUE  48580000
ICQSAVQ  DS    X,X                     SAVE AREA FOR ICQMAXQ (EOV)      48590000
ICQSAVCT DS    C'MBBCCHHR'             SAVE AREA FOR MBBCCHHR           48600000
ICQSAV   DS    18F                     SAVE AREA FOR EOB PROCESSING     48610000
*@@      VSAM MACROS                                                    48620000
AMBL     DSECT                                                          48630000
         DS    2F                                                       48640000
AMBLACB  DS    V(IFGACB)               ADDRESS OF THE ACB               48650000
         DS    1F                                                       48660000
AMBLDDNM DS    0CL8                    THE ACB'S DDNAME                 48670030
AMBLCACB DS    A,XL3                   CATALOG ACB ADDR, CI NO          48680030
AMBLQ    DS    X                       QUALIFIER                        48690042
AMBLDDC  EQU   X'80'                   DD CONNECT ONLY                  48700030
AMBLGSR  EQU   X'40'                   GLOBAL SHARED RESOURCES          48710030
AMBLLSR  EQU   X'20'                   LOCAL SHARED RESOURCES           48720030
AMBLFSTP EQU   X'10'                   FAST PATH                        48730030
AMBLUBF  EQU   X'08'                   USER BUFFERING                   48740030
AMBLKSDS EQU   X'04'                   KEY-SEQUENCED DATA SET           48750030
AMBLESDS EQU   X'02'                   ENTRY-SEQUENCED DATA SET         48760030
AMBLDFR  EQU   X'01'                   DEFERRED WRITES                  48770030
         DS    F,H                     XPT,LVC                          48780030
AMBLTYPE DS    X                       TYPE OF CB ATRUCTURE OPENED      48790030
AMBLPATH EQU   X'80'                   PATH                             48800030
AMBLUPGR EQU   X'40'                   UPGRADE SET                      48810030
AMBLAIX  EQU   X'20'                   ALTERNATE INDEX                  48820030
AMBLBASE EQU   X'10'                   BASE CLUSTER                     48830030
AMBLQ2   DS    X                       QUALIFIED EXTENSION              48840042
AMBLSHR  EQU   X'20'                   SHR(3) OR SHR(4)                 48850030
AMBLCRE8 EQU   X'10'                   CREATE MODE                      48860030
AMBLID   DS    X'50'                   ID                               48870041
AMBLSHAR DS    X                       Sharing indicators               48880041
AMBLPRIM EQU   X'80'                   Primary AMBL                     48890041
AMBLWRIT EQU   X'20'                   OUTPUT or UPDATE mode            48900041
AMBLLEN  DS    FL1'80'                 Length of the AMBL               48910041
AMBLFLG1 DS    X,X                     FLG1, FLG2                       48920041
AMBLDUMY EQU   X'01'                   DD DUMMY                         48930041
AMBLNST  DS    FL1                     STRNO                            48940041
         DS    H,A,A,F                 LNUM, MMIB, DSAB, SMFT           48950041
AMBLDTA  DS    A(AMB)                  DATA'S AMB                       48960000
AMBLIX   DS    A(AMB)                  INDEX'S AMB                      48970000
AMBLBIB  DS    V(BIB)                  BASE INFORMATION BLOCK           48980000
AMBLCMB  DS    V(CMB)                  CLUSTER MANAGEMENT BLOCK         48990000
*                                                                       49000000
AMB      DSECT                                                          49010000
AMBID    DS    X'40',X,H,A             ID, TS, LEN, LINK                49020022
AMBBUFC  DS    A(BUFC)                 ADDRESS OF BUFC HEADER           49030022
AMBPH    DS    A(IDAPLHDR)             ADDRESS OF THE PLH HEADER        49040042
AMBCACB  DS    A(IFGACB)               ADDRESS OF THE ACB               49050000
AMBDSB   DS    A(AMDSB)                DATA SET STATISTICS BLOCK        49060030
AMBFLG0  DS    X                       FLAGS                            49070030
AMBLDS   EQU   X'04'                   Linear Data Set                  49080042
AMBFLG1  DS    X                       FLAGS                            49090030
AMBCREAT EQU   X'80'                   CREATE MODE                      49100030
AMBSPEED EQU   X'08'                   SPEED OPTION                     49110030
AMBDSORG DS    X'0008'                 DSORG                            49120030
         DS    A,XL3,AL3,H             IOB/IOMB, *, DDSN, *             49130030
AMBTIOT  DS    AL2,X,X,V(TCB)          TIOT, INFL, AMETH, TCB           49140000
AMBOFLGS DS    X,X,XL2                 OFLGS, FLG2                      49150000
         DS    XL(136-52)                                               49160000
AMBDSNM  DS    CL44                    DATA SET NAME                    49170000
*                                                                       49180022
BUFC     DSECT                         BUFC Header                      49190022
BUFCID   DS    X'70'                   ID                               49200022
BUFCBUFN DS    FL1                     BUFNI/BUFND                      49210022
BUFCLEN  DS    H'88'                   length of BUFC entry             49220039
         DS    A,A,A,A                 more stuff                       49230022
*                                                                       49240000
AMDSB    DSECT                                                          49250000
AMDSBID  DS    X'60'                   ID                               49260042
AMDATTR  DS    X                       ATTR                             49270042
AMDRRDS  EQU   X'02'                   RRDS                             49280042
AMDLEN   DS    H,H                     LEN, NEST                        49290042
AMDRKP   DS    H                       KEY OFFSET                       49300000
AMDKEYLN DS    H                       KEY LENGTH                       49310000
*                                                                       49320000
IDAPLHDR DSECT                                                          49330042
PLHID    DS    X'30',X,H               PLH HEADER                       49340022
PLHCNT   DS    H                       COUNT OF PLH ENTRIES BEHIND HDR  49350042
PLHDRREQ DS    H                       COUNT OF DEFERRED REQUESTS       49360042
PLHDRMAX DS    H                       MAX NO OF PLH ENTRIES IN USE     49370042
PLHDRCUR DS    H                       NO OF ACTIVE ENTRIES             49380042
PLHIOSDQ DS    A                       DEFERRAL QUEUE HEADER            49390042
*                                                                       49400042
IDAPLH   DS    X'FF'              +016                                  49410042
PLHIDENT DS    C'PLH'                                                   49420022
         DS    X,X,X,X,X,X,XL2         FLG0,1,2,3,4,5,EFLGS             49430000
         DS    X,X,X,FL1               RCODE, RMIN, FRCNT, BFRNO        49440000
PLHMRPL  DS    V(IFGRPL),0A            RPL HEADER, JRNAD                49450000
PLHCRPL  DS    V(IFGRPL),A        +036 CURRENT RPL                      49460000
PLHCRBA  DS    A,A,A,X,X,X,X,A    +044 Current RBA                      49470000
PLHLRECL DS    F,A,A              +064 LENGTH OF RECORD                 49480000
PLHRECP  DS    A                  +076 ADDRESS OF CURRENT RECORD        49490000
         DS    A,A,H,H,A,A,6F                                           49500000
PLHACB   DS    V(IFGACB),X,3X     +124 ADDRESS OF THE ACB               49510000
PLHCHAIN DS    A(IDAPLH)          +132 ADDRESS OF THE NEXT PLH          49520042
         YREGS                                                          49530000
        $LRC                           HASP LOGICAL RECORD              49540000
SDB      DSECT                         JES2                             49550048
SDBID    EQU   SDB+X'0048',4           "SDB "                           49560048
UBF      DSECT                         JES2                             49570048
UBFID    EQU   UBF,4                   "UBF "                           49580048
         END                                                            49590045
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  49600030
//         DD DSN=SYS1.MODGEN,DISP=SHR                                  49610000
//*R10     DD DSN=SYS1.V2R10M0.SHASMAC,DISP=SHR (OR HASPSRC) $LRC       49620051
//         DD DSN=SYS1.SHASMAC,DISP=SHR                      $LRC       49630051
//         DD DSN=GILBERT.FILE183.PDS,DISP=SHR               STRING     49640053
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,5)                                    49650000
//SYSPRINT DD SYSOUT=*                                                  49660000
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,2),DISP=(,PASS),BLKSIZE=3200          49670053
//*                                                                     49680000
//LKED    EXEC PGM=LINKEDIT,PARM='LIST,MAP,RENT,REFR'                   49690054
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)                                    49700000
//SYSPRINT DD SYSOUT=*                                                  49710000
//SYSLIN   DD *                                                         49720000
  ORDER SYSDEBUG(P)                                                     49730054
//         DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)                        49740052
//SYSLMOD  DD DSN=GILBERT.FILE183.LOAD(SYSDEBUG),DISP=SHR               49750057
//**********************************************************************49760056
//*                                                                    *49770056
//*       Simple test (no abend) - check XCTL function                 *49780056
//*                                                                    *49790056
//**********************************************************************49800056
//XCTL    EXEC PGM=SYSDEBUG,ACCT=IEFBR14                                49810045
//STEPLIB  DD DSN=GILBERT.FILE183.LOAD,DISP=SHR                         49820057
//SYSDEBUG DD SYSOUT=*                                                  49830000
//*YSUDUMP DD SYSOUT=*                                                  49840052
//**********************************************************************49850056
//*                                                                    *49860056
//*       Test Program - Abends with S0C3                              *49870056
//*                                                                    *49880056
//**********************************************************************49890056
//HLASM2 EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)        49900052
TESTDBUG CSECT                                                          49910000
         SAVE  (14,12),,*                                               49920000
         BALR  R11,0                                                    49930000
         USING *,R11                                                    49940000
         LR    R14,R13                                                  49950000
         LA    R13,=9C'SAVEAREA'                                        49960000
         ST    R14,4(,R13)                                              49970000
         ST    R13,8(,R14)                                              49980000
         LOAD  EP=SYSDEBUG                                              49990045
         LR    R15,R0                                                   50000030
         BASSM R14,R15              <-- INITIALIZE DEBUGGING RTNE       50010039
         ESPIE SET,*+2,(4)              check my ESPIE override is OK   50020042
         OPEN  (STEPLIB,,SYSLIN,,ACB1,,                                X50030053
               SYSUT2,OUTPUT,SYSPRINT,OUTPUT,SYSPUNCH,EXTEND)           50040053
         GET   SYSLIN                   FIRST RECORD                    50050053
         MVC   LINE121+1(80),0(R1)      copy record                     50060053
         PUT   SYSPRINT                 PUT Locate                      50070053
         MVC   0(L'LINE121,R1),LINE121  copy record to buffer           50080053
         PUTX  SYSPUNCH,SYSLIN                                          50090053
         READ  DECB1,SF,STEPLIB,WK256,256                               50100000
         CHECK DECB1                                                    50110000
         PUT   RPL=RPL1                                                 50120039
         CLOSE ACB1                                                     50130039
         OPEN  (DISKSUL,OUTPUT)                                         50140041
         LH    R2,=H'5000'                                              50150041
PUTSUL   PUT   DISKSUL,=AL2(21,0,1,2,3,4,5,6,7,8,9)                     50160041
         BCT   R2,PUTSUL                                                50170041
         CLOSE DISKSUL                                                  50180041
         MODCB ACB=ACB1,STRNO=2                                         50190039
         OPEN  (ACB1,,DISKSUL)                                          50200041
         GET   DISKSUL                                                  50210041
         MVI   WK256,44                                                 50220039
         PUT   RPL=RPL1                                                 50230039
S80A     GETMAIN RC,LV=1024         <-- fill up private area below      50240043
         LTR   R15,R15                                                  50250043
**       BZ    S80A                                                     50260043
         EX 0,*                     <-- CAUSES S0C3                     50270043
PUT2     PUT   SYSUT2               <-- CAUSES D37-04                   50280043
*MVI SYSUT2+40,255                                                      50290040
*EX 0,*                                                                 50300039
         B     PUT2                 <-- CAUSES D37-04                   50310000
STEPLIB  DCB   DSORG=PO,MACRF=R,DDNAME=STEPLIB                          50320000
SYSLIN   DCB   DSORG=PS,MACRF=GL,DDNAME=SYSLIN,DCBE=SYSLINX             50330053
SYSLINX  DCBE                                                           50340053
ACB1     ACB   DDNAME=VSAMDD,MACRF=(KEY,SEQ,OUT),STRNO=1                50350039
RPL1     RPL   ACB=ACB1,OPTCD=KEY,AREA=WK256,AREALEN=256,RECLEN=100     50360039
SYSPRINT DCB   DSORG=PS,MACRF=PL,DDNAME=SYSPRINT,RECFM=FBA,LRECL=121    50370053
SYSPUNCH DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPUNCH,RECFM=F,LRECL=80       50380053
SYSUT2   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSUT2,RECFM=FB,LRECL=80        50390030
DISKSUL  DCB   DSORG=PS,MACRF=(GL,PM),DDNAME=DISKSUL,RECFM=VB,LRECL=80  50400041
LINE121  DC    CL121' '                                                 50410053
WK256    DS    256X                                                     50420000
         YREGS                                                          50430000
         END                                                            50440000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  50450000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)                                    50460041
//SYSPRINT DD SYSOUT=*                                                  50470000
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),BLKSIZE=3200          50480053
//*                                                                     50490000
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  50500000
//STEPLIB  DD DSN=GILBERT.FILE183.LOAD,DISP=SHR                         50510057
//SYSLIN   DD DSN=*.HLASM2.SYSLIN,DISP=(OLD,PASS)                       50520052
//$DMY     DD DUMMY                                                     50530016
//SYSUT2   DD UNIT=SYSALLDA,SPACE=(TRK,(1,,1)),                         50540054
// DSN=&&T2345678(M2345678)                                             50550039
//DISKSUL  DD UNIT=VIO,SPACE=(CYL,1),LABEL=(,SUL),BLKSIZE=32760         50560041
//*                                                                     50570000
//VSAMDD   DD UNIT=SYSALLDA,SPACE=(TRK,10),                             50580054
//**          AMP='STRNO=1',                                            50590039
//            STORCLAS=DEFAULT,                                         50600050
//            RECORG=KS,LRECL=100,KEYLEN=12                             50610028
//*                                                                     50620000
//SYSPRINT DD SYSOUT=*                                                  50630053
//SYSPUNCH DD SYSOUT=*                                                  50640053
//SYSIN    DD *                                                         50650028
3333333                                                                 50660028
//SYSDEBUG DD SYSOUT=*,OUTLIM=01111                                     50670000
//SYSUDUMP DD SYSOUT=*,OUTLIM=22222                                     50680043
