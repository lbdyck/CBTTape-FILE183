//GILBERTF JOB (ACCT#),FASTPATH,                                        00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=H,COND=(0,NE)                                       00040000
//HLASM EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF,         00050038
//*SYSPARM(STOP522),                                                    00060000
// BATCH),REGION=5M                                                     00080000
*PROCESS BATCH,USING(NOMAP,WARN(8))                                     00090000
*PROCESS FLAG(NOPAGE0)                 STACK/RACROUTE                   00100041
*********************************************************************** 00110000
*                                                                     * 00120000
* MODULE NAME = FASTPATH                                              * 00130000
*                                                                     * 00140000
* DESCRIPTIVE NAME = ISPF fast-path command processor                 * 00150000
*                                                                     * 00160000
* STATUS = R149                                                       * 00170048
*                                                                     * 00180000
* FUNCTION = This program allows the use of fast-path commands        * 00190014
*            without requiring customization of the ISPF              * 00200013
*            environment.  It provides two types of functions:        * 00210013
*                                                                     * 00220000
*            1. Initialization                                        * 00230013
*                                                                     * 00240000
*               a. add fast-path commands to the user's               * 00250013
*                  in-storage copy of ISPCMDS                         * 00260013
*               b. pre-load specific modules to enhance performance   * 00270013
*                  and allow access from a private LOAD library       * 00280013
*               c. issue STIMER to prevent S522 time-out abends       * 00290013
*                                                                     * 00300000
*            2. Processing                                            * 00310013
*                                                                     * 00320000
*               a. invoke EDIT, BROWSE, VIEW, WorkPlace and SDSF      * 00330013
*                  with the appropriate NEWAPPL parameter             * 00340013
*               b. store and retrieves parameters associated          * 00350013
*                  with user-specified tags                           * 00360013
*               c. retrieve a dsname under which the cursor           * 00370013
*                  is positionned                                     * 00380013
*                                                                     * 00390000
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  * 00400038
*                                                                     * 00410000
* Documentation = http://gsf-soft.com/Freeware/FASTPATH.shtml         * 00420040
*                                                                     * 00430040
* ENVIRONMENT = SEE BELOW                                             * 00440000
*                                                                     * 00450000
*    DEPENDENCIES: MVS/ESA 4.3 (or above)                             * 00460030
*                  TSO/E 2.4 (or above)                               * 00470033
*                  ISPF/PDF V3 (or above)                             * 00480013
*                  STRING macro R515                                  * 00490046
*                                                                     * 00500000
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               * 00510000
*                                                                     * 00520000
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      * 00530000
*                IBM HIGH LEVEL ASSEMBLER/MVS                         * 00540000
*                                                                     * 00550000
*    MODULE SIZE = 25K                                                * 00560046
*                                                                     * 00570000
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   * 00580012
*                 PROBLEM STATE, KEY 8                                * 00590000
*                 APF AUTHORIZATION: NONE                             * 00600000
*                                                                     * 00610000
* OPERATION = SEE BELOW                                               * 00620000
*                                                                     * 00630000
*   When it is invoked as a command, or without a parm, FASTPATH      * 00640001
*   adds (or replaces) fast path commands to the in-storage copy      * 00650001
*   of the ISPCMDS table.                                             * 00660001
*                                                                     * 00670000
*   When invoked as a program with a PARM, FASTPATH processes a       * 00680001
*   fast path command according to the parameters.                    * 00690001
*                                                                     * 00700000
* PARAMETERS = The parm field is used to pass parameters to the       * 00710001
*              program as a comma-delimited string.                   * 00720001
*                                                                     * 00730000
* RETURN-CODES = SEE BELOW                                            * 00740001
*                                                                     * 00750000
*          0                    OK                                    * 00760001
*          4                    Already Initialized                   * 00770001
*         16                    ISPF not active                       * 00780001
*                                                                     * 00790000
* CHANGE ACTIVITY                                                     * 00800001
*                                                                     * 00810000
*100 Initial release based on PGMEDBRO, DLPGM & CALLCMD           1992* 00820000
*101 Add STIMER function to prevent S522 abends                       * 00830001
*102 Use ISPZ000 message instead of ISRZ000                           * 00840002
*103 VPUT for EDBR0001 fails when EDBR0000 is created                 * 00850003
*104 Add variable for VIEW function of ISPF 4.1                       * 00860004
*105 Implement PRELOAD routine (from ISPTASK5)                        * 00870005
*106 Issue "ISPCMDS Updated" message                                  * 00880006
*107 Reorg initialisation phase                                       * 00890007
*108 Add support for Work-place shell (ISPF 4.2)                  1996* 00900008
*109 Fix addressability problem in PRELOAD routine                    * 00910009
*110 Extract dsn under cursor when a ED/BR/VI/WP command              * 00920010
*    is entered without an option.                                    * 00930010
*111 If Zvprof='' THEN Zvprof=Prof                                    * 00940011
*112 Check for R1=>A(TLD) when invoked from ISPTASK                   * 00950012
*113 Simulate WP with %DSLIST in ISPF V3 or V4R1                      * 00960013
*    Do not issue STIMER if running with TIME=1440                    * 00970013
*114 Add MACLIB function to VIEW MACLIB/MODGEN member                 * 00980014
*115 FSHELP function (Full-screen HELP)                               * 00990015
*116 Name of builtin functions changed (E becomes EDIT)               * 01000016
*    New functions added: E V B (Direct Edit, View and Browse)        * 01010016
*117 FTINCL Function                                                  * 01020017
*    If cursor-driven BROWSE fails, invoke BR (the VSAM Browser)      * 01030017
*118 Replace FSHELP with TSOFS which is more generic                  * 01040018
*    Add CNTL and TIME functions                                      * 01050018
*119 Concatenate PVTMACS to MACLIB/MODGEN if it is cataloged      1997* 01060019
*    Add SYSID function                                               * 01070019
*120 CRASH/LOGON/LOGOFF functions                                     * 01080020
*    Add D function (delete member)                                   * 01090020
*121 Make sure I've been link'd with the RENT attribute               * 01100021
*    Use external copy of ISPLINK module                              * 01110021
*122 Use new CRASH function for LOGON & LOGOFF                        * 01120022
*123 PARMLIB function for OS/390 R2                                   * 01130023
*    Prevent MSGIKJ56400A when CRASH LOGON or CRASH LOGOFF            * 01140023
*    is issued and a CLIST or EXEC command is active                  * 01150023
*    Add NOENQ option to DELMBR function                              * 01160023
*124 Prevent S0C9 in dsname extraction routine when TLDCLSWD=0        * 01170024
*125 Support ZEDITWS and ZVIEWWS variables                            * 01180025
*126 Add PROFILE option on WorkPlace VPUT                             * 01190026
*127 New function: EXECPGM                                            * 01200027
*128 Reset ECTIOWA when CRASH is entered with no operand          1998* 01210028
*129 Rewrite dsname extraction routine.                               * 01220029
*    Use VIEW if user doesn't have update auth to SYS1.PARMLIB        * 01230029
*130 Add CALENDAR function                                            * 01240030
*    Add CONNECT function to start/display connection to WS           * 01250030
*    Add LOAD and UNLOAD functions                                    * 01260030
*    Add NETSTAT function (full-screen NETSTAT)                       * 01270030
*    Add REXXTRY function                                             * 01280030
*    Add VERASE function to delete a variable from profile            * 01290030
*    Add ZDEL function to display/set ZDEL variable.                  * 01300030
*    Enhanced ED/VI/BR/WP functions:                                  * 01310030
*         Data Set Reference List                                     * 01320030
*         Work-station files                                          * 01330030
*         Compatibility with CNAEBROW/CNAEEDIT  *                     * 01340030
*    Delete duplicate entries from SITE and USER command tables       * 01350030
*    Change SYSID function to use ZDEL instead of ";".                * 01360030
*    CRASH * issues command from ZTSICMD                              * 01370030
*    STOP522 code only generated if assembled with SYSPARM(STOP522)   * 01380030
*    FASTPATH can now be link-edited under a different name           * 01390030
*131 Add OPENCMDS and FSPASTE functions                           1999* 01400031
*    LOAD function supports LIBDEF ISPLLIB                            * 01410031
*    Enhance TSOFS and UNLOAD functions                               * 01420031
*    Enhance CRASH: =pli, close ISRxLIST tables                       * 01430031
*    Add LC command                                                   * 01440031
*    Issue RACROUTE to prevent S913 abends in BR/ED/VI                * 01450031
*    Use VARLISTW for WP variables to prevent corruption              * 01460031
*    Restructure the code to work around addressability problems      * 01470031
*132 Check for * and % in EDBR                                        * 01480032
*    Add LIBRARY(ISPSPROF) to TBCLOSE service                         * 01490032
*133 Reorganize initialization code and add SELECT function           * 01500033
*    Detect migrated data sets and allow user to prevent HRECALL      * 01510033
*    Replace relative generation number with .G*V%%                   * 01520033
*    Allow volser in direct ED/BR/VI/WP: ED ISP.SISPPENU/OS39R7       * 01530033
*    Do not prefix &ZPREFIX if the unqualified name is cataloged      * 01540033
*    Add profile on MAClib/PARMLib functions                          * 01550033
*    Add VIEW/EDIT option to PARMLib function                         * 01560033
*    Fix BEGIN_PROC for HLASM R3 (requires STRING 506 or 404)         * 01570033
*134 A + sign at the end of a command starts a new logical screen     * 01580034
*    Prompt user before creating a new Tag entry                      * 01590034
*    Do not issue RACROUTE with ACF2 or Top-Secret                2000* 01600034
*    Remove LOCTR option in STRING GENERATE instruction               * 01610034
*    Replace LINK EP=IEANTxx with BALR to prevent S406-04             * 01620034
*    Init ZREFTYPE and ZWRKVOL variables to X'40'                     * 01630034
*    Drop trailing blank lines in FSPASTE                             * 01640034
*135 Use PGM(ISRDSLST) PARM(PL1 REFLIST) instead of RL1 in ISPF 4.8   * 01650035
*    Check for migrated data sets in all situations                   * 01660035
*    Support ALIAS names on non SMS-managed volumes                   * 01670035
*136 Blank out (*) at end of dsname (B/E/V)                           * 01680036
*    Do not call BR if dsname(member) is too long                     * 01690037
*    Issue error message after BROWSE failure                         * 01700037
*137 Minor technical changes                                      2001* 01710037
*138 FSPASTE functions invokes VIIF instead of EDIF on OS/390 R10     * 01720038
*    Strip off ALIAS--- in LISTCAT function                           * 01730038
*    Expand WSA address to 64 character                               * 01740038
*    Change PROFILE(STD) to PROFILE(CNTL) in CNTL function            * 01750038
*    Check for dsname when EDBR0000 doesn't exist                     * 01760038
*139 Skip ADDCMDS/SETUP when invoked via CALL with PARM=CRASH     2005* 01770039
*140 Support ALIAS Entries when calling BR                            * 01780040
*141 Fix NETSTAT for CS IP stack in OS/390 R5 and above               * 01790041
*142 SYMBOLIC/RESOLVED in LISTCAT                                 2008* 01800042
*    PGSPC in LISTCAT                                                 * 01810042
*143 Add TSOCMD function to invoke LINKMAP via LM                     * 01820043
*144 CNTL command supports ISPF Profile Sharing     (Al Ferguson)     * 01830044
*    PROCLib and JCLLib functions                   (Al Ferguson)     * 01840044
*145 Make TRUNC=0 a default value in ISPCMDS macro                2009* 01850045
*    Pre-load more programs from FILE183.LOAD                         * 01860045
*146 TSOFS - Re-display ISRTSO panel when null cmd is entered         * 01870046
*    Add FSHelp, SHOWDasd & SHOWJpaq commands in ISPCMDS table        * 01880046
*147 Add FSPRint in ISPCMDS table                                     * 01890047
*148 Add Timezone: E.02.00.00 (from CVTTZ/CLOCKxx)                    * 01900048
*    Do not TBCLOSE ISRJLIST/ISRRLIST in ISPF V5                      * 01910048
*149 DSInfo/ISRUDA+ISRDDNPI                                       2010* 01920049
*    Add #@ to CURSOR table                                           * 01930049
*    FSTSO replaces TSOFS                                             * 01940049
*    Change LC (LCAT) command to LCA to avoid conflict with PDS       * 01941050
*    command's "LC" subcommand                                        * 01942050
*                                                                     * 01950000
&REL     SETC  'R149'                                                 * 01960049
*********************************************************************** 01970000
         PUNCH ' ORDER FASTPATH(P),JUL2DAYS,@STRING,ISPCMDS,PRELOAD'    01980034
FASTPATH CSECT                                                          01990000
FASTPATH RMODE ANY                                                      02000000
&DATE    SETC  '&SYSDATE'(7,2)'-'.'&SYSDATE'(1,2)'-'.'&SYSDATE'(4,2)    02010043
         SAVE (14,12),,'GSF Utilities - FASTPATH &REL 20&DATE &SYSTIME' 02020043
         LR    R11,R15                 1st base reg                     02030000
         USING FASTPATH,R11                                             02040000
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA   02050001
         GETMAIN R,LV=(0)              ALLOCATE DYNAMIC STORAGE         02060001
         ST    R13,4(,R1)                                               02070000
         ST    R1,8(,R13)                                               02080000
         LA    R14,72(,R1)             clear working storage            02090000
         LA    R15,DYNAML-72           clear working storage            02100000
         SLR   R1,R1                   clear working storage            02110000
         MVCL  R14,R0                  clear working storage            02120000
         LM    R13,R1,8(R13)           SET R13, RELOAD R14-R1           02130000
         LR    R9,R1                   save PARM/CPPL address           02140000
         USING DYNAM,R13                                                02150000
         ST    R13,DYNAM               PARM FOR READ ROUTINE            02160031
         MVI   BLANKS,C' '                                              02170000
         MVC   BLANKS+1(L'BLANKS-1),BLANKS                              02180000
         MVC   OPT,BLANKS                                               02190000
*---------------------------------------------------------------------* 02200031
*                                                                     * 02210031
*        Retrieve the address of the LIBDEF ISPLLIB DCB               * 02220031
*                                                                     * 02230031
*---------------------------------------------------------------------* 02240031
FINDDCB  L     R4,PSATOLD-PSA(0,0)     Current TCB                      02250031
         USING TCB,R4                                                   02260031
         L     R1,TCBRBP               current PRB                      02270031
         L     R2,RBGRS15-RBBASIC(,R1) SVC 6 PARM LIST                  02280031
         MVC   LLIBDCB+1(3),5(R2)      addr of LIBDEF DCB or zero       02290033
*---------------------------------------------------------------------* 02300030
*                                                                     * 02310030
*        Locate/validate my CDE on the JPAQ                           * 02320031
*                                                                     * 02330030
*---------------------------------------------------------------------* 02340030
FINDCDE  L     R5,TCBJSTCB             job-step TCB                     02350031
         L     R5,TCBJPQ-TCB(,R5)      first CDE on JPAQ                02360031
         USING CDENTRY,R5                                               02370031
*loop                                                                   02380031
FINDCDE2 CL    R11,CDENTPT             IS IT MY OWN ENTRY?              02390031
         BE    FINDCDE5                YES, EXIT                        02400031
         ICM   R5,B'1111',CDCHAIN      NEXT CDE                         02410031
         BNZ   FINDCDE2                CHECK NEXT CDE                   02420031
*endloop                                                                02430031
         MVC   OWNNAME,=C'*UNKNOWN'    own name not found               02440031
         B     INIT_ERROR              error                            02450031
FINDCDE5 MVC   OWNNAME,CDNAME          save own name                    02460031
         ST    R5,CDE@                 save CDE address                 02470034
         TM    CDATTR,CDREN            RENT module?                     02480031
         BNO   INIT_ERROR              no, error                        02490031
         DROP  R5                      CDENTRY                          02500031
*---------------------------------------------------------------------* 02510030
*                                                                     * 02520030
*        Locate/validate ISPF control blocks: TLD, TSI                * 02530030
*                                                                     * 02540030
*---------------------------------------------------------------------* 02550030
*loop                                                                   02560030
FINDTLD2 L     R1,TCBFSA               first save area                  02570030
         CLI   24(R1),00               24-bit address?                  02580031
         BNE   FINDTLD3                no, ignore                       02590031
         L     R1,24(,R1)              R1 SLOT (ADDR OF TLD PTR)        02600030
         CLI   0(R1),00                24-bit address?                  02610031
         BNE   FINDTLD3                no, ignore                       02620031
         L     R5,0(,R1)               R5 -> TLD                        02630030
         USING TLD,R5                                                   02640030
         CLC   =C'TLD',TLDTBLID        is this the TLD?                 02650030
         BE    FINDTLD5                yes, exit loop                   02660030
FINDTLD3 L     R4,TCBOTC               previous TCB (ISPTASK)           02670031
         CL    R4,TCBJSTCB             am I lost?                       02680030
         BNE   FINDTLD2                no, keep on going                02690030
*endloop                                                                02700030
         B     INIT_ERROR              error                            02710031
FINDTLD5 EQU   *                                                        02720030
         ST    R5,TLD@                 save TLD address                 02730030
         L     R4,TLDTSIP              R4 -> TSI                        02740030
         USING TSI,R4                                                   02750030
         CLC   =C'ISPTSI',TSITBLID     am I lost?                       02760030
         BNE   INIT_ERROR              yes, error                       02770031
         ST    R4,TSI@                 save TSI address                 02780030
         PACK  ISPFVM,TSIRMZ(1)        4.2 -> X'4F'                     02790030
         MVN   ISPFVM,TSIRMZ+2         4.2 -> X'42'                     02800030
*                                                                       02810000
*        Retrieve the current command from the TLD.  The last           02820034
*        character of the cmd is checked for a + sign later on.         02830034
*                                                                       02840000
         L     R6,TLD+092              point at the last command        02850034
         LA    R7,008(,R6)             start of the command             02860034
         ICM   R8,B'1111',004(R6)      length of the command            02870034
         BZ    FINDTLD8                no command, exit                 02880034
         ALR   R8,R7                   end of command                   02910034
         CLI   0(R8),C' '              find last non-blank character    02920034
         BNE   *+8                     find last non-blank character    02930034
         BCT   R8,*-8                  find last non-blank character    02940034
         STM   R7,R8,CMD@              save addr, end-addr              02970034
*                                                                       02980034
*        Extract the name of the command and save into CMDNAME          02990034
*                                                                       03000034
         LA    R0,L'CMDNAME            loop counter                     03010034
         LR    R1,R7                   start of command                 03020034
         CLI   0(R1),C' '              end of command name?             03030034
         BE    FINDTLD7                yes, exit                        03040034
         LA    R1,1(,R1)               bump index                       03050034
         BCT   R0,*-12                 next character                   03060034
FINDTLD7 EQU   *                                                        03070034
         STRING ((R7),(R1)),INTO=CMDNAME save the cmd name              03080034
FINDTLD8 EQU   *                                                        03090034
         DROP  R4,R5                   TLD,TSI                          03100030
*********************************************************************** 03110000
*                                                                     * 03120000
*        INITIALISATION                                               * 03130007
*                                                                     * 03140000
*        1. invoked from ISPTASK with R1=>A(TLD): perform SETUP       * 03150012
*           (it's too early for ADDCMDS)                              * 03160033
*        2. invoked as a Command processor (R1 points to a CPPL):     * 03170007
*           perform SETUP then re-invoke myself as a program.         * 03180007
*        3. invoked as a program with PARM='' via the CALL command:   * 03190033
*           add commands to ISPCMDS                                   * 03200033
*        4. invoked as a program with a non-null parm:                * 03210007
*           process the requested function                            * 03220007
*                                                                     * 03230000
*********************************************************************** 03240000
INIT00   EQU   *                                                        03250030
         L     R1,0(,R9)               point at PARM/CBUF/TLD           03260030
         CLC   =C'TLD',0(R1)           invoked from ISPTASK4?           03270033
         BE    INIT20                  yes, perform set-up              03280033
*                                                                       03290000
*        ISPEXEC CONTROL ERRORS RETURN                                  03300033
*                                                                       03310000
         LA    R1,=A($CONTROL,$ERRORS,$RETURN+VL)                       03320033
         LINK  SF=(E,ISPLINK$)         CONTROL ERRORS RETURN            03330033
         LTR   R7,R15                  ISPF active?                     03340033
         BNZ   GOBACK                  no, exit                         03350033
*                                                                       03360000
         L     R1,PSATOLD-PSA(0,0)     Current TCB                      03370030
         CLC   TCBFSA-TCB(,R1),4(R13)  invoked via CALL or as a CP?     03380030
         BNE   INIT30                  no, continue                     03390030
         ICM   R1,B'1111',0(R9)        invoked via CALL?                03400039
         BNM   INIT15                  no, continue                     03410039
         ICM   R0,B'0011',0(R1)        PARM='' ?                        03420039
         BZ    INIT15                  yes, continue                    03430039
         CLC   =C'CRASH ',2(R1)        PARM='CRASH ?                    03440039
         BE    INIT30                  yes, skip addcmds/setup          03450039
INIT15   EQU   *                                                        03460039
         BAL   R14,ADDCMDS          <- add commands to ISPCMDS          03470033
*                                                                       03480000
INIT20   EQU   *                                                        03490033
         BAL   R14,SETUP00          <- SETUP (URP)                      03500033
         SLR   R7,R7                   rc=0                             03510033
         B     GOBACK                  exit with rc=0                   03520033
*                                                                       03530000
INIT_ERROR EQU *                                                        03540031
         STRING 'Module ',(OWNNAME,,T),' failed initialization;',      X03550031
               ' CDE=',(CDE@+1,3,X),' TLD=',(TLD@+1,3,X),              X03560034
               ' TSI=',(TSI@+1,3,X),INTO=LONGMSG                        03570034
         TPUT  LONGMSG,(R15)           issue error message              03580031
         LA    R7,16                   rc=16                            03590031
         B     GOBACK                  exit with rc=16                  03600031
*                                                                       03610000
*        Force a PAGEIN of the FASTPATH module                          03620030
*                                                                       03630000
INIT30   L     R7,=V(ISPCMDS)          first table entry                03640031
         PGSER R,LOAD,A=(R11),EA=(R7),ECB=0                             03650018
*                                                                       03660000
         MACRO                                                    macro 03670000
&NAME    ISPLINK &OPRNDS,&ERRET=                                  macro 03680000
&NAME    LINK  SF=(E,ISPLINK$),PARAM=&OPRNDS,MF=(E,PARMLIST),VL=1 macro 03690030
         AIF   (T'&ERRET EQ 'O').MEND                             macro 03700000
         LTR   R15,R15                 Any error?                       03710000
         BNZ   &ERRET                  yes, jump                        03720000
.MEND    MEND                                                     macro 03730000
*---------------------------------------------------------------------* 03740030
*                                                                     * 03750030
*        Retrieve ISPF variables                                      * 03760030
*                                                                     * 03770030
*---------------------------------------------------------------------* 03780030
INIT40   LA    R14,L'ZENVIR            max length                       03790030
         LA    R15,L'ZAPPLID           max length                       03800030
         LA    R0,L'ZUSER              max length                       03810030
         LA    R1,L'ZPREFIX            max length                       03820030
         LA    R2,L'ZSCREEN            max length                       03830030
         LA    R3,L'ZDEL               max length                       03840030
         LA    R4,L'ZSPLIT             max length                       03850030
         LA    R5,L'ZWSCON             max length                       03860030
         STM   R14,R5,TENWORDS         length array                     03870030
&VARS    SETC  'ZENVIR ZAPPLID ZUSER ZPREFIX ZSCREEN'                   03880030
&VARS    SETC  '&VARS ZDEL ZSPLIT ZWSCON'                               03890030
         ISPLINK ($VCOPY,=C'(&VARS)',TENWORDS,ZENVIR,$MOVE)             03900030
         MVC   NEWAPPL,=C'ISR '        new appl (default)               03910030
         MVC   NEWPGM,OWNNAME          NEW PROGRAM                      03920033
*                                                                       03930000
*        Bump my own use count if I haven't been already                03940033
*        made resident at the URP level.                                03950033
*                                                                       03960000
         L     R5,CDE@                 own CDE                          03970033
         LA    R0,1                    R0=1                             03980033
         CH    R0,CDUSE-CDENTRY(,R5)   own CDUSE=1 ?                    03990033
         BNE   INIT50                  no, jump                         04000034
         LOAD  EPLOC=OWNNAME           bump my use count                04010033
         MVC   OWNNAME2,OWNNAME        save OWNNAME for UNLOAD function 04020033
*---------------------------------------------------------------------* 04030000
*                                                                     * 04040000
*        I've been invoked as a program via the SELECT service.       * 04050033
*        The value of ZAPPLID doesn't matter at this point.           * 04060033
*                                                                     * 04070000
*        If PARM='', change to PARM=SELECT to perform initialization. * 04080033
*                                                                     * 04090000
*---------------------------------------------------------------------* 04100000
INIT50   L     R3,0(,R9)               point at parm                    04110030
         LH    R5,0(,R3)               parm length                      04120000
         LTR   R5,R5                   do we have a parm?               04130030
         BP    INIT60                  yes, jump                        04140031
         BAL   R3,INIT55               branch around constant           04150033
         DC    Y(6),C'SELECT'          Simulate PARM(SELECT)            04160033
INIT55   LH    R5,0(,R3)               parm length                      04170033
*---------------------------------------------------------------------* 04180031
*                                                                     * 04190031
*        Parse the parm                                               * 04200031
*                                                                     * 04210031
*              Input:   PARM='EDIT,abcd,efgh,ijkl'                    * 04220031
*                                                                     * 04230031
*              output:  FUNCTION='EDIT '                              * 04240031
*                       OPT='abcd,efgh,ijkl'                          * 04250031
*                       OPT8='ABCD,EFG'                               * 04260031
*                                                                     * 04270031
*---------------------------------------------------------------------* 04280031
INIT60   LA    R4,2(,R3)               parm address                     04290031
*loop                                                                   04300031
INIT61   CLI   0(R4),C','              end of function?                 04310031
         BE    INIT62                  yes, leave                       04320031
         CLI   0(R4),C' '              end of function?                 04330033
         BE    INIT62                  yes, leave                       04340033
         LA    R4,1(,R4)               bump ptr                         04350031
         BCT   R5,INIT61               keep loopin                      04360031
*endloop                                                                04370031
INIT62   STRING (2(R3),(R4)),INTO=FUNCTION                              04380031
         OC    FUNCTION,BLANKS         Convert to upper-case            04390031
         LTR   R5,R5                   any options?                     04400031
         BZ    INIT63                  no, jump                         04410031
         BCTR  R5,0                    yes, subtract length of comma    04420031
         LA    R4,1(,R4)               skip comma                       04430031
INIT63   ST    R4,OPTADDR              save address                     04440031
         ST    R5,OPTLEN               save length                      04450031
         STRING ((R4),(R5)),INTO=OPT   save options                     04460031
         MVC   OPT2,OPT                save options                     04470031
         MVC   OPT8,OPT                Save first 8 bytes               04480031
         OC    OPT8,BLANKS             Convert to upper-case            04490031
*---------------------------------------------------------------------* 04500030
*                                                                     * 04510000
*        Invoke function processor                                    * 04520030
*                                                                     * 04530000
*---------------------------------------------------------------------* 04540030
         MACRO                                                          04550034
        $TABLE &KW,&ADDR,&PLUS                                          04560034
         DC    AL2(&ADDR-*),CL5'&KW',CL1'&PLUS '                        04570034
         MEND                                                           04580034
         BAL   R2,SELFUNC2             branch around table              04590034
        $TABLE B,EDBRVIWP              Direct Browse                    04600034
        $TABLE BROWSE,EDBRVIWP,%       Builtin: Browse                  04610034
        $TABLE CALENDAR,CALENDAR       Display Calendar                 04620034
        $TABLE CNTL,CNTL,+             CNTL,0                           04630034
        $TABLE WSCON,CONNECT           CONNECT to WorkStation           04640034
        $TABLE CRASH,CRASH             CRASH/LOGON/LOGOFF               04650034
        $TABLE D,DELMBR                Delete Member                    04660034
        $TABLE DSINFO,DSINFO,+         Data Set Info                    04670049
        $TABLE E,EDBRVIWP              Direct Edit                      04680034
        $TABLE EDIT,EDBRVIWP,%         Builtin: Edit                    04690034
        $TABLE EXECPGM,EXECPGM         Exec pgm from link-list          04700034
        $TABLE FSPASTE,FSPASTE,+       Full-Screen PASTE                04710034
        $TABLE FSTSO,FSTSO,%           Full-screen TSO                  04720049
        $TABLE FTINCL,FTINCL           FTINCL,&skel,&panel              04730034
        $TABLE ICS,ICS,+               ISPF Command Shell               04740034
        $TABLE LOAD,LOAD00,+           Preload a module                 04750034
        $TABLE MACLIB,MACLIB,+         MACLIB                           04760034
        $TABLE OPENCMDS,OPENCMDS       OPENCMDS                         04770034
        $TABLE NETSTAT,NETSTAT,+       NETSTAT                          04780034
        $TABLE SELECT,SELECT           Start Initial Command            04790034
        $TABLE PARMLIB,PARMLIB,+       PARMLIB                          04800034
        $TABLE PROCLIB,PROCLIB,+       PROCLIB                          04810044
        $TABLE REXXTRY,REXXTRY         REXXTRY                          04820034
        $TABLE SDSF,SDSF,+             SDSF                             04830034
        $TABLE SYSID,SYSID,+           SYSID                            04840034
        $TABLE TIME,TIME,+             TIME                             04850034
        $TABLE TSOCMD,FSTSO,%          TSO Command (Alias)              04860049
        $TABLE TSOFS,FSTSO,%           Full-screen TSO (Alias)          04870049
        $TABLE UNLOAD,UNLOAD00,+       Unload a module                  04880034
        $TABLE UTIL,UTIL,+             PDF Utilities                    04890034
        $TABLE V,EDBRVIWP              Direct View                      04900034
        $TABLE VERASE,VERASE,+         VERASE                           04910034
        $TABLE VIEW,EDBRVIWP,%         Builtin: View                    04920034
        $TABLE WP,EDBRVIWP,%           Builtin: Work-place              04930034
        $TABLE ZDEL,ZDELFUNC,+         ZDEL                             04940034
         DC    X'FF',0Y(0)                                              04950018
*LOOP                                                                   04960016
SELFUNC2 CLC   FUNCTION(5),2(R2)       SAME FUNCTION?                   04970034
         BE    SELFUNC4                YES, EXIT LOOP                   04980031
         LA    R2,2+5+1(,R2)           NEXT TYPE                        04990034
         CLI   0(R2),X'FF'             END OF TABLE?                    05000034
         BNE   SELFUNC2                NOT YET                          05010031
*ENDLOOP                                                                05020016
         STRING 'Unsupported Function',INTO=SHORTMSG                    05030031
         STRING 'FASTPATH release &REL does not support the ',         X05040031
               (FUNCTION,,T),' function.',                             X05050031
               INTO=LONGMSG                                             05060031
         MVI   ALARM,C'Y'              error, beep.                     05070031
         BAL   R14,SETMSG           <- send message                     05080031
         LA    R7,12                   rc=12                            05090031
         B     GOBACK                  unknown function, exit           05100031
*                                                                       05110000
*        Process new-screen option                                      05120034
*                                                                       05130000
SELFUNC4 LM    R7,R8,CMD@              cmd addr, end-addr               05140034
         CLI   0(R8),C'+'              user requested new screen?       05150034
         BNE   SELFUNC8                no, go execute function          05160034
         MVI   PLUSSIGN,C'+'           tell EDBRVIWP and FSTSO          05170034
         CLI   2+5(R2),C'+'            new screen allowed?              05180034
         BE    NEWSCREEN               yes, re-issue the command        05190034
         CLI   2+5(R2),C'%'            new screen allowed?              05200034
         BNE   SELFUNC8                no, go execute function          05210034
*                                                                       05220000
*        Blank out the last + sign for EDBRVIWP                         05230034
*                                                                       05240000
         L     R1,OPTLEN               L'OPT2                           05250034
         LA    R1,OPT2-1(R1)           last char                        05260034
         CLI   0(R1),C'+'              blank out last + sign            05270034
         BE    *+8                     blank out last + sign            05280034
         BCT   R1,*-8                  blank out last + sign            05290034
         MVI   0(R1),C' '              blank out last + sign            05300034
*                                                                       05310000
*        Pass control to functional routine                             05320034
*                                                                       05330000
SELFUNC8 LR    R15,R2                  Pass address of table entry      05340034
         AH    R15,0(,R15)             Add offset to functional rtne    05350034
         BALR  R14,R15              <- EXECUTE FUNCTION                 05360031
         B     *+4(R1)                 take return action based on R1   05370031
         B     XCTL00                  r1=0: invoke ISPF service        05380031
         B     EXIT90                  r1=4: exit with rc=(15)          05390031
         B     APPL_ISR                r1=8: switch to APPL=ISR         05400031
         B     XCTL30                  r1=12: other ISPF service        05410033
         B     NEWSCREEN               r1=16: re-issue the command      05420034
*********************************************************************** 05430030
*                                                                     * 05440000
*        Function=SDSF                                                * 05450018
*                                                                     * 05460000
*********************************************************************** 05470015
SDSF     MVC   NEWAPPL,=C'ISF '        NEW APPL                         05480015
         MVC   NEWPGM,=CL8'ISFISP'     NEW PROGRAM                      05490015
         B     XCTL00                  INVOKE ISPF SERVICE              05500015
*********************************************************************** 05510015
*                                                                     * 05520000
*        Function=UTIL (PDF Utilities)                                * 05530018
*                                                                     * 05540000
*********************************************************************** 05550015
UTIL     MVC   NEWPANEL,=CL8'ISRUTIL'  NEW PANEL                        05560015
         B     XCTL00                  INVOKE ISPF SERVICE              05570015
*                                                                       05580000
BACKLVL  STRING 'Not Supported',INTO=SHORTMSG                           05590031
         STRING 'Function ',(FUNCTION,,T),                             X05600031
               ' is not supported in this environment.',               X05610031
               INTO=LONGMSG                                             05620031
         MVI   ALARM,C'Y'              error, beep.                     05630031
         BAL   R14,SETMSG           <- send message                     05640031
         LR    R7,R15                  pass rc=8                        05650031
         B     GOBACK                  quit with RC=8                   05660031
*                                                                       05670000
ISPG054  ISPLINK ($SETMSG,=C'ISPG054 ') Command Parm is missing         05680031
         LA    R7,8                    pass rc=8                        05690031
         B     GOBACK                                                   05700031
*********************************************************************** 05710000
*                                                                     * 05720000
*        Goback to ISPF                                               * 05730031
*                                                                     * 05740000
*********************************************************************** 05750000
EXIT90   LTR   R7,R15                  DIALOG'S RETURN CODE             05760010
         BZ    GOBACK                  OK, EXIT                         05770031
         LA    R0,L'ZERRMSG            max length                       05780017
         ST    R0,DWD                  max length                       05790004
         ISPLINK ($VCOPY,$ZERRMSG,DWD,ZERRMSG,$MOVE),ERRET=GOBACK       05800031
         ISPLINK ($SETMSG,ZERRMSG)                                      05810000
*                                                                       05820000
GOBACK   LR    R1,R13                  Work area                        05830031
         L     R13,4(,R13)                                              05840000
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA   05850001
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE             05860021
         LR    R15,R7                  Return code                      05870000
         RETURN (14,12),RC=(15)                                         05880000
*********************************************************************** 05890033
*                                                                     * 05900033
*        PARM='SELECT <service>'                                      * 05910033
*                                                                     * 05920033
*        The SELECT function allows FASTPATH to be invoked at ISPF    * 05930033
*        start to perform initialization tasks such as ADDCMDS and    * 05940033
*        PRELOAD; SELECT then starts the main ISPF service,           * 05950033
*        typically a primary option menu such as ISR@PRIM.            * 05960033
*        The main ISPF service is specified as follows:               * 05970033
*                                                                     * 05980033
*        ISPF PGM(FASTPATH) PARM(SELECT PANEL(APRIOPT) NEWAPPL(MVS))  * 05990033
*                                                                     * 06000033
*        If the main ISPF service is not specified, FASTPATH          * 06010033
*        uses the following default:                                  * 06020033
*                                                                     * 06030033
*              SELECT PANEL(ISR@PRIM) NEWAPPL(ISR)                    * 06040033
*                                                                     * 06050033
*********************************************************************** 06060033
SELECT   CLC   =C'1 ',ZSCREEN          FIRST SCREEN?                    06070033
         BNE   SELECT2                 no, jump                         06080033
         BAL   R14,SETUP00          <- perform setup functions          06090033
         BAL   R14,ADDCMDS          <- add commands to ISPCMDS          06100033
SELECT2  EQU   *                                                        06110033
         ICM   R0,B'1111',OPTLEN       any parm specified?              06120033
         BZ    SELECT7                 no, use default panel            06130033
         STRING $SELECT,(OPT,(R0)),INTO=COMMAND                         06140033
         B     XCTL30                  user specified command           06150033
SELECT7  EQU   *                                                        06160033
         MVC   NEWPANEL,=C'ISR@PRIM'   default panel                    06170033
         B     XCTL00                                                   06180034
*********************************************************************** 06190034
*                                                                     * 06200034
*        Start New Screen                                             * 06210034
*                                                                     * 06220034
*********************************************************************** 06230034
NEWSCREEN LM   R7,R8,CMD@              cmd addr, end-addr               06240034
         STRING ((R7),(R8)),INTO=OPT   copy command, drop trailing +    06250034
         ST    R15,OPTLEN              length                           06260034
         MVC   NEWPGM,=CL8'ISPSTRT'    SPLIT NEW                        06270034
*********************************************************************** 06280000
*                                                                     * 06290000
*        Invoke a program, panel or command via the SELECT service.   * 06300000
*                                                                     * 06310000
*********************************************************************** 06320000
XCTL00   STRING 'SELECT PANEL(',(NEWPANEL,,T),                         X06330033
               ') OPT(',(OPT,,T),')',                                  X06340000
               INTO=COMMAND                                             06350006
         CLI   NEWPANEL,0              SELECT PANEL ?                   06360000
         BNE   XCTL20                  YES, JUMP                        06370000
         STRING 'SELECT CMD(',(NEWCMD,,T),')',                         X06380033
               INTO=COMMAND                                             06390013
         CLI   NEWCMD,0                SELECT CMD ?                     06400013
         BNE   XCTL20                  YES, JUMP                        06410013
         STRING 'SELECT PGM(',(NEWPGM,,T),                             X06420033
               ') PARM(',(OPT,,T),')',                                 X06430000
               INTO=COMMAND                                             06440006
XCTL20   CLC   ZAPPLID,NEWAPPL         CURRENT APPLID OK?               06450000
         BE    XCTL30                  YES, JUMP                        06460000
         CLI   NEWAPPL,C' '            New APPLID OK?                   06470033
         BNE   XCTL27                  No, change it                    06480033
         B     XCTL30                  YES, Continue                    06490033
*                                                                       06500000
*        Re-invoke myself with NEWAPPL(ISR)                             06510033
*                                                                       06520000
APPL_ISR L     R3,0(,R9)               point at parm                    06530004
         LH    R5,0(,R3)               parm length                      06540004
         STRING 'SELECT PGM(',(OWNNAME,,T),                            X06550033
               ') PARM(',(2(R3),(R5),T),')',                           X06560033
               INTO=COMMAND                                             06570006
*                                                                       06580000
*        Switch APPLID                                                  06590033
*                                                                       06600000
XCTL27   STRING 'Applid Switched',INTO=SHORTMSG                         06610033
         STRING 'Applid switched from ',(ZAPPLID,,T),' to ',NEWAPPL,   X06620000
               INTO=LONGMSG                                             06630006
         BAL   R14,SETMSG           <- send message                     06640018
         STRING (COMMAND,,T),' NEWAPPL(',NEWAPPL,')',INTO=COMMAND       06650006
*---------------------------------------------------------------------* 06660033
*                                                                     * 06670000
*        XCTL TO ISPEXEC                                              * 06680000
*                                                                     * 06690000
*---------------------------------------------------------------------* 06700033
XCTL30   EQU   *                                                        06710033
         BAL   R14,XCTLGET          <- find XCTL Work Area              06720033
         LR    R8,R1                   A(XCTLWORK)                      06730033
         USING XCTLWORK,R8                                              06740033
         STRING (COMMAND,,T),INTO=XCTLCMD                               06770033
         ST    R15,XCTLLEN             STORE LENGTH OF COMMAND          06780000
         LA    R15,XCTLLEN             length of command                06790033
         LA    R0,XCTLCMD              text of command                  06800033
         STM   R15,R0,XCTLPARM         parm list for ISPEXEC            06810033
         OI    XCTLPARM+4,X'80'        parm list for ISPEXEC            06820033
         LR    R1,R13                  A(DYNAM)                         06850033
         L     R13,4(,R13)             caller's save area               06860033
         LA    R0,DYNAML               LENGTH OF DYNAMIC STORAGE AREA   06870033
         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC STORAGE             06880033
         LA    R1,XCTLPARM             parm list for ISPEXEC            06890033
         XCTL  (2,12),EPLOC=$ISPEXEC   pass control to ISPEXEC          06900033
         DROP  R8                      was XCTLWORK                     06910033
*---------------------------------------------------------------------* 06920031
*        ISPEXEC routine                                              * 06930031
*---------------------------------------------------------------------* 06940031
ISPEXEC  ST    R15,TOKEN               store length                     06950014
         LA    R15,TOKEN               length of command                06960014
         LA    R0,COMMAND              text of command                  06970014
         STM   R15,R0,PARMLIST         parm list for ISPEXEC            06980031
         OI    PARMLIST+4,X'80'        parm list for ISPEXEC            06990031
         LOAD  EPLOC=$ISPEXEC          V(ISPEXEC)                       07000033
         LR    R15,R0                  V(ISPEXEC)                       07010021
         LA    R1,PARMLIST             parm list for ISPEXEC            07020031
         BR    R15                     invoke ISPEXEC                   07030014
*---------------------------------------------------------------------* 07040031
*        JPASEARCH routine                                            * 07050031
*---------------------------------------------------------------------* 07060031
JPASEARCH BAKR R14,0                                                    07070017
         L     R3,CVTPTR(0,0)          point to CVT                     07080017
         USING CVTMAP,R3                                                07090017
         L     R4,PSATOLD-PSA(0,0)     Current TCB                      07100017
         USING TCB,R4                                                   07110017
         L     R4,TCBJSTCB             point to JS TCB                  07120017
         LA    R8,TCBJPQ               START OF CDE CHAIN               07130017
         LR    R9,R1                   Module name                      07140017
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE               07150017
         BALR  R14,R15              <- USES R0, R1, R8, R9, R11         07160017
         B     JPASCH9-*(,R14)     +0  FOUND, QUIT                      07170017
JPASCH8  LA    R15,4                   RC=4 (not found)                 07180017
         PR                                                             07190017
JPASCH9  SLR   R15,R15                 RC=0 (found)                     07200017
         PR                                                             07210017
         DROP  R3,R4                   CVT,TCB                          07220017
*********************************************************************** 07230000
         MACRO                                                    macro 07240030
&NAME    BEGIN_PROC &SAVE=BAKR,&LVL=,&OPT=,&APPL=                 macro 07250031
$LTORG   LOCTR                                                          07260030
&NAME2   SETC  '&NAME'                                            macro 07270031
         AIF   (T'&LVL EQ 'O').LVL9                               macro 07280031
&NAME2   CLI   ISPFVM,X'&LVL'          function supported in ISPF?      07290031
         BL    BACKLVL                 no, exit                         07300031
&NAME2   SETC  ''                                                 macro 07310031
.LVL9    ANOP                                                     macro 07320031
         AIF   ('&OPT' NE 'YES').OPT9                             macro 07330031
&NAME2   CLI   OPT,C' '                required parm present?           07340031
         BE    ISPG054                 no, exit                         07350031
&NAME2   SETC  ''                                                 macro 07360031
.OPT9    ANOP                                                     macro 07370031
         AIF   (T'&APPL EQ 'O').APPL9                             macro 07380031
&NAME2   CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 07390030
         BNE   APPL_ISR                no, switch applid                07400030
&NAME2   SETC  ''                                                 macro 07410031
.APPL9   ANOP                                                     macro 07420031
&NAME2   BAL   R15,$STRING2         <- =X'4AFF,0000,07FF'               07430033
         DC    Y(&NAME._START-*)                                        07440030
$FARRTNE LOCTR                                                          07450030
         DS    0D                                                       07460030
         AIF   ('&SAVE' EQ 'BAKR').BAKR                                 07470030
&NAME._START SAVE (14,12),,&NAME                                        07480030
         LR    R12,R15                                                  07490030
         USING &NAME._START,R12                                         07500030
         MEXIT                                                    macro 07510030
.BAKR    DC    CL8'&NAME'                                               07520030
&NAME._START BAKR R14,0                SAVE REGISTERS                   07530030
         LR    R12,R15                                                  07540030
         USING &NAME._START,R12                                         07550030
         MEND                                                     macro 07560030
*********************************************************************** 07570030
*                                                                     * 07580030
*        Function=CALENDAR (Display Status Area's Calendar)           * 07590030
*                                                                     * 07600030
*********************************************************************** 07610030
CALENDAR BEGIN_PROC LVL=41,APPL=ISR                                     07620031
         ISPLINK ($VREPLACE,=C'ZSAREAP ',=F'3',=C'CAL')                 07630030
         ISPLINK ($VPUT,=C'ZSAREAP ',$PROFILE)                          07640030
         MVC   NEWPGM,=CL8'ISPSAM'     Status Area program              07650030
         MVC   OPT(3),=C'POP'          PARM(POP)                        07660030
         LA    R1,0                    Execute command                  07670031
         PR                                                             07680031
*********************************************************************** 07690018
*                                                                     * 07700000
*        Function=CNTL (Edit SPFTEMPn)                                * 07710018
*                                                                     * 07720000
*********************************************************************** 07730018
CNTL     BEGIN_PROC APPL=ISR                                            07740031
         BAL   R14,PARSE3           <- parse options                    07750031
         CLI   PARM3,C' '              profile specified?               07760031
         BNE   CNTL2                   yes, jump                        07770018
         MVC   PARM3(4),=C'CNTL'       default profile                  07780031
CNTL2    LA    R0,L'ZTEMPN             LENGTH                           07790018
         ST    R0,DWD                  LENGTH                           07800018
         ISPLINK ($VCOPY,=C'ZTEMPN ',DWD,ZTEMPN,$MOVE)                  07810018
         CLC   =C'0 ',OPT              edit SPFTEMP0 ?                  07820018
         BNE   CNTL10                  no, jump                         07830018
         MVC   ZTEMPN,=C'ISPCTL0 '     ddname for SPFTEMP0.CNTL         07840018
         DEVTYPE ZTEMPN,DWD            check if DD is allocated         07850018
         LTR   R15,R15                 ISPCTL0 allocated?               07860018
         BZ    CNTL10                  yes, jump                        07870018
         LA    R0,L'ZMLPS              LENGTH                           07880044
         ST    R0,DWD                  LENGTH                           07890044
         ISPLINK ($VCOPY,=C'ZMLPS ',DWD,ZMLPS,$MOVE)                    07900044
         LTR   R15,R15                 ZMLPS supported ?                07910044
         BNZ   CNTL3                   no, jump                         07920044
         CLC   =C'YES',ZMLPS           ISPF Profile Sharing on?         07930044
         BNE   CNTL3                   no, jump                         07940044
         LA    R0,L'ZSEQ               LENGTH                           07950044
         ST    R0,DWD                  LENGTH                           07960044
         ISPLINK ($VCOPY,=C'ZSEQ ',DWD,ZSEQ,$MOVE)                      07970044
         STRING (ZUSER,,T),'.ISP',(ZSEQ,,T),'.SPFTEMP0.CNTL',          X07980044
               INTO=ZWRKDSN                                             07990044
         B     CNTL4                                                    08000044
CNTL3    EQU   *                                                        08010044
         STRING (ZUSER,,T),'.SPFTEMP0.CNTL',INTO=ZWRKDSN                08020018
CNTL4    EQU   *                                                        08030044
         STRING 'EDIT DATASET(''',(ZWRKDSN,,T),'''',                   X08040018
               ') PROFILE(',(PARM3,,T),')',                            X08050031
               INTO=COMMAND                                             08060018
         BAL   R14,ISPEXEC          <- execute EDIT command             08070018
         LR    R7,R15                  save return code                 08080018
         B     CNTL90                  exit                             08090018
CNTL10   EQU   *                                                        08100018
         STRING 'LMINIT DATAID(ID1) DDNAME(',ZTEMPN,') ENQ(SHRW)',     X08110018
               INTO=COMMAND                                             08120018
         BAL   R14,ISPEXEC          <- execute LMINIT command           08130018
         LTR   R15,R15                 COMMAND OK ?                     08140018
         BNZ   CNTL99                  NO, EXIT                         08150018
         LA    R0,L'DATAID             max length                       08160018
         ST    R0,DWD                  max length                       08170018
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=CNTL99        08180018
         STRING 'EDIT DATAID(',DATAID,                                 X08190018
               ') PROFILE(',(PARM3,,T),')',                            X08200031
               INTO=COMMAND                                             08210018
         BAL   R14,ISPEXEC          <- execute EDIT command             08220018
         LR    R7,R15                  save return code                 08230018
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND                08240018
         BAL   R14,ISPEXEC          <- execute LMFREE command           08250018
CNTL90   EQU   *                                                        08260018
         LTR   R15,R7                  data saved?                      08270018
         BNZ   CNTL99                  no, jump                         08280018
         STRING 'Data Set Saved',INTO=SHORTMSG                          08290018
         STRING 'Control Data Set Saved: ',ZTEMPN,INTO=LONGMSG          08300018
         BAL   R14,SETMSG           <- send message                     08310018
CNTL99   EQU   *                                                        08320018
         LA    R1,4                    Exit with rc=(15)                08330031
         PR                                                             08340031
*********************************************************************** 08350030
*                                                                     * 08360000
*        Function=CONNECT                                             * 08370030
*                                                                     * 08380000
*********************************************************************** 08390030
CONNECT  BEGIN_PROC LVL=42,APPL=ISR                                     08400031
         CLI   ZWSCON,C' '             already connected?               08410030
         BE    CONNECT5                no, jump                         08420030
         ISPLINK ($SETMSG,=C'ISPO908 ') Already Connected               08430030
CONNECT5 STRING 'SETTINGS',ZDEL,'GUIINIT',INTO=COMMAND                  08440030
         ST    R15,DWD                 store length                     08450019
         ISPLINK ($VREPLACE,=C'CMD ',DWD,COMMAND)                       08460030
         STRING 'DISPLAY PANEL(ISPSTRTP) COMMAND(CMD)',INTO=COMMAND     08470019
         BAL   R14,ISPEXEC          <- execute command                  08480031
         LA    R1,4                    Exit with rc=(15)                08490031
         PR                                                             08500031
*********************************************************************** 08510020
*                                                                     * 08520000
*        PARM='CRASH<,command>'   (Quick exit from ISPF)              * 08530022
*                                                                     * 08540000
*        If you use a REXX exec to invoke ISPF (generally at LOGON    * 08550022
*        time), then you get these messages:                          * 08560022
*                                                                     * 08570000
*      System abend code 222, reason code 00000000.                   * 08580022
*      Abend in host command EXEC or address environment routine TSO. * 08590022
*                                                                     * 08600000
*********************************************************************** 08610020
CRASH    BEGIN_PROC                                                     08620031
*---------------------------------------------------------------------* 08630023
*                                                                     * 08640000
*        Special processing for LOGON & LOGOFF commands               * 08650023
*                                                                     * 08660000
*        This code prevents the TMP from issuing the                  * 08670023
*        IKJ56400A ENTER LOGON OR LOGOFF prompt when the user enters  * 08680023
*        a CRASH LOGON or CRASH LOGOFF command while CLISTs or EXECs  * 08690023
*        are executing in some of the logical screens.                * 08700023
*                                                                     * 08710000
*---------------------------------------------------------------------* 08720023
         CLC   =C'LOGOFF ',OPT8        LOGON/LOGOFF ?                   08730029
         BE    CRASH32                 YES, JUMP                        08740023
         CLC   =C'LOGON ',OPT8         LOGON/LOGOFF ?                   08750029
         BNE   CRASH51                 no, exit                         08760023
         MVC   OPT8+6(2),BLANKS        "LOGON XX" => "LOGON   "         08770029
*                                                                       08780000
CRASH32  L     R2,CVTPTR(0,0)          CVT address                      08790023
         L     R2,CVTLINK-CVTMAP(,R2)  DCB for SYS1.LINKLIB             08800023
         LOAD  EPLOC=OPT8,DCB=(R2)     PRE-LOAD LOGON/LOGOFF            08810029
         STRING 'CMD(TSOEXEC ',(OPT,,T),') MODE(FSCR)',INTO=COMMAND     08820023
         ST    R15,DWD                 STORE LENGTH OF COMMAND          08830023
         LOAD  EPLOC=COMMAND+4,DCB=(R2) PRE-LOAD TSOEXEC                08840029
         ISPLINK ($SELECT,DWD,COMMAND)                                  08850023
         LTR   R7,R15                  DIALOG'S RETURN CODE             08860023
         BZ    CRASH71                 GOOD, CONTINUE                   08870023
         LA    R1,4                    Exit with rc=(15)                08880031
         PR                            command failed                   08890031
*---------------------------------------------------------------------* 08900022
*                                                                     * 08910000
*        STACK a TSO command                                          * 08920022
*                                                                     * 08930000
*---------------------------------------------------------------------* 08940022
CRASH51  EQU   *                                                        08950023
         L     R4,TSI@                 R4->TSI                          08960030
         USING TSI,R4                                                   08970030
         CLC   =C'READY ',OPT8         go back to READY prompt?         08980029
         BE    CRASH71                 yes, skip STACK macro            08990028
         L     R7,OPTADDR              1st byte of command              09000031
         ICM   R8,B'1111',OPTLEN       anything to add to the stack?    09010030
         BZ    CRASH61                 no, jump                         09020028
*                                                                       09030000
         CLI   OPT,C'='                User entered "CRASH ="  ?        09040031
         BE    CRASH53                 yes, jump                        09050031
         BAL   R14,CRASH58          <- build LSD and issue STACK macro  09060031
         B     CRASH71                 continue                         09070031
*                                                                       09080000
*        User entered CRASH =xxx: validate xxx options                  09090031
*                                                                       09100000
CRASH53  EQU   *                                                        09110031
         LA    R0,L'OPT8               max length                       09120031
         CLR   R8,R0                   option string too long?          09130031
         BH    CRASH59                 yes, error                       09140031
         LA    R5,OPT8+1               1st option                       09150031
         LR    R6,R8                   l'opt8                           09160031
         BCTR  R6,0                    skip "="                         09170031
*loop                                                                   09180031
CRASH53B EQU   *                                                        09190031
         CLI   0(R5),C'P'              CRASH =P (PARM)                  09200031
         BE    CRASH53N                yes, jump                        09210031
         CLI   0(R5),C'L'              CRASH =L (LOGONCMD)              09220031
         BE    CRASH53N                yes, jump                        09230031
         CLI   0(R5),C'I'              CRASH =I (ISPF)                  09240031
         BNE   CRASH59                 no, error                        09250031
CRASH53N LA    R5,1(,R5)               next option                      09260031
         BCT   R6,CRASH53B             next option                      09270031
*endloop                                                                09280031
*                                                                       09290000
*        User entered CRASH =xxx: stack commands                        09300031
*                                                                       09310000
         LR    R6,R8                   l'opt8                           09320031
         BCTR  R6,0                    skip "="                         09330031
         LA    R5,OPT8(R6)             last option                      09340031
*loop                                                                   09350031
CRASH54  EQU   *                                                        09360031
         CLI   0(R5),C'L'              CRASH =L (LOGONCMD)              09370031
         BE    CRASH54L                yes, jump                        09380031
         CLI   0(R5),C'I'              CRASH =I (ISPF)                  09390031
         BE    CRASH54I                yes, jump                        09400031
*                                                                       09410000
*        If the user entered CRASH =P, retrieve the PARM                09420031
*        specified in the TSO LOGON procedure.                          09430031
*                                                                       09440000
CRASH54P L     R14,PSATOLD-PSA(0,0)    Current TCB                      09450031
         USING TCB,R14                                                  09460031
         L     R14,TCBJSCB             Job Step Control Block (JSCB)    09470031
         USING IEZJSCB,R14                                              09480031
         L     R14,JSCSCT              Current step's SCT prefix        09490031
         USING INSMSCT-16,R14                                           09500031
         LH    R8,SCTSEXEC             parm length                      09510031
         ICM   R14,B'0111',SCTXBTTR    address of SCTX (SCT extension)  09520031
         USING SCTXIN-16,R14                                            09530031
         LA    R7,SCTXPARM             TMP PARM                         09540031
         LTR   R8,R8                   is there a PARM?                 09550031
         BNZ   CRASH54S                yes, issue STACK                 09560031
         B     CRASH54N                no, continue                     09570031
         DROP  R14                                                      09580033
*                                                                       09590000
*        If the user entered CRASH =L, retrieve the command             09600031
*        the user specified on the TSO/E LOGON panel.                   09610031
*                                                                       09620000
CRASH54L L     R1,PSAAOLD-PSA(0,0)     Current ASCB                     09630031
         L     R2,ASCBASXB-ASCB(,R1)   MY ASXB                          09640031
         L     R3,ASXBLWA-ASXB(,R2)    LOGON WORK AREA                  09650031
         LA    R7,LWALGCMD-LWA(,R3)    LOGON command                    09660031
         LA    R8,L'LWALGCMD           max length                       09670031
         B     CRASH54S                issue STACK                      09680031
*                                                                       09690000
*        If the user entered CRASH =I, retrieve the command             09700031
*        used to invoke ISPF.                                           09710031
*                                                                       09720000
CRASH54I LA    R7,RACFWORK             work area                        09730031
         LA    R8,L'RACFWORK           max length                       09740031
         ST    R8,DWD                  max length                       09750031
         ISPLINK ($VCOPY,=C'ZTSICMD ',DWD,(R7),$MOVE)                   09760031
         L     R8,DWD                  get length of ZTSICMD            09770031
*                                                                       09780000
CRASH54S EQU   *                                                        09790031
         BAL   R14,CRASH58          <- build LSD and issue STACK macro  09800031
CRASH54N EQU   *                                                        09810031
         BCTR  R5,0                    prev option                      09830031
         BCT   R6,CRASH54              prev option                      09840031
*endloop                                                                09850031
         B     CRASH71                 continue                         09860031
*                                                                       09870000
*        Build List Source Descriptor (LSD) and issue STACK macro       09880031
*                                                                       09890000
CRASH58  BAKR  R14,0                                                    09900031
         LA    R0,LSD_LENGTH(R8)       length of the LSD + text         09910022
         GETMAIN RU,LV=(0),SP=78,LOC=BELOW                              09920022
         LR    R9,R1                   ADDRESS OF THE LSD               09930022
         USING LSD,R9                                                   09940022
         XC    LSD(LSD_LENGTH),LSD     Clear LSD                        09950022
         LA    R1,LSD+LSD_LENGTH       POINT TO IN-STORAGE LIST         09960022
         ST    R1,LSDADATA             save addr into LSD               09970022
         ST    R1,LSDANEXT             save addr into LSD               09980022
         STH   R8,LSDTOTLN             store total length               09990022
         STH   R8,LSDRCLEN             length of F-len rec              10000022
         STRING ((R7),(R8)),INTO=(LSD+LSD_LENGTH,(R8))                  10010031
         DROP  R9                      LSD                              10020030
*                                                                       10030000
         L     R5,TSIECTP              ECT ADDRESS                      10040030
         L     R6,TSIUPTP              UPT ADDRESS                      10050030
         STACK PARM=STACKL,ECT=(R5),UPT=(R6),ECB=DWD,                  X10060030
               STORAGE=((R9),PROCL),MF=(E,TENWORDS)                     10070022
         PR                                                             10120031
*                                                                       10130000
*        Invalid option string                                          10140031
*                                                                       10150000
CRASH59  EQU   *                                                        10160031
         STRING 'Invalid Option',INTO=SHORTMSG                          10170031
         STRING 'Option "',(OPT,,T),'" is invalid, should be "=pli"',  X10180031
               INTO=LONGMSG                                             10190031
         MVI   ALARM,C'Y'              error, beep.                     10200031
         BAL   R14,SETMSG           <- send message                     10210031
         LA    R1,4                    Exit with rc=(15)                10220031
         PR                                                             10230031
*---------------------------------------------------------------------* 10240028
*                                                                     * 10250000
*        If CRASH is entered without any operand, reset the ECTIOWA   * 10260029
*        field in the primary ECT to the value it contained when ISPF * 10270029
*        was entered.  This ensures that, if ISPF is invoked from a   * 10280029
*        CLIST, processing will resume at the next CLIST statement.   * 10290029
*                                                                     * 10300000
*---------------------------------------------------------------------* 10310028
CRASH61  EQU   *                                                        10320028
         L     R4,TSITPDP              A(TPD)                           10330028
         USING TPD,R4                                                   10340028
         CLC   =C'TPD',TPDTBLID        am I lost?                       10350028
         BNE   CRASH69                 yes, exit                        10360028
         L     R4,TPDDTLDP             A(TLD0)                          10370030
         USING TLD,R4                                                   10380028
         CLC   =C'TLD0',TLDTBLID       am I lost?                       10390028
         BNE   CRASH69                 yes, exit                        10400028
         L     R5,TLDECTP              load ECT Address                 10420028
         USING ECT,R5                                                   10430028
         MVC   ECTIOWA,TLDIOWA         restore ECT Address              10440028
         DROP  R4,R5                   TLD,ECT                          10450029
CRASH69  EQU   *                                                        10460028
*---------------------------------------------------------------------* 10470031
*                                                                     * 10480031
*        Close Referral list tables                                   * 10490031
*                                                                     * 10500031
*---------------------------------------------------------------------* 10510031
CRASH71  EQU   *                                                        10520031
         STRING 'TBCLOSE ISRLLIST LIBRARY(ISPPROF)',INTO=COMMAND        10530032
         BAL   R14,ISPEXEC          <- close referral list              10540031
         STRING 'TBCLOSE ISRPLIST LIBRARY(ISPPROF)',INTO=COMMAND        10550032
         BAL   R14,ISPEXEC          <- close referral list              10560031
*                                                                       10570000
         CLI   ZENVIR+5,C'5'           ISPF V5 or above ?               10580048
         BNL   CRASH81                 NO, SKIP ISRJLIST/ISRRLIST       10590048
         STRING 'TBCLOSE ISRJLIST LIBRARY(ISPPROF)',INTO=COMMAND        10600032
         BAL   R14,ISPEXEC          <- close referral list              10610031
         STRING 'TBCLOSE ISRRLIST LIBRARY(ISPPROF)',INTO=COMMAND        10620032
         BAL   R14,ISPEXEC          <- close referral list              10630031
*---------------------------------------------------------------------* 10640028
*                                                                     * 10650000
*        Terminate ISPF by abending the IKJEFT09 sub-task             * 10660028
*                                                                     * 10670000
*---------------------------------------------------------------------* 10680028
CRASH81  EQU   *                                                        10690031
         LA    R1,CRASH85              address of the abend routine     10700031
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC                10710030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              10720030
         BAL   R14,EXECURP          <- Execute CRASH85 as a URP         10730030
CRASH85  ABEND X'222',,,SYSTEM         This is my URP !!!               10740031
*********************************************************************** 10750020
*                                                                     * 10760000
*        Function='D,dsname,member,NOENQ' (Delete Member)             * 10770023
*                                                                     * 10780000
*********************************************************************** 10790020
DELMBR   BEGIN_PROC                                                     10800031
         BAL   R14,PARSE3           <- parse options                    10810031
         STRING 'LMINIT DATAID(ID1) DATASET(''',(OPT,,T),              X10820020
               '''),ENQ(SHRW)',INTO=COMMAND                             10830020
         BAL   R14,ISPEXEC          <- execute command                  10840020
         LTR   R15,R15                 COMMAND OK ?                     10850020
         BNZ   DELMBR99                NO, EXIT                         10860020
         LA    R0,L'DATAID             max length                       10870020
         ST    R0,DWD                  max length                       10880020
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=DELMBR99      10890020
         STRING 'LMOPEN DATAID(',DATAID,') OPTION(OUTPUT)',            X10900020
               INTO=COMMAND                                             10910020
         BAL   R14,ISPEXEC          <- execute command                  10920020
         LTR   R15,R15                 COMMAND OK ?                     10930020
         BNZ   DELMBR98                NO, EXIT                         10940020
         STRING 'LMMDEL DATAID(',DATAID,') MEMBER(',(PARM3,,T),')',    X10950031
               INTO=COMMAND                                             10960020
         CLI   PARM4,C' '              NOENQ?                           10970023
         BE    DELMBR85                NO, JUMP                         10980023
         CLI   ISPFVM,X'41'            ISPF V4 or up?                   10990023
         BL    DELMBR85                NO, JUMP                         11000023
         STRING (COMMAND,,T),1X,PARM4,INTO=COMMAND                      11010023
DELMBR85 EQU   *                                                        11020023
         BAL   R14,ISPEXEC          <- execute command                  11030020
         LTR   R15,R15                 COMMAND OK ?                     11040020
         BNZ   DELMBR98                NO, EXIT                         11050020
         STRING 'Member Deleted',INTO=SHORTMSG                          11060020
         STRING 'Member ''',(OPT,,T),'(',(PARM3,,T),                   X11070031
               ')'' has been deleted',INTO=LONGMSG                      11080020
         BAL   R14,SETMSG           <- send message                     11090020
DELMBR98 EQU   *                                                        11100020
         LR    R7,R15                  save return code                 11110020
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND                11120020
         BAL   R14,ISPEXEC          <- execute command                  11130020
         LR    R15,R7                  restore return code              11140020
DELMBR99 EQU   *                                                        11150020
         LA    R1,4                    Exit with rc=(15)                11160031
         PR                                                             11170035
*********************************************************************** 11180049
*                                                                     * 11190049
*        PARM='DSINFO,dsname,volser'   (Data-Set Info)                * 11200049
*                                                                     * 11210049
*              opt=&dsname,parm3=&volser                              * 11220049
*                                                                     * 11230049
*********************************************************************** 11240049
DSINFO   BEGIN_PROC                                                     11250049
         BAL   R14,PARSE3           <- parse options                    11260049
         STRING '''GILBERT.JCL''',INTO=ZWRKDSN                          11270049
         STRING 1X,INTO=ZWRKVOL                                         11280049
         STRING OPT,INTO=ZWRKDSN       PARM2/DSN                        11290049
         STRING PARM3,INTO=ZWRKVOL     PARM3/VOL                        11300049
         STRING 'CMD(%PDF34I ',(ZWRKDSN,,T),1X,ZWRKVOL,')',            X11310049
               INTO=COMMAND                                             11320049
         ST    R15,DWD                 store length                     11330049
*                                                                       11340049
         ISPLINK ($SELECT,DWD,COMMAND),ERRET=DSINFO9                    11350049
*                                                                       11360049
DSINFO9  EQU   *                                                        11370049
         LA    R1,4                    Exit with rc=(15)                11380049
         PR                                                             11390049
 AGO .DSI99                                                             11400049
         STRING 1X,INTO=ZWRKVOL                                         11410049
         STRING 'DSN="',(ZWRKDSN,,T),'";',                             X11420049
               'VOL="',ZWRKVOL,'";',                                   X11430049
               'ISPEXEC VPUT (DSN VOL) SHARED;',                       X11440049
               'ISPEXEC CONTROL NONDISPL ENTER;',                      X11450049
               'say dsn vol;',                                         X11460049
               'ISPEXEC SELECT PGM(ISRUDA) PARM(ISRDDNPI);',           X11470049
               'ISPEXEC VERASE (DSN VOL) BOTH;',                       X11480049
               INTO=STRING1                                             11490049
         LA    R14,STRING1             addr of REXX stmt                11500049
         STM   R14,R15,DWD             store addr/len                   11510049
 #SNAP STRING1                                                          11520049
         LA    R1,DWD                  FIRST STMT ADDR/LEN              11530049
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         11540049
         SLR   R2,R2                   No arguments                     11550049
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              11560049
.DSI99 ANOP                                                             11570049
*********************************************************************** 11580027
*                                                                     * 11590000
*        PARM='EXECPGM,pgm<,parm>' (EXEC PGM from Link-list)          * 11600027
*                                                                     * 11610000
*********************************************************************** 11620027
EXECPGM  BEGIN_PROC                                                     11630031
         BAL   R14,PARSE3           <- parse options                    11640031
         STRING (PARM3,,T),INTO=(STRING1+2,L'STRING1-2)                 11650027
         STH   R15,STRING1             length of parm                   11660027
         LA    R0,STRING1              addr of parm                     11670027
         ST    R0,PARMLIST             build parm                       11680027
         OI    PARMLIST,X'80'          build parm                       11690027
         LA    R1,PARMLIST             A(PARM)                          11700027
         L     R2,CVTPTR(0,0)          CVT address                      11710027
         L     R2,CVTLINK-CVTMAP(,R2)  DCB for SYS1.LINKLIB             11720027
         ATTACH EPLOC=OPT,ECB=DWD,TASKLIB=(R2),SF=(E,ATTACHL)           11730027
         ST    R1,DWD+4                save TCB address                 11740027
         WAIT  1,ECB=DWD               wait for completion              11750027
         DETACH DWD+4                  detach sub-task                  11760027
         LH    R15,DWD+2               return code                      11770027
         LA    R1,4                    Exit with rc=(15)                11780031
         PR                                                             11790031
*********************************************************************** 11800031
*                                                                     * 11810031
*        FUNCTION=FSPASTE  (full-screen paste)                        * 11820031
*                                                                     * 11830031
*********************************************************************** 11840031
FSPASTE  BEGIN_PROC                                                     11850031
         GTSIZE ,                      get screen size                  11860031
         ST    R0,ZSCREEND             SCREEN DEPTH (ROWS)              11870031
         ST    R1,ZSCREENW             SCREEN WIDTH (COLUMNS)           11880031
         MR    R0,R0                   screen end = rows * columns      11890031
         LR    R3,R1                   pass screen size                 11900031
         GETMAIN R,LV=(R3)             GET FULL-SCREEN BUFFER           11910031
         LR    R4,R1                   pass address                     11920031
         MVC   PARM3(9),=X'C3,11,4040,13,3C,0,0,40' WCC,SBA,1,1,IC,RA   11930031
         LR    R0,R3                   screen length                    11940031
         BCTR  R0,0                    minus one                        11950031
         STCM  R0,B'0011',PARM3+6      BINARY SCREEN ADDR (14 BITS)     11960031
*-       ISPLINK ($CONTROL,$DISPLAY,$SAVE) CONTROL DISPLAY SAVE         11970046
*-       ISPLINK ($CONTROL,$DISPLAY,=C'LINE START(1)')                  11980046
*-       ISPLINK ($CONTROL,$DISPLAY,$RESTORE) CONTROL DISPLAY RESTORE   11990046
*                                                                       12000000
         STRING 'CONTROL DISPLAY ','SAVE',INTO=COMMAND                  12010031
         BAL   R14,ISPEXEC          <- execute command                  12020031
*                                                                       12030000
*        If we're in 24X80 mode on a model 5,                           12040031
*        tell ISPF to clear the screen                                  12050031
*                                                                       12060000
         L     R1,TLD@                 R1->TLD                          12070031
         L     R1,TLDMPSWD-TLD(,R1)    max line width                   12080031
         CL    R1,ZSCREENW             SIZE=MAX?                        12100031
         BE    FSPASTE3                yes, do not clear screen         12110031
         STRING 'CONTROL DISPLAY ','LINE START(1)',INTO=COMMAND         12120031
         BAL   R14,ISPEXEC          <- execute command                  12130031
FSPASTE3 EQU   *                                                        12150031
         TPUT  PARM3,9,FULLSCR         CLEAR THE SCREEN WITH SPACES     12160031
         LTR   R15,R15                 TPUT OK?                         12170031
         BNZ   FSPASTE8                NO, EXIT                         12180031
         TGET  (R4),(R3)               READ REPLY                       12190031
         LTR   R15,R15                 TGET OK?                         12200031
         BNZ   FSPASTE8                NO, EXIT                         12210031
         STRING ((R4),(R1),T),INTO=((R4),(R3)) find end of data         12220034
         SLR   R14,R14                                                  12230034
         D     R14,ZSCREENW            calculate number of lines        12240034
         ST    R15,DWD+4               save it for RDRTNE               12250034
         ST    R4,DWD                  PASS BUFFER ADDRESS              12280031
*                                                                       12290038
*        Invoke EDIF (ISPF V2-V4)                                       12300038
*                                                                       12310038
         CLI   ISPFVM,X'50'            ISPF V5 or up?                   12320038
         BNL   FSPASTE5                yes, jump                        12330038
         ISPLINK (=C'EDIF',            ISPF SERVICE                    X12340031
               FSPASTE7,               Title                           X12350031
               =C'FSPASTE ',           PROFILE NAME                    X12360031
               =C'F ',                 RECFM                           X12370031
               ZSCREENW,               LRECL                           X12380031
               =A(RDRTNE),             READ ROUTINE                    X12390031
               =A(WRITERTN),           WRITE ROUTINE                   X12400031
               0,                      COMMAND EXIT                    X12410031
               DYNAM)                  PARM FOR READ ROUTINE            12420031
         B     FSPASTE8                                                 12430038
WRITERTN SLR   R15,R15                 simulate successful write        12440038
         BR    R14                     GOBACK                           12450038
*                                                                       12460000
*        Invoke VIIF (ISPF V5)                                          12470038
*                                                                       12480000
FSPASTE5 EQU   *                                                        12490038
         ISPLINK (=C'VIIF',            ISPF SERVICE                    X12500038
               FSPASTE7,               Title                           X12510038
               =C'FSPASTE ',           PROFILE NAME                    X12520038
               =C'F ',                 RECFM                           X12530038
               ZSCREENW,               LRECL                           X12540038
               =A(RDRTNE),             READ ROUTINE                    X12550038
               0,                      COMMAND EXIT                    X12560038
               DYNAM)                  PARM FOR READ ROUTINE            12570038
*                                                                       12580000
FSPASTE8 EQU   *                                                        12590031
         STRING 'CONTROL DISPLAY ','RESTORE',INTO=COMMAND               12600031
         BAL   R14,ISPEXEC          <- execute command                  12610031
*                                                                       12620000
         FREEMAIN R,LV=(R3),A=(R4)     FREE FULL-SCREEN BUFFER          12630031
         LA    R1,4                    exit                             12640031
         PR                                                             12650031
*                                                                       12660000
FSPASTE7 DC    C'Full-Screen PASTE '   TITLE                            12670031
*                                                                       12680000
*        Read exit routine for EDIF/VIIF                                12690031
*                                                                       12700000
         PUSH  USING                                                    12710031
         DROP                                                           12720031
RDRTNE   SAVE  (14,12),,FSPASTE-RDRTNE                                  12730031
         LR    R12,R15                                                  12740031
         USING RDRTNE,R12                                               12750031
         L     R11,12(,R1)             PTR TO DIALOG DATA AREA          12760031
         L     R11,0(,R11)             A(DYNAM)                         12770031
         USING DYNAM,R11                                                12780031
         L     R6,00(,R1)              RECORD ADDR                      12790031
         L     R5,CURRLINE             CURRENT LINE NUMBER              12800031
         CL    R5,ZSCREEND             LAST LINE ?                      12810031
         BE    RDRTN88                 YES, EXIT                        12820031
 ORG *-8                                                                12830034
         CL    R5,DWD+4                LAST LINE ?                      12840034
         BH    RDRTN88                 YES, EXIT                        12850034
         LA    R0,1(,R5)               NEXT LINE                        12860031
         ST    R0,CURRLINE             NEXT RECORD                      12870031
         MH    R5,ZSCREENW+2           MULT BY LINE LENGTH              12880031
         AL    R5,DWD                  CHANGE OFFSET TO ADDRESS         12890031
         ST    R5,0(,R6)               PASS DATA ADDRESS                12900031
         RETURN (14,12),RC=0           GOBACK TO EDIT                   12910031
*                                                                       12920000
RDRTN88  RETURN (14,12),RC=8           GOBACK TO BRIF                   12930031
         POP   USING                                                    12940031
*********************************************************************** 12950017
*                                                                     * 12960000
*        PARM='FTINCL,&skel,&panel,&applid'                           * 12970018
*                                                                     * 12980031
*              opt=&skel,parm3=&panel,parm4=&applid                   * 12990031
*                                                                     * 13000000
*********************************************************************** 13010017
FTINCL   BEGIN_PROC                                                     13020031
         BAL   R14,PARSE3           <- parse options                    13030031
         CLI   PARM4,C' '              APPLID SPECIFIED?                13040018
         BE    FTINCL2                 NO, DO NOT SWITCH APPLID         13050018
         MVC   NEWAPPL,PARM4           MOVE APPLID                      13060018
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 13070018
         BE    FTINCL2                 yes, continue                    13080031
         LA    R1,8                    no, switch to APPL=PARM4         13090031
         PR                                                             13100031
FTINCL2  EQU   *                                                        13110030
         CLI   PARM3,C' '              ENTER PANEL?                     13120031
         BE    FTINCL3                 NO, JUMP                         13130017
* ISPEXEC DISPLAY PANEL(&panel)                                         13140030
         STRING 'DISPLAY PANEL(',(PARM3,,T),')',INTO=COMMAND            13150031
         BAL   R14,ISPEXEC          <- execute command                  13160017
         LTR   R15,R15                                                  13170031
         BNZ   FTINCL9                 RC>0 (ERROR)                     13180017
* ISPEXEC FTOPEN TEMP                                                   13190030
FTINCL3  STRING 'FTOPEN TEMP',INTO=COMMAND                              13200017
         BAL   R14,ISPEXEC          <- execute command                  13210017
         CH    R15,=H'8'                                                13220017
         BH    FTINCL9                 RC>8 (ERROR)                     13230017
* ISPEXEC FTINCL &skel                                                  13240030
         STRING 'FTINCL ',OPT,INTO=COMMAND                              13250017
         BAL   R14,ISPEXEC          <- execute command                  13260017
         LR    R7,R15                  SAVE RETURN CODE                 13270017
* ISPEXEC FTCLOSE                                                       13280017
         STRING 'FTCLOSE ',INTO=COMMAND                                 13290017
         BAL   R14,ISPEXEC          <- execute command                  13300017
         LTR   R15,R7                  ERROR IN FTINCL?                 13310031
         BNZ   FTINCL9                 RC>0 (ERROR)                     13320031
* ISPEXEC SELECT PGM(FASTPATH) PARM(CNTL)                               13330020
         MVC   NEWPGM,OWNNAME          PGM(FASTPATH)                    13340030
         STRING 'CNTL',INTO=OPT        PARM(CNTL)                       13350030
         LA    R1,0                    Execute command                  13360031
         PR                                                             13370031
FTINCL9  EQU   *                                                        13380020
         LA    R1,4                    Exit with rc=(15)                13390031
         PR                                                             13400031
*********************************************************************** 13410015
*                                                                     * 13420000
*        Function=ICS   (ISPF Command Shell)                          * 13430018
*                                                                     * 13440000
*********************************************************************** 13450015
ICS      BEGIN_PROC                                                     13460031
         MVC   NEWPGM,=CL8'ISRRCL'     NEW PROGRAM                      13470015
         MVC   OPT(2),=C'C1'           PARM                             13480015
         CLI   ISPFVM,X'40'            ISPF 4.1 or up?                  13490015
         BH    ICS8                    yes, jump                        13500015
         MVC   NEWPGM,=CL8'ISRPTC'     NEW PROGRAM (ISPF 3.x)           13510015
         MVC   OPT,BLANKS              NO PARM                          13520015
ICS8     LA    R1,0                    Invoke ISPF service              13530031
         PR                                                             13540031
*********************************************************************** 13550000
*                                                                     * 13560000
*        FUNCTION=EDIT, BROWSE, VIEW, WP                              * 13570018
*                                                                     * 13580000
*********************************************************************** 13590000
EDBRVIWP BEGIN_PROC                                                     13600031
         BAL   R14,PARSE3           <- parse options                    13610031
         MVC   PROF,PARM3              EDIT profile                     13620031
         CLI   FUNCTION,C'W'           PARM=WP?                         13630031
         BNE   EDBR010                 no, jump                         13640031
         CLI   ISPFVM,X'42'            ISPF 4.2 or up?                  13650014
         BNL   EDBR010                 yes, jump                        13660017
         STRING '%DSLIST',INTO=NEWCMD  TSO %DSLIST                      13670013
         B     EDBR980                 execute command                  13680031
*                                                                       13690000
EDBR010  CLI   OPT,C' '                OPT=''?                          13700017
         BE    EDBR700                 yes, jump                        13710030
         CLI   FUNCTION+1,C' '         PARM=E/B/V  direct browse/edit   13720031
         BE    EDBR800                 yes, jump there                  13730031
*                                                                       13740034
         CLI   PLUSSIGN,C'+'           start new screen?                13750034
         BE    EDBR9816                yes, do it                       13760034
*---------------------------------------------------------------------* 13770000
*                                                                     * 13780000
*        I've been invoked with PARM='EDIT,opt' or 'BROWSE,opt'.      * 13790031
*                                                                     * 13800000
*---------------------------------------------------------------------* 13810001
EDBR020  CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 13820004
         BNE   EDBR_ISR                no, jump                         13830031
         OC    OPT,BLANKS              convert to uppercase             13840000
*                                                                       13850000
*        Define profile variables used on EDIT/BROWSE panels            13860030
*                                                                       13870000
         ISPLINK ($VDEFINE,VARLIST,PRJ1,$CHAR,=F'8')                    13880004
         ISPLINK ($VDEFINE,=C'ZWRKVOL ',ZWRKVOL,$CHAR,=F'6')            13900034
         ISPLINK ($VDEFINE,=C'ZREFTYPE ',ZREFTYPE,$CHAR,=F'1')          13910034
         ISPLINK ($VDEFINE,=C'ZWRKDSN ',ZWRKDSN,$CHAR,=A(L'ZWRKDSN))    13920008
*                                                                       13930000
*        Check for ED MY.DATA.SET or ED CLIST(MBR)                      13940030
*                                                                       13950000
         CLC   =C'* ',OPT              previous data set?               13960030
         BE    EDBR620                 yes, jump                        13970030
         CLI   OPT,C''''               fully-qualified dsname?          13980030
         BE    EDBR660                 yes, jump                        13990030
         CLC   =C'/ ',OPT              reflist?                         14000030
         BE    EDBR580                 yes, jump                        14010030
         CLI   OPT+0,C'/'              work-station file (UNIX) ?       14020030
         BE    EDBR900                 yes, jump                        14030030
         CLI   OPT+0,C'~'              work-station file (?) ?          14040030
         BE    EDBR900                 yes, jump                        14050030
         CLI   OPT+1,C':'              work-station file (DOS, OS/2) ?  14060030
         BE    EDBR900                 yes, jump                        14070030
         CLI   OPT+6,C':'              volser:dsname?                   14080033
         BE    EDBR670                 yes, exit                        14090033
         LA    R1,OPT                  1st pos of dsname                14100030
         LA    R2,9                    search 9 characters              14110030
*loop                                                                   14120030
EDBR031  CLI   0(R1),C'.'              does this look like a dsname?    14130030
         BE    EDBR670                 yes, exit                        14140030
         CLI   0(R1),C'*'              does this look like a dsname?    14150032
         BE    EDBR670                 yes, exit                        14160032
         CLI   0(R1),C'%'              does this look like a dsname?    14170032
         BE    EDBR670                 yes, exit                        14180032
         CLI   0(R1),C'('              does this look like a dsname?    14190030
         BE    EDBR670                 yes, exit                        14200030
         CLI   0(R1),C'/'              volser at the end?               14210033
         BE    EDBR670                 yes, exit                        14220033
         LA    R1,1(,R1)               bump index up                    14230030
         BCT   R2,EDBR031              scan rest of dsname              14240030
*endloop                                                                14250030
*                                                                       14260000
*        Get the value of the EDBR0000 profile variable.  It contains   14270000
*        the highest nnnn ever assigned to an EDBRnnnn variable.        14280000
*                                                                       14290000
EDBR080  ISPLINK ($VDEFINE,$EDBR0000,EDBR0000,$CHAR,=F'4')              14300030
         LA    R6,1                    index                            14310000
         MVC   EDBRNNNN,$EDBR0000      EDBR0000                         14320003
         MVI   EDBRNNNN+7,C'1'         EDBR0001                         14330003
         LA    R1,=A($VGET,$EDBR0000+VL)                                14340000
         LINK  SF=(E,ISPLINK$)         VGET EDBR0000                    14350021
         LTR   R15,R15                 first time ever?                 14360003
         BNZ   EDBR191                 yes, jump                        14370038
         PACK  DWD,EDBR0000            Z'0123' -> P'123'                14380000
         CVB   R7,DWD                  high water-mark                  14390000
*---------------------------------------------------------------------* 14410000
*                                                                     * 14420000
*        Scan all EDBRnnnn variables for &OPT                         * 14430000
*                                                                     * 14440000
*---------------------------------------------------------------------* 14450000
*LOOP                                                                   14460001
EDBR111  CVD   R6,DWD                  NNN%                             14470003
         OI    DWD+7,15                NNNN                             14480000
         UNPK  EDBRNNNN+4(4),DWD       EDBRNNNN                         14490000
         ISPLINK ($VGET,EDBRNNNN),ERRET=EDBR180                         14510000
         LA    R0,L'STRING1            max length of variable           14530000
         ST    R0,DWD                  max length of variable           14540000
         ISPLINK ($VCOPY,EDBRNNNN,DWD,STRING1,$MOVE),                  X14550000
               ERRET=EDBR180                                            14560000
         LA    R4,STRING1              VARIABLE VALUE                   14580000
         L     R5,DWD                  VARIABLE LENGTH                  14590000
         BAL   R14,PARSE_PARM       <- split OPT2                       14600030
         DC    S(L'OPT2,OPT2)          search argument                  14610000
         DC    S(L'PRJ1,PRJ1)                                           14620000
         DC    S(L'LIB1,LIB1)                                           14630000
         DC    S(L'LIB2,LIB2)                                           14640000
         DC    S(L'LIB3,LIB3)                                           14650000
         DC    S(L'LIB4,LIB4)                                           14660000
         DC    S(L'TYP1,TYP1)                                           14670000
         DC    S(L'PROF,PROF)                                           14680000
         DC    S(L'MIX,MIX)                                             14690000
         DC    S(L'FNAM,FNAM)                                           14700000
         DC    S(L'ZEDLOCK,ZEDLOCK)                                     14710004
         DC    S(L'ZEDLOCKP,ZEDLOCKP)                                   14720000
         DC    S(L'ZPCFMCN,ZPCFMCN)                                     14730004
         DC    S(L'ZVIEW,ZVIEW)                                         14740004
         DC    S(L'ZVIMAC,ZVIMAC)                                       14750004
         DC    S(L'ZVPROF,ZVPROF)                                       14760004
         DC    S(L'ZREFTYPE,ZREFTYPE)  WP SHELL                         14770008
         DC    S(L'ZWRKVOL,ZWRKVOL)    WP SHELL                         14780008
         DC    S(L'ZWRKDSN,ZWRKDSN)    WP SHELL                         14790008
         DC    S(L'ZEDITWS,ZEDITWS)    view/edit 4.2                    14800025
         DC    S(L'ZVIEWWS,ZVIEWWS)    view/edit 4.2                    14810025
         CLC   OPT,OPT2                IS THIS WHAT I'M LOOKING FOR?    14850000
         BNE   EDBR190                 NO, TRY NEXT ONE                 14860000
         OC    ZREFTYPE(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN),BLANKS          14880034
         CLI   ZREFTYPE,C' '           FIRST TIME?                      14890009
         BNE   *+8                     NO, JUMP                         14900009
         MVI   ZREFTYPE,C'L'           YES, DEFAULT TYPE IS LIBRARY     14910009
         CLI   ZVPROF,C' '             FIRST TIME?                      14920011
         BNE   *+10                    NO, JUMP                         14930011
         MVC   ZVPROF,PROF             YES, COPY EDIT PROFILE           14940011
         CLI   PROF,C' '               FIRST TIME?                      14950011
         BNE   *+10                    NO, JUMP                         14960011
         MVC   PROF,ZVPROF             YES, COPY VIEW PROFILE           14970011
         B     EDBR200                 exit loop                        14980031
*                                                                       14990000
EDBR180  ICM   R0,B'1111',GAP          first gap?                       15000000
         BNZ   EDBR190                 no, jump                         15010000
         ST    R6,GAP                  yes, remember it                 15020000
EDBR190  LA    R6,1(,R6)               increment index                  15030000
         CLR   R6,R7                   hwm reached yet?                 15040000
         BNH   EDBR111                 next EDBRnnnn variable           15050000
*ENDLOOP                                                                15060001
*---------------------------------------------------------------------* 15070000
*                                                                     * 15080000
*        &OPT has not been found in the profile variables;            * 15090001
*        Check if it's a user data set such as CLIST                  * 15100030
*                                                                     * 15110000
*---------------------------------------------------------------------* 15120030
EDBR191  EQU   *                                                        15130038
         CLI   ZPREFIX,C' '            ZPREFIX=''?                      15140030
         BE    EDBR192                 yes, jump                        15150030
         STRING (ZPREFIX,,T),'.',(OPT,,T),INTO=ZWRKDSN                  15160030
         BAL   R14,LISTDSI          <- check existence of data set      15170030
         LTR   R15,R15                 RC=0 from LOCATE?                15180030
         BNZ   EDBR192                 no, jump                         15190030
         MVC   OPT2,OPT                restore dsname                   15200030
         B     EDBR677                 yes, jump                        15210035
*---------------------------------------------------------------------* 15220030
*                                                                     * 15230000
*        Assign the next available EDBRnnn number.                    * 15240001
*                                                                     * 15250000
*---------------------------------------------------------------------* 15260000
EDBR192  EQU   *                                                        15270030
         STRING 'Tag ',(OPT,,T),INTO=STRING1,                          X15280034
               ' does not exist; enter Y to create it:'                 15290034
         TPUT  STRING1,(R15),ASIS      write message (WRITENR)          15300034
         TGET  DWD,1                   get reply (one byte only)        15310034
         OI    DWD,C' '                uppercase                        15320034
         CLI   DWD,C'Y'                REPLY=Y ?                        15330034
         BNE   EDBR998                 no, exit with rc=8               15340034
*                                                                       15350034
         ICM   R0,B'1111',GAP          did we find a gap?               15360000
         BNZ   EDBR194                 yes, jump                        15370000
*                                                                       15380000
*        no gap found, use hwm+1 and update EDBR0000                    15390000
*                                                                       15400000
EDBR193  CVD   R6,DWD                  NNN%                             15410000
         OI    DWD+7,15                NNNN                             15420000
         UNPK  EDBR0000,DWD            NNNN                             15430003
         LA    R1,=A($VPUT,$EDBR0000,$PROFILE+VL)                       15440000
         LINK  SF=(E,ISPLINK$)         VPUT EDBR0000 PROFILE            15450021
         LR    R0,R6                   gap=hwm+1                        15460003
*                                                                       15470000
*        reuse first gap                                                15480000
*                                                                       15490000
EDBR194  CVD   R0,DWD                  NNN%                             15500000
         OI    DWD+7,15                NNNN                             15510000
         UNPK  EDBRNNNN+4(4),DWD       EDBRNNNN                         15520000
*                                                                       15540000
EDBR196  XC    STRING1,STRING1         clear work area                  15550000
         BAL   R14,ZVIEW00          <- set ZVIEW to YES/NO for VI/BR    15560004
         BAL   R14,VPUT00           <- update EDBRnnnn variable         15570000
         B     EDBR500                 do edit/browse                   15580000
*---------------------------------------------------------------------* 15590000
*                                                                     * 15600000
*        &OPT has been found in the profile.                          * 15610000
*        pass PRJ1-ZEDLOCKP values to edit/browse                     * 15620000
*                                                                     * 15630000
*---------------------------------------------------------------------* 15640000
EDBR200  BAL   R14,ZVIEW00          <- set ZVIEW to YES/NO for VI/BR    15650004
         LA    R1,=A($VPUT,VARLIST+VL)                                  15660004
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLIST)                  15670021
         LA    R1,=A($VPUT,VARLISTW+VL)                                 15680031
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLISTW)                 15690031
*---------------------------------------------------------------------* 15710000
*                                                                     * 15720000
*        Display the EDIT, BROWSE or VIEW Entry Panel                 * 15730030
*                                                                     * 15740000
*---------------------------------------------------------------------* 15750000
EDBR500  STRING 'PGM(ISREDIT) PARM(P,ISREDM01)',INTO=COMMAND            15760006
         CLI   FUNCTION,C'E'           FUNCTION=E?                      15770000
         BE    EDBR530                 yes, jump                        15780000
         STRING 'PGM(ISRUDA) PARM(ISRWORK)',INTO=COMMAND                15790008
         CLI   FUNCTION,C'W'           FUNCTION=W?                      15800008
         BE    EDBR530                 yes, jump                        15810008
         STRING 'PGM(ISRBRO) PARM(ISRBRO01)',INTO=COMMAND               15820006
EDBR530  ISPLINK ($SELECT,=A(L'COMMAND),COMMAND)                        15830006
*                                                                       15840000
*        The user has modified the values of PRJ1-ZEDLOCKP              15850000
*        Update the corresponding EDBRnnnn variable                     15860000
*                                                                       15870000
         BAL   R14,VPUT00           <- update EDBRnnnn variable         15880000
*                                                                       15890000
*        Delete all variables in function pool                          15900000
*                                                                       15910000
         LA    R1,=A($VRESET+VL)                                        15920000
         LINK  SF=(E,ISPLINK$)         VRESET                           15930021
         B     EDBR990                 exit                             15940031
*********************************************************************** 15950030
*                                                                     * 15960030
*        Edit, Browse and View with data-set reference list           * 15970030
*                                                                     * 15980030
*          PARM='EDIT,/'                                              * 15990030
*                                                                     * 16000030
*********************************************************************** 16010030
EDBR580  CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 16020030
         BNE   EDBR_ISR                no, switch applid                16030031
         ISPLINK ($VREPLACE,=C'ZREFMDE ',=F'2',=C'ON')  ZREFMDE='ON'    16040030
         STRING 'PGM(ISRDSLST) PARM(PL1 REFLIST) SUSPEND',INTO=COMMAND  16050035
         CLI   ISPFVM,X'48'            ISPF 4.8 or up?                  16060035
         BNL   EDBR581                 yes, jump                        16070035
         STRING 'PGM(ISRDSLST) PARM(RL1) SUSPEND',INTO=COMMAND          16080030
EDBR581  EQU   *                                                        16090035
         ISPLINK ($SELECT,=A(L'COMMAND),COMMAND)                        16100030
         ISPLINK ($VGET,=C'(ZRDSN ZRVOL)',=C'SHARED')                   16110030
         LA    R0,L'OPT                max length                       16120030
         ST    R0,OPTLEN               max length                       16130030
         ISPLINK ($VCOPY,=C'ZRDSN ',OPTLEN,OPT,$MOVE),ERRET=EDBR920     16140030
         LA    R0,L'BRVOL              max length                       16180030
         ST    R0,DWD                  max length                       16190030
         ISPLINK ($VCOPY,=C'ZRVOL ',DWD,BRVOL,$MOVE)                    16200030
         STRING 'VERASE ','(ZRDSN ZRVOL ZREFMDE) SHARED',INTO=COMMAND   16210030
         BAL   R14,ISPEXEC          <- execute command                  16220030
*                                                                       16260000
         CLI   OPT,C' '                dsname returned?                 16270031
         BE    EDBR994                 no, exit with rc=4               16280031
*                                                                       16290000
*        check for a work-station file name                             16300031
*                                                                       16310000
         CLI   OPT+0,C'/'              work-station file (UNIX) ?       16320030
         BE    EDBR900                 yes, jump                        16330030
         CLI   OPT+0,C'~'              work-station file (?) ?          16340030
         BE    EDBR900                 yes, jump                        16350030
         CLI   OPT+1,C':'              work-station file (DOS, OS/2) ?  16360030
         BE    EDBR900                 yes, jump                        16370030
 ORG *-24 WSFN can't happen in ISPF 4.5                                 16380031
         MVC   OPT2,OPT                copy dsname                      16390030
         CLI   OPT,C''''               dsname enclosed in apostrophes?  16400030
         BE    EDBR660                 yes, remove them                 16410030
         B     EDBR670                 no, add prefix                   16420030
*********************************************************************** 16430030
*                                                                     * 16440000
*        Direct Edit, Browse and View (CNAEBROW/CNAEEDIT)             * 16450030
*                                                                     * 16460000
*          PARM='EDIT,CLIST(MBR)'                                     * 16470030
*                                                                     * 16480000
*********************************************************************** 16490030
*                                                                       16500000
*        Retrieve BRDSN/BRMEM when invoked with 'EDIT,*'                16510030
*                                                                       16520000
EDBR620  EQU   *                                                        16530030
         LA    R0,L'OPT                max length                       16540030
         ST    R0,OPTLEN               max length                       16550030
         ISPLINK ($VCOPY,=C'BRDSN ',OPTLEN,OPT,$MOVE),ERRET=EDBR920     16560030
         LA    R0,L'OPT8               max length                       16570030
         ST    R0,DWD                  max length                       16580030
         ISPLINK ($VCOPY,=C'BRMEM ',DWD,OPT8,$MOVE),ERRET=EDBR626       16590030
         CLI   OPT8,C' '               do we have a member name?        16600030
         BE    EDBR626                 yes, jump                        16610030
         STRING (OPT,,T),'(',(OPT8,,T),')',INTO=OPT                     16620030
         ST    R15,OPTLEN              update length                    16630030
EDBR626  EQU   *                                                        16640030
         LA    R0,L'BRVOL              max length                       16650030
         ST    R0,DWD                  max length                       16660030
         ISPLINK ($VCOPY,=C'BRVOL ',DWD,BRVOL,$MOVE)                    16670030
         B     EDBR800                                                  16680030
*                                                                       16690000
*        Remove apostrophes that surround a fully-qualified dsname      16700030
*                                                                       16710000
EDBR660  EQU   *                                                        16720030
         L     R1,OPTLEN               get L'&OPT                       16730030
         BCTR  R1,0                    minus 1                          16740030
         BCTR  R1,0                    minus 2                          16750030
         STRING (OPT2+1,(R1)),INTO=OPT remove surrounding quotes        16760030
         ST    R15,OPTLEN              update length                    16770030
         BAL   R14,EDBR690          <- Extract /VOLSER                  16780033
         B     EDBR680                                                  16790030
*                                                                       16800000
*        Prefix &zprefix to a non fully-qualified dsname                16810033
*                                                                       16820000
EDBR670  EQU   *                                                        16830030
         BAL   R14,EDBR690          <- Extract /VOLSER                  16840033
         CLI   BRVOL,C' '              BRVOL=''?                        16850033
         BH    EDBR680                 no, jump                         16860033
         CLI   ZPREFIX,C' '            ZPREFIX=''?                      16890030
         BE    EDBR680                 yes, jump                        16900030
         STRING (ZPREFIX,,T),'.',(OPT,,T),INTO=ZWRKDSN                  16910033
         BAL   R14,LISTDSI          <- check catalog status             16920033
         LTR   R15,R15                 found in catalog?                16930033
         BZ    EDBR677                 yes, jump                        16940033
         MVC   ZWRKDSN,OPT2            no prefix                        16950033
         BAL   R14,LISTDSI          <- check catalog status             16970033
         LTR   R15,R15                 found in catalog?                16980033
         BNZ   EDBR800                 no, quit                         16990035
EDBR677  EQU   *                                                        17010033
         STRING (ZPREFIX,,T),'.',(OPT2,,T),INTO=OPT                     17020030
         STRING (ZWRKDSN,,T),INTO=OPT                                   17030035
         ST    R15,OPTLEN              update length                    17040030
*                                                                       17050000
*        Update BRDSN/BRMEM/BRVOL in profile                            17060030
*                                                                       17070000
EDBR680  EQU   *                                                        17080030
         OC    OPT,BLANKS              UPPER-CASE                       17090033
         OC    BRVOL,BLANKS            UPPER-CASE                       17100033
         ISPLINK ($VREPLACE,=C'BRDSN ',OPTLEN,OPT)                      17140030
         ISPLINK ($VREPLACE,=C'BRMEM ',=F'1',BLANKS)    BRMEM=''        17150030
         ISPLINK ($VREPLACE,=C'BRVOL ',=F'6',BRVOL)                     17160031
         ISPLINK ($VPUT,=C'(BRDSN BRMEM BRVOL)',$PROFILE)               17170030
         B     EDBR800                 invoke PDF service               17180030
*                                                                       17190000
*        Extract volser if dsname ends in /VOLSER                       17200033
*                                                                       17210000
EDBR690  EQU   *                                                        17220033
         L     R1,OPTLEN               length of dsname                 17230033
         SH    R1,=H'7'                length of /SYSRES                17240033
         CLI   OPT+6,C':'              volser:dsname?                   17250033
         BE    EDBR692                 yes, jump                        17260033
         LA    R15,OPT(R1)             point to / in AA.BB.CC/SYSRES    17270033
         CLI   0(R15),C'/'             volser present at end of dsname? 17280033
         BNER  R14                     no, goback                       17290033
         MVC   BRVOL,1(R15)            save volser                      17300033
         MVC   0(7,R15),BLANKS         blank out /VOLSER                17310033
         B     EDBR697                                                  17320033
EDBR692  EQU   *                                                        17330033
         MVC   BRVOL,OPT               save volser                      17340033
         MVC   OPT(L'OPT-7),OPT+7      blank out VOLSER:                17350033
EDBR697  EQU   *                                                        17360033
         ST    R1,OPTLEN               adjust length                    17370033
         MVC   OPT2,OPT                update copy of dsname            17380033
         BR    R14                     goback                           17390033
*********************************************************************** 17400030
*                                                                     * 17410000
*        No dsn or tag has been specified (OPT='').                   * 17420030
*        Check for a cursor-driven invocation                         * 17430030
*                                                                     * 17440000
*********************************************************************** 17450030
EDBR700  BAL   R14,CURSOR           <- get dsn at cursor location       17470030
         LTR   R1,R1                   Dsname extracted?                17480030
         BNP   EDBR920                 no, jump                         17490030
         STRING ((R1),(R0)),INTO=OPT                                    17500030
         ST    R15,OPTLEN              update length                    17510030
*---------------------------------------------------------------------* 17530033
*                                                                     * 17540033
*        Check if the dsname contains a relative generation number    * 17550033
*        such as AA.BB(+1) or CC.DD(-2).  If one is found, replace    * 17560033
*        it with .G*V%% and force FUNCTION=W to allow the user to     * 17570033
*        obtain a dslist of all the generations in the catalog.       * 17580033
*                                                                     * 17590033
*---------------------------------------------------------------------* 17600033
         LA    R1,OPT                  START OF DSNAME                  17630033
EDBR721  CLI   0(R1),C'('              member name?                     17640033
         BE    EDBR723                 yes, exit loop                   17650033
         LA    R1,1(,R1)               bump pointer                     17660033
         BCT   R15,EDBR721             next character                   17670033
         B     EDBR729                 exit                             17680033
EDBR723  CLI   1(R1),C'+'              AA.BB.CC(+1) ?                   17690033
         BE    EDBR725                 yes, jump                        17700033
         CLI   1(R1),C'-'              AA.BB.CC(-1) ?                   17710033
         BNE   EDBR729                 no, exit                         17730033
EDBR725  EQU   *                                                        17740049
         CLI   1+1(R1),C'0'            AA.BB.CC(-1) ?                   17750049
         BL    EDBR729                 no, exit                         17760049
         STRING (OPT,(R1)),'.G*V%%',INTO=OPT                            17770049
         ST    R15,OPTLEN              length of new dsname             17780034
         CLI   FUNCTION,C'W'           function=WP ?                    17790033
         BE    EDBR729                 yes, exit                        17800033
         STRING 'Relative Generation',INTO=SHORTMSG                     17810033
&STR   SETC 'because the dsname contains a relative generation number.' 17820033
         STRING 'The ISPF WorkPlace has been invoked instead of ',     X17830033
               (FUNCTION,,T),' &STR',INTO=LONGMSG                       17840033
         MVI   ALARM,C'Y'              error, beep.                     17850033
         BAL   R14,SETMSG           <- send message                     17860033
         MVI   FUNCTION,C'W'           change B/E/V to W                17870033
         MVI   CMDNAME,C'W'            change BR/ED/VI to WP            17880034
         MVI   CMDNAME+1,C'P'          change BR/ED/VI to WP            17890034
EDBR729  EQU   *                                                        17900033
*                                                                       17910034
*        If we have to start a new screen, build new cmd and exit       17920034
*                                                                       17930034
         CLI   PLUSSIGN,C'+'           start new screen?                17940034
         BNE   EDBR749                 no, continue                     17950034
         STRING (CMDNAME,,T),1X,(OPT,,T),INTO=LONGMSG                   17960034
         LA    R14,LONGMSG             FSTSO command ds.name            17970034
         STM   R14,R15,CMD@            update command for NEWSCREEN     17980034
         LA    R1,16                   r1=16: start new screen          17990034
         PR                                                             18000034
EDBR749  EQU   *                                                        18010034
*                                                                       18020000
         CLI   PROF,C' '               profile specified?               18030030
         BNE   EDBR800                 yes, jump                        18040030
         MVC   PROF(3),=C'STD'         no, use default profile          18050030
*********************************************************************** 18060016
*                                                                     * 18070000
*        Direct Edit, Browse and View                                 * 18080018
*                                                                     * 18090000
*          PARM='E,GILBERT.JCL(XYZ),STD'                              * 18100017
*                                                                     * 18110000
*********************************************************************** 18120016
EDBR800  EQU   *                                                        18130016
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 18140016
         BNE   EDBR_ISR                no, switch applid                18150031
*                                                                       18160000
*        Check for a migrated data set (B/E/V/W)                        18170033
*                                                                       18180000
         CLI   BRVOL,0                 volser supplied?                 18200033
         BNE   EDBR815                 yes, skip LISTDSI                18210035
         MVC   ZWRKDSN,OPT             move dsname for LISTDSI          18220033
         BAL   R14,LISTDSI          <- check catalog status             18230033
         LTR   R15,R15                 found in catalog?                18240033
         BNZ   EDBR817                 no, exit                         18250033
         MVC   OPT,ZWRKDSN             true dsname                      18260040
         MVC   BRVOL,CATVOL            volser                           18270040
EDBR815  EQU   *                                                        18290033
         BAL   R14,CHKMIGR          <- check for a migrated data set    18300033
         LTR   R15,R15                 HRECALL denied?                  18310033
         BZ    EDBR817                 no, exit                         18320033
         CLI   FUNCTION,C'W'           FUNCTION=W?                      18330033
         BNE   EDBR998                 no, exit with rc=8               18340034
EDBR817  EQU   *                                                        18350033
*                                                                       18360000
*        delete () at end of dsname if no member has been specified     18370017
*                                                                       18380000
         L     R6,OPTLEN               L'&OPT                           18390030
         LA    R1,OPT-2(R6)            last 2 chars of dsname           18400030
         CLI   0(R1),C'('              GILBERT.JCL()   ?                18410030
         BNE   EDBR818                 NO, JUMP                         18420034
         MVC   0(2,R1),BLANKS          blank out ()                     18430034
         BCTR  R6,0                    yes, delete ()                   18440030
         BCTR  R6,0                    yes, delete ()                   18450030
         ST    R6,OPTLEN               L'&OPT                           18460034
EDBR818  EQU   *                                                        18470034
*                                                                       18480000
         CLI   FUNCTION,C'W'           FUNCTION=W?                      18490030
         BE    EDBR950                 yes, invoke Workplace            18500030
*                                                                       18510036
*        delete (*) at end of dsname if pattern(*) has been specified   18520036
*                                                                       18530036
         LA    R1,OPT-3(R6)            last 3 chars of dsname           18540036
         CLC   =C'(*)',0(R1)           GILBERT.JCL(*)   ?               18550036
         BNE   EDBR822X                NO, JUMP                         18560036
         MVC   0(3,R1),BLANKS          yes, blank out (*)               18570036
         BCTR  R6,0                    yes, delete (*)                  18580036
         BCTR  R6,0                    yes, delete (*)                  18590036
         BCTR  R6,0                    yes, delete (*)                  18600036
         ST    R6,OPTLEN               L'&OPT                           18610036
EDBR822X EQU   *                                                        18620036
*                                                                       18630000
*        Check RACF authorization; change EDIT to VIEW if ACCESS(READ)  18640031
*                                                                       18650000
         STRING (OPT,(R6)),INTO=ZWRKDSN                                 18660031
         BAL   R14,RACHECK          <- check authorization              18670031
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?                18680031
         BH    EDBR827                 ACCESS(UPDATE), jump             18690033
         BL    EDBR890                 ACCESS(NONE), quit               18700037
         CLI   FUNCTION,C'E'           EDIT?                            18710031
         BNE   EDBR827                 no, jump                         18720033
         MVI   FUNCTION,C'V'           EDIT->VIEW if ACCESS(READ)       18730031
EDBR827  EQU   *                                                        18740033
*                                                                       18750000
*        Set up the BROWSE, EDIT or VIEW command                        18760030
*                                                                       18770000
         CLI   FUNCTION,C'B'           BROWSE?                          18780016
         BE    EDBR870                 yes, execute command             18790033
         STRING 'EDIT DATASET(''',(OPT,(R6)),''')',INTO=COMMAND         18800033
         CLI   FUNCTION,C'E'           EDIT?                            18810016
         BE    EDBR855                 yes, jump                        18820018
         CLI   ISPFVM,X'41'            ISPF 4.1 or up?                  18830018
         BL    EDBR855                 no, jump                         18840018
         MVC   COMMAND(4),=C'VIEW'     EDIT->VIEW                       18850016
EDBR855  EQU   *                                                        18860018
         CLI   PROF,C' '               profile specified?               18870016
         BE    EDBR856                 no, jump                         18880030
         STRING (COMMAND,,T),' PROFILE(',(PROF,,T),')',INTO=COMMAND     18890016
EDBR856  EQU   *                                                        18900030
         CLI   BRVOL,C' '              volser available?                18910030
         BNH   EDBR857                 no, jump                         18920030
         STRING (COMMAND,,T),' VOLUME(',(BRVOL,,T),')',INTO=COMMAND     18930033
EDBR857  EQU   *                                                        18940030
         B     EDBR880                 invoke EDIT or VIEW              18950037
*DSN=CORTEX.WRK.NJM.XREF32.AMS2S420.NEWTXT(JOBSET),                     18960038
*                                                                       18970000
*        If PGM(BR) is available, invoke it in case it's a VSAM file.   18980033
*                                                                       18990000
EDBR870  EQU   *                                                        19000033
         CH    R6,=H'44'               long dsname(member) ?            19010037
         BH    EDBR875                 yes, do not try to call BR       19020037
         LA    R1,OPT-1(R6)            last char of dsname              19030037
         CLI   0(R1),C')'              short dsname(member) ?           19040037
         BE    EDBR875                 yes, do not try to call BR       19050037
         MVC   NEWPGM,=CL8'BR'         VSAM BROWSE PGM                  19060030
         LA    R1,NEWPGM               VSAM BROWSE PGM                  19070030
         BAL   R14,JPASEARCH        <- Check for PGM(BR)                19080030
         LTR   R15,R15                 PGM(BR) available?               19090030
         BNZ   EDBR875                 no, use BROWSE service           19100033
         MVC   OPT2,OPT                fully-qualified dsname           19110033
         STRING (OPT2,,T),',',BRVOL,INTO=OPT for BR command             19120033
         B     EDBR980                 invoke PGM(BR) PARM(&dsn,&vol)   19130033
*                                                                       19140000
*        If PGM(BR) is not available, use the BROWSE service.           19150033
*                                                                       19160000
EDBR875  EQU   *                                                        19170033
         STRING 'BROWSE DATASET(''',(OPT,(R6)),''')',INTO=COMMAND       19180033
         CLI   BRVOL,C' '              volser available?                19190033
         BNH   EDBR876                 no, jump                         19200033
         STRING (COMMAND,,T),' VOLUME(',(BRVOL,,T),')',INTO=COMMAND     19210033
EDBR876  EQU   *                                                        19220033
*                                                                       19240037
*        Invoke the BROWSE, EDIT or VIEW service.                       19250037
*                                                                       19260037
EDBR880  LA    R15,L'COMMAND           length of command                19270037
         BAL   R14,ISPEXEC          <- execute command                  19280037
         LTR   R7,R15                  DIALOG'S RETURN CODE             19290037
         BZ    EDBR907                 zero, jump                       19300037
         B     EDBR990                 error, exit with rc=(r7)         19310037
*                                                                       19320000
EDBR890  EQU   *                                                        19330037
         ISPLINK ($SETMSG,=C'ISPG132 ') Authorization Failed            19340031
         LA    R15,12                  DIALOG'S RETURN CODE             19350031
         B     EDBR990                 exit                             19360031
*********************************************************************** 19370030
*                                                                     * 19380030
*        Process a workstation file (EDIT/VIEW only)                  * 19390031
*                                                                     * 19400030
*********************************************************************** 19410030
EDBR900  CLI   FUNCTION,C'B'           BROWSE?                          19420030
         BE    EDBR909                 yes, error                       19430030
         CLI   FUNCTION,C'W'           FUNCTION=W?                      19440030
         BE    EDBR909                 yes, error                       19450030
         L     R6,OPTLEN               L'&OPT                           19460030
         ISPLINK ($VREPLACE,=C'WSFN ',OPTLEN,OPT)                       19470030
         STRING 'EDIT WSFN(WSFN) PROFILE(WS)',INTO=COMMAND              19480030
         CLI   FUNCTION,C'E'           EDIT?                            19490030
         BE    EDBR905                 yes, jump                        19500030
         MVC   COMMAND(4),=C'VIEW'     EDIT->VIEW                       19510030
EDBR905  LA    R15,L'COMMAND           length of command                19520030
         BAL   R14,ISPEXEC          <- execute command                  19530030
         LTR   R7,R15                  Check EDIT/VIEW return code      19540030
         BNZ   EDBR990                 non-zero, exit                   19550031
*                                                                       19560000
*        If EDIT returns RC=0, display "file saved" message             19570030
*                                                                       19580000
EDBR907  EQU   *                                                        19590030
         CLI   FUNCTION,C'E'           EDIT?                            19600030
         BNE   EDBR990                 NO, EXIT                         19610031
         STRING 'File Saved',INTO=SHORTMSG                              19620030
         STRING (OPT,(R6)),' has been saved',INTO=LONGMSG               19630030
         BAL   R14,SETMSG           <- send message                     19640030
         LR    R15,R7                  DIALOG'S RETURN CODE             19650030
         B     EDBR990                 exit                             19660031
*                                                                       19670000
EDBR909  STRING 'Not Supported',INTO=SHORTMSG                           19680030
         STRING 'This Service does not support Work-station Files.',   X19690030
               INTO=LONGMSG                                             19700030
         MVI   ALARM,C'Y'              error, beep.                     19710030
         BAL   R14,SETMSG           <- send message                     19720030
         B     EDBR998                 quit with RC=8                   19730031
*********************************************************************** 19740030
*                                                                     * 19750000
*        Not a cursor-driven invocation                               * 19760030
*        XCTL to ISREDIT/ISRBRO/ISRUDA directly                       * 19770030
*                                                                     * 19780000
*********************************************************************** 19790030
EDBR920  CLI   PLUSSIGN,C'+'           start new screen?                19800034
         BE    EDBR9816                yes, do it                       19810034
         CLI   FUNCTION,C'W'           FUNCTION=W?                      19820034
         BE    EDBR960                 invoke ISPF service              19830030
         MVC   NEWPGM,$ISREDIT         EDIT PGM                         19840030
         MVC   OPT(10),=C'P,ISREDM01'  EDIT PARM                        19850030
         CLI   FUNCTION,C'E'           FUNCTION=E?                      19860030
         BE    EDBR980                 invoke ISPF service              19870031
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 19880030
         BNE   EDBR_ISR                no, jump                         19890031
         MVC   NEWPGM,$ISRBRO          BROWSE PGM                       19900030
         MVC   OPT(10),=C'ISRBRO01  '  BROWSE PARM                      19910030
         BAL   R14,ZVIEW00          <- set ZVIEW to YES/NO for VI/BR    19920030
         ISPLINK ($VREPLACE,=C'ZVIEW ',=F'3',ZVIEW)                     19930030
         ISPLINK ($VPUT,=C'ZVIEW ',$PROFILE)                            19940030
         B     EDBR980                 invoke ISPF service              19950031
*********************************************************************** 19960030
*                                                                     * 19970000
*        Invoke the Work-place                                        * 19980030
*                                                                     * 19990000
*********************************************************************** 20000030
EDBR950  STRING '''',(OPT,,T),INTO=ZWRKDSN                              20010033
         ST    R15,DWD                 length of dsname                 20020030
         ISPLINK ($VREPLACE,=C'ZWRKDSN ',DWD,ZWRKDSN)                   20030030
         ISPLINK ($VREPLACE,=C'ZWRKVOL ',=F'6',BRVOL)   Volser          20040033
         ISPLINK ($VREPLACE,=C'ZREFTYPE ',=F'1',=C'D')  view=dataset    20050033
         LA    R1,=A($VPUT,VARLISTW,$PROFILE+VL)                        20060034
         LINK  SF=(E,ISPLINK$)         VPUT (&VARLISTW) PROFILE         20070034
EDBR960  MVC   NEWPGM,$ISRUDA          Work-place                       20080030
         STRING 'ISRWORK',INTO=OPT     WP PARM                          20090030
EDBR980  EQU   *                                                        20100031
         LA    R1,0                    invoke ISPF service              20110031
         PR                                                             20120031
EDBR990  EQU   *                       rc=(15)                          20130031
         LA    R1,4                    exit                             20140031
         PR                                                             20150031
EDBR994  LA    R15,4                   rc=4                             20160033
         LA    R1,4                    exit                             20170031
         PR                                                             20180031
EDBR998  LA    R15,8                   rc=8                             20190033
         LA    R1,4                    exit                             20200031
         PR                                                             20210031
EDBR_ISR EQU   *                                                        20220031
         LA    R1,8                    R1=8:switch to APPL=ISR          20230033
         PR                                                             20240031
EDBR_SVC LA    R1,12                   R1=12: other ISPF service        20250033
         PR                                                             20260033
EDBR9816 EQU   *                                                        20270034
**       STRING 'FSTSO ',((R7),(R8)),INTO=LONGMSG                       20300034
**       LA    R14,LONGMSG             FSTSO command ds.name            20310034
**       STM   R14,R15,CMD@            update command for NEWSCREEN     20320034
         LA    R1,16                   r1=16: start new screen          20350034
         PR                                                             20360034
*********************************************************************** 20370000
*                                                                     * 20380000
*        Update the EDBRnnnn profile variable                         * 20390000
*                                                                     * 20400000
*          1.  retrieve the values the user has entered on the        * 20410000
*              EDIT/BROWSE panel or, if FUNCTION=WP, retrieve the     * 20420031
*              variables for the current view (data set or Library)   * 20430031
*                                                                     * 20440000
*          2.  compare with the previous values in STRING1;           * 20450000
*              if different, issue VREPLACE/VPUT                      * 20460017
*                                                                     * 20470000
*********************************************************************** 20480000
VPUT00   BAKR  R14,0                   save return address              20490001
         CLI   FUNCTION,C'W'           FUNCTION=W?                      20500031
         BNE   VPUT26                  no, jump                         20510031
         LA    R1,=A($VGET,VARLISTW+1+VL)                               20520031
         LINK  SF=(E,ISPLINK$)         VGET (ZREFTYPE)                  20530031
         CLI   ZREFTYPE,C'L'           VIEW=LIBRARY ?                   20540031
         BE    VPUT26                  yes, handle like EDIT            20550031
         LA    R1,=A($VGET,VARLISTW+VL)                                 20560031
         LINK  SF=(E,ISPLINK$)         VGET (&VARLISTW)                 20570031
         OC    ZREFTYPE(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN),BLANKS          20630034
         B     VPUT28                                                   20640031
VPUT26   EQU   *                                                        20650031
         LA    R1,=A($VGET,VARLIST+VL)                                  20660000
         LINK  SF=(E,ISPLINK$)         VGET (&VARLIST)                  20670021
VPUT28   EQU   *                                                        20680031
         STRING (OPT,,T),',',(PRJ1,,T),',',(LIB1,,T),',',(LIB2,,T),',',X20690000
               (LIB3,,T),',',(LIB4,,T),',',(TYP1,,T),',',(PROF,,T),',',X20700000
               (MIX,,T),',',(FNAM,,T),',',(ZEDLOCK,,T),',',            X20710004
               (ZEDLOCKP,,T),',',(ZPCFMCN,,T),',',(ZVIEW,,T),',',      X20720004
               (ZVIMAC,,T),',',(ZVPROF,,T),',',                        X20730004
               (ZREFTYPE,,T),',',(ZWRKVOL,,T),',',(ZWRKDSN,,T),',',    X20740008
               (ZEDITWS,,T),',',(ZVIEWWS,,T),',', view/edit 4.2        X20750025
               INTO=LONGMSG                                             20760030
         ST    R15,DWD                 length                           20770000
         CLC   STRING1,LONGMSG         any variable changed?            20780030
         BE    VPUT99                  no, exit                         20790000
         ISPLINK ($VREPLACE,EDBRNNNN,DWD,LONGMSG)                       20800030
         ISPLINK ($VPUT,EDBRNNNN,$PROFILE)                              20810000
VPUT99   PR                            return                           20820001
VARLIST  DC    C'(PRJ1 LIB1 LIB2 LIB3 LIB4 TYP1 PROF MIX FNAM ZEDLOCK  X20830031
               ZEDLOCKP ZPCFMCN ZVIEW ZVIMAC ZVPROF ZEDITWS ZVIEWWS)'   20840031
VARLISTW DC    C'(ZREFTYPE ZWRKVOL ZWRKDSN)' Work-place                 20850031
*********************************************************************** 20860000
*                                                                     * 20870000
*        Set ZVIEW to YES/NO for VIEW/BROWSE                          * 20880004
*                                                                     * 20890000
*********************************************************************** 20900000
ZVIEW00  CLI   FUNCTION,C'B'           FUNCTION=BROWSE?                 20910004
         BNE   *+10                    no, jump                         20920004
         MVC   ZVIEW(3),=C'NO '        yes, set ZVIEW=NO                20930004
         CLI   FUNCTION,C'V'           FUNCTION=VIEW?                   20940004
         BNER  R14                     no, goback                       20950004
         MVC   ZVIEW(3),=C'YES'        yes, set ZVIEW=YES               20960004
         BR    R14                     goback                           20970004
*********************************************************************** 20980000
*                                                                     * 20990000
*        Function=LOAD (preload a REUS module)                        * 21000030
*                                                                     * 21010000
*********************************************************************** 21020000
LOAD00   BEGIN_PROC OPT=YES                                             21030031
         ICM   R2,B'1111',LLIBDCB      LIBDEF ISPLLIB DCB               21040031
         BZ    LOAD11                  no LIBDEF DCB                    21050031
         LOAD  EPLOC=OPT8,DCB=(R2),ERRET=LOAD11 check for S806-04       21070031
         B     LOAD12                                                   21090031
LOAD11   LOAD  EPLOC=OPT8,ERRET=LOAD20 check for S806-04                21100031
LOAD12   CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +21120031
               INEPNAME=OPT8,          EP name                         +21130030
               OUTATTR1=ATTR1,         CDATTR                          +21140030
               OUTLOADPT=LOADLEN,      load-point                      +21150031
               OUTLENGTH=LOADLEN+4,    length                          +21160031
               MF=(E,CSVQRYWK)         WORK AREA                        21180030
         TM    ATTR1,CDSER             REUS module?                     21190030
         BZ    LOAD30                  no, quit                         21200030
         LA    R1,LOAD75               address of the LOAD routine      21210030
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC                21220030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              21230030
         BAL   R14,EXECURP          <- Execute LOAD75 as a URP          21240030
         DELETE EPLOC=OPT8             delete at ISPTASK level          21250030
         STRING (OPT8,,T),' loaded',INTO=SHORTMSG                       21260030
         STRING 'Module ',(OPT8,,T),                                   X21270031
               ' loaded at address ',(LOADLEN,,X),                     X21280031
               ', length ',(LOADLEN+5,3,X),'.',                        X21290031
               INTO=LONGMSG                                             21320030
         B     LOAD49                  send message, set r15=0          21330031
*                                                                       21340000
*        Module not found (S806-04)                                     21350031
*                                                                       21360000
LOAD20   LR    R0,R15                  reason code                      21370031
         STRING ((R1),,X),((R0),,X),INTO=STRING1     00000806,00000004  21380031
         STRING 'Module not loaded',INTO=SHORTMSG                       21390031
         STRING 'Module ',(OPT8,,T),' was not loaded, abend S',        X21400031
               (STRING1+5,3),'-',(STRING1+14,2),                       X21410031
               INTO=LONGMSG                                             21430031
         B     LOAD48                  issue message, exit rc=8         21440031
*                                                                       21450000
*        Module is NOREUS                                               21460030
*                                                                       21470000
LOAD30   DELETE EPLOC=OPT8             delete at ISPTASK level          21480030
         STRING 'Not reusable',INTO=SHORTMSG                            21490030
         STRING 'Module ',(OPT8,,T),' is not reusable.',               X21500030
               INTO=LONGMSG                                             21510030
*                                                                       21520000
LOAD48   EQU   *                                                        21530031
         MVI   ALARM,C'Y'              error, beep.                     21540030
LOAD49   EQU   *                                                        21550031
         BAL   R14,SETMSG           <- send message, set r15            21560031
*                                                                       21570000
LOAD50   LA    R1,4                    r1=4: exit                       21580031
         PR                                                             21590031
*                                                                       21600000
*        This code executes as a URP                                    21610031
*                                                                       21620000
         PUSH  USING                                                    21630030
         DROP                                                           21640030
LOAD75   BAKR  R14,0                   save regs                        21650030
         L     R10,4(,R1)              A(DYNAM)                         21660030
         L     R10,0(,R10)             A(DYNAM)                         21670030
         USING DYNAM,R10                                                21680030
         LOAD  EPLOC=OPT8              load at TMP level                21690030
         PR                                                             21700030
         POP   USING                                                    21710030
*********************************************************************** 21720015
*                                                                     * 21730000
*        Function=(MACLIB,&member,&profile)                           * 21740033
*                                                                     * 21750000
*            ALLOC DD($$MACLIB) DS('SYS1.MACLIB' 'SYS1.MODGEN') SHR   * 21760015
*            LMINIT DATAID(ID1) DDN($$MACLIB) ENQ(SHRW)               * 21770015
*            VIEW DATAID(&ID1) MEMBER(&OPT) PROFILE(STD)              * 21780015
*            LMFREE DATAID(ID1)                                       * 21790015
*                                                                     * 21800000
*        Check for the existence of additional macro libraries        * 21810019
*        based on the dsname table.                                   * 21820019
*                                                                     * 21830000
*********************************************************************** 21840015
MACLIB   BEGIN_PROC APPL=ISR                                            21850031
         BAL   R14,PARSE3           <- parse options                    21860033
         BAL   R3,MACLIB10          <- branch around dsname table       21870031
         DC    CL8'$$MACLIB'           DDNAME                           21880044
         DC    CL8'MACLIB'             Name of default profile          21890044
         DC    AL1(11),C'SYS1.MACLIB'                                   21900031
         DC    AL1(11),C'SYS1.MODGEN'                                   21910031
         DC    AL1(14),C'TCPIP.SEZACMAC'                                21920031
         DC    AL1(12),C'SYS1.PVTMACS'                                  21940031
         DC    AL1(11),C'CEE.SCEEMAC'                                   21950031
         DC    AL1(12),C'SYS1.AMODGEN'                                  21960031
         DC    AL1(12),C'SYS1.AMACLIB'                                  21970031
         DC    X'FF',0H'0'             end of table                     21990031
*                                                                       22000000
*        Function=(PROCLIB,&member,&profile)                            22010044
*                                                                       22020044
PROCLIB  BEGIN_PROC APPL=ISR                                            22030044
         BAL   R14,PARSE3           <- parse options                    22040044
         BAL   R3,MACLIB10             branch around dsname table       22050031
         DC    CL8'$PROCLIB'           DDNAME                           22060044
         DC    CL8'PROCLIB'            Name of default profile          22070044
         DC    AL1(12),C'SYS1.PROCLIB'                                  22080044
         DC    X'FF',0H'0'             end of table                     22090044
*                                                                       22100000
MACLIB10 EQU   *                                                        22110044
         BALR  R12,0                   local base register              22120000
         USING *,R12                                                    22130000
         MVC   MACLIBDD,0(R3)          MOVE DDNAME                      22140044
         MVC   VIEWEDIT,=C'VIEW'       USE VIEW FOR MACLIB              22150023
         CLI   PARM3,C' '              profile specified?               22160033
         BNE   *+10                    yes, jump                        22170033
         MVC   PARM3,8(R3)             no, use default profile          22180044
         DEVTYPE MACLIBDD,DWD                                           22190023
         LTR   R15,R15                 ALREADY ALLOCATED?               22200015
         BZ    MACLIB20                YES, JUMP                        22210015
         LA    R3,8+8(,R3)             skip DDN & PROF                  22220044
         SLR   R4,R4                   init length                      22230044
         SLR   R5,R5                   init dsn count                   22240031
         STRING BLANKS,INTO=STRING1    init work area                   22250031
*LOOP                                                                   22260031
MACLIB11 IC    R4,0(,R3)               length of dsname                 22270031
         STRING (1(R3),(R4)),INTO=ZWRKDSN expand dsn to 44 chars        22280031
         CLI   1(R3),C'.'              .PVTMACS ?                       22290031
         BNE   MACLIB12                no, jump                         22300031
         STRING (ZUSER,,T),(1(R3),(R4)),INTO=ZWRKDSN                    22310031
MACLIB12 XC    CATVOL,CATVOL           force LISTDSI to issue LOCATE    22320033
         BAL   R14,LISTDSI          <- check existence of PVTMACS       22330033
         LTR   R15,R15                 RC=0 from LOCATE?                22340019
         BNZ   MACLIB18                no, ignore                       22350031
         BAL   R14,RACHECK          <- check authorization              22360031
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?                22370031
         BL    MACLIB18                no, ignore                       22380031
         STRING (STRING1,,T),' ''',(ZWRKDSN,,T),'''',INTO=STRING1       22390031
         LA    R5,1(,R5)               count libraries                  22400031
         CH    R5,=H'4'                ISPF maximum reached?            22410031
         BE    MACLIB20                yes, exit                        22420031
MACLIB18 LA    R3,1(R4,R3)             next dsname                      22430031
         CLI   0(R3),X'FF'             end of table?                    22440031
         BNE   MACLIB11                no, try next dsname              22450031
*ENDLOOP                                                                22460031
MACLIB20 EQU   *                                                        22470015
         LTR   R5,R5                   any library selected?            22480034
         BZ    MACLIB98                no, exit                         22490034
         BAL   R14,LMVIEW           <- VIEW/BROWSE                      22500031
         LA    R1,4                    exit with rc=(15)                22510031
         PR                                                             22520031
*                                                                       22530000
*        User doesn't have READ access to SYS1.MACLIB                   22540034
*                                                                       22550000
MACLIB98 MVI   ALARM,C'Y'              error, beep.                     22560034
         BAL   R14,SETMSG           <- send message, set r15=8          22570034
         LA    R1,4                    exit with rc=(15)                22580034
         PR                                                             22590034
*********************************************************************** 22600030
*                                                                     * 22610030
*        Function=NETSTAT (full-screen NETSTAT)                       * 22620030
*                                                                     * 22630030
*          "NETSTAT STACK" opt                                        * 22640030
*          PUSH;DO i=1 TO QUEUED();PARSE PULL l.i;END;l.i=""          * 22650030
*          CALL STEMDISP "BROWSE","L.",,i,"NETSTAT" opt               * 22660030
*                                                                     * 22670037
*        Note: as of OS/390 R5, the NETSTAT command is authorized and * 22680037
*        this will no longer work (see PQ23072).  Use FSTSO NETSTAT   * 22690037
*        instead, or change the definition of the command to:         * 22700037
*                                                                     * 22710037
*          ACT='SELECT PGM(FASTPATH) PARM(FSTSO,NETSTAT &&ZPARM)',    * 22720037
*                                                                     * 22730030
*********************************************************************** 22740030
NETSTAT  BEGIN_PROC                                                     22750031
         L     R1,CVTPTR(0,0)          CVT address                      22760030
         L     R2,CVTECVT-CVTMAP(,R1)  ECVT address                     22770030
         ICM   R0,B'1111',ECVTTCP-ECVT(R2) TCP/IP 3.2 or above?         22780030
         BZ    NETSTAT8                no, exit                         22790030
         CLC   ZAPPLID,NEWAPPL         Current APPL OK?                 22800030
         BNE   NETSTAT7                no, switch applid                22810030
         TM    CVTOSLV2-CVTMAP(R1),CVTH6605 OS/390 R5 ?                 22820041
         BO    NETSTAT5                yes, jump                        22830041
         STRING '"NETSTAT STACK ',(OPT,,T),'";cc=rc;PUSH;',            X22840030
               'DO i=1 TO QUEUED();PARSE PULL l.i;END;l.i="";',        X22850030
               'CALL STEMDISP "BROWSE","l.",,i,"NETSTAT ',(OPT,,T),    X22860030
               '";EXIT cc',                                            X22870030
               INTO=STRING1                                             22880030
         B     NETSTAT6                                                 22890041
NETSTAT5 EQU   *                       CS IP Stack - OS/390 R5 and up   22900041
         STRING 'rc=OUTTRAP("L.");',                                   X22910041
               '"NETSTAT ',(OPT,,T),'";',                              X22920041
               'cc=rc;',                                               X22930041
               'rc=OUTTRAP("OFF");',                                   X22940041
               'CALL STEMDISP "BROWSE","L.",,,"',                      X22950041
               'NETSTAT ',(OPT,,T),'";',                               X22960041
               'EXIT cc',                                              X22970041
               INTO=STRING1                                             22980041
NETSTAT6 EQU   *                                                        22990041
         LA    R14,STRING1             addr of REXX stmt                23000030
         STM   R14,R15,DWD             store addr/len                   23010030
         LA    R1,DWD                  FIRST STMT ADDR/LEN              23020030
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         23030030
         SLR   R2,R2                   No arguments                     23040030
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              23050031
         B     NETSTAT9                exit                             23060031
NETSTAT7 EQU   *                                                        23070031
         LA    R1,8                    switch to APPL=ISR               23080031
         PR                                                             23090031
NETSTAT8 STRING 'Not Available',INTO=SHORTMSG                           23100030
         STRING 'TCP/IP is not installed on this system.',             X23110030
               INTO=LONGMSG                                             23120030
         MVI   ALARM,C'Y'              error, beep.                     23130030
         BAL   R14,SETMSG           <- send message, set r15            23140031
NETSTAT9 EQU   *                                                        23150031
         LA    R1,4                    exit with rc=(15)                23160031
         PR                                                             23170031
*********************************************************************** 23180031
*                                                                     * 23190031
*        Function=OPENCMDS (open user/site cmd table)                 * 23200031
*                                                                     * 23210031
*              OPENCMDS,USERCMDS,U,AFTER                              * 23220031
*              OPENCMDS,SITECMDS,L                                    * 23230031
*                                                                     * 23240031
*********************************************************************** 23250031
OPENCMDS BEGIN_PROC LVL=42                                              23260031
         L     R4,TSI@                 R4->TSI                          23270031
         USING TSI,R4                                                   23280031
         MVC   LIB2,TSILCTAB           name of current table (local)    23290031
         CLI   PARM3,C'U'              User table?                      23300031
         BNE   *+10                    no, jump                         23310031
         MVC   LIB2,TSIUCTAB           name of current table (user)     23320031
*                                                                       23330000
         CLC   OPT8,BLANKS             any new table name?              23340031
         BE    OPENCMD4                no, exit                         23350031
         SLR   R15,R15                 force rc=0                       23360031
         CLC   OPT8,LIB2               same table?                      23370031
         BE    OPENCMD9                yes, exit                        23380031
*                                                                       23390000
*        Open new table to make sure it exists                          23400031
*                                                                       23410000
         STRING 'TBOPEN ',OPT8,' SHARE NOWRITE',INTO=COMMAND            23420031
         BAL   R14,ISPEXEC          <- open new table                   23430031
         LTR   R15,R15                 TBOPEN OK?                       23440031
         BZ    OPENCMD2                no, exit                         23460031
*                                                                       23470000
*        new table does not exist, display an error message             23480031
*                                                                       23490000
         CH    R15,=H'8'               zerrmsg set?                     23500031
         BH    OPENCMD9                yes, exit                        23510031
         STRING (OPT8,,T),' not found',INTO=SHORTMSG                    23520031
         STRING (OPT8,,T),' command table could not be opened',        X23530031
               INTO=LONGMSG                                             23540031
         MVI   ALARM,C'Y'              error, beep.                     23550031
         BAL   R14,SETMSG           <- send message                     23560031
         B     OPENCMD9                exit                             23570031
*                                                                       23580000
OPENCMD2 EQU   *                                                        23590031
         STRING (OPT8,,T),' open',INTO=SHORTMSG                         23600031
         STRING 'Local command table ',(OPT8,,T),' is now open.',      X23610031
               INTO=LONGMSG                                             23620031
         BAL   R14,SETMSG           <- send message                     23630031
*                                                                       23640000
OPENCMD4 EQU   *                                                        23650031
         CLC   LIB2,BLANKS             any old table name?              23660031
         BE    OPENCMD6                no, jump                         23670031
         STRING 'TBCLOSE ',LIB2,INTO=COMMAND                            23680031
         BAL   R14,ISPEXEC          <- close current table, if any      23690031
         LTR   R15,R15                 TBCLOSE OK?                      23700031
         BNZ   OPENCMD8                no, jump                         23720031
         CLC   OPT8,BLANKS             any new table name?              23730031
         BNE   OPENCMD6                yes, update TSI                  23740031
         STRING (LIB2,,T),' closed',INTO=SHORTMSG                       23750031
         STRING 'Local command table ',(LIB2,,T),' is now closed.',    X23760031
               INTO=LONGMSG                                             23770031
         BAL   R14,SETMSG           <- send message                     23780031
*                                                                       23790000
*        Store new cmd table name into TSIxCTAB field                   23800031
*                                                                       23810000
OPENCMD6 SLR   R15,R15                 force rc=0                       23820031
         MVC   TSILCTAB,OPT8           new table name (local)           23830031
         CLI   PARM3,C'U'              User table?                      23840031
         BNE   OPENCMD9                no, jump                         23850031
         MVC   TSIUCTAB,OPT8           new table name (user)            23860031
*AFTER   NI    TSIUCTAB,255-8          reset AFTER flag                 23870031
         CLI   PARM4,C'A'              User table AFTER ISP table?      23880031
         BNE   OPENCMD9                no, jump                         23890031
*AFTER   OI    TSIUCTAB,8              yes, set AFTER flag              23900031
         B     OPENCMD9                exit                             23910031
*                                                                       23920000
*        Close new table when we couldn't close the old one             23930031
*                                                                       23940000
OPENCMD8 CLC   OPT8,BLANKS             any new table name?              23950031
         BNE   OPENCMD9                yes, update TSI                  23960031
         STRING 'TBCLOSE ',OPT8,INTO=COMMAND                            23970031
         BAL   R14,ISPEXEC          <- close current table, if any      23980031
*                                                                       23990000
OPENCMD9 EQU   *                                                        24000031
         LA    R1,4                    exit with rc=(15)                24010031
         PR                                                             24020031
         DROP  R4                      TSI                              24030031
*********************************************************************** 24040023
*                                                                     * 24050000
*        Function=(PARMLIB,&member,&profile,&view)                    * 24060033
*                                                                     * 24070000
*        In OS/390 R2 and above, issue IEFPRMLB REQUEST=ALLOCATE      * 24080023
*        to access the PARMLIB concatenation.  Otherwise, use:        * 24090023
*                                                                     * 24100000
*            ALLOC DD($PARMLIB) DS('SYS1.PARMLIB') SHR                * 24110023
*                                                                     * 24120000
*********************************************************************** 24130023
         CVT DSECT=YES,LIST=NO         Define CVT for PARMLIB function  24140031
PARMLIB  BEGIN_PROC APPL=ISR                                            24150031
         BAL   R14,PARSE3           <- parse options                    24160033
         CLI   PARM3,C' '              profile specified?               24170033
         BNE   *+10                    yes, jump                        24180033
         MVC   PARM3,=CL8'PARMLIB'     no, use default profile          24190033
         MVC   MACLIBDD,=CL8'$PARMLIB' MOVE DDNAME                      24200023
         MVC   VIEWEDIT,=C'VIEW'       USE VIEW FOR PARMLIB             24210029
         STRING 'SYS1.PARMLIB',INTO=ZWRKDSN                             24220029
         BAL   R14,RACHECK          <- check authorization              24230031
         CLI   RACHECK_ACCESS,ACCESS_READ ACCESS(READ) ?                24240031
         BL    PARMLIB8                no, error                        24250031
         CLI   RACHECK_ACCESS,ACCESS_UPDATE ACCESS(UPDATE) ?            24260031
         BL    PARMLIB2                NO, USE VIEW                     24270031
         CLI   PARM4,C'V'              PARM=(,,,VIEW) ?                 24280033
         BE    PARMLIB2                YES, USE VIEW                    24290033
         MVC   VIEWEDIT,=C'EDIT'       YES, USE EDIT                    24300031
PARMLIB2 EQU   *                                                        24310029
         DEVTYPE MACLIBDD,DWD          Prevent IEF761I                  24320023
         LTR   R15,R15                 ALREADY ALLOCATED?               24330023
         BZ    PARMLIB6                YES, JUMP                        24340031
         AIF   (NOT D'CVTPARMC).PARMLIB5                                24350023
         L     R1,CVTPTR(0,0)          CVT address                      24370023
         TM    CVTOSLV1-CVTMAP(R1),CVTPARMC OS/390 R2?                  24380023
         BNO   PARMLIB5                no, jump                         24390023
         IEFPRMLB REQUEST=ALLOCATE,                                    X24400023
               ALLOCDDNAME=MACLIBDD,                                   X24410023
               CALLERNAME=OWNNAME,                                     X24420023
               MF=(E,STRING1,COMPLETE)                                  24430023
         CH    R15,=H'4'               ALLOCATED?                       24440023
         BNH   PARMLIB6                YES, JUMP                        24450031
PARMLIB5 EQU   *                                                        24460023
.PARMLIB5 ANOP                                                          24470023
         STRING '''SYS1.PARMLIB''',INTO=STRING1                         24480031
PARMLIB6 EQU   *                                                        24490031
         BAL   R14,LMVIEW           <- VIEW/BROWSE                      24500031
         LA    R1,4                    exit with rc=(15)                24510031
         PR                                                             24520031
*                                                                       24530000
PARMLIB8 MVI   ALARM,C'Y'              error, beep.                     24540031
         BAL   R14,SETMSG           <- send message, set r15=8          24550031
         LA    R1,4                    exit with rc=(15)                24560031
         PR                                                             24570031
*                                                                       24580044
         AIF   (D'CVTH6605).CVT2                                        24590044
CVTH6605 EQU   X'40'         OS/390 R5                             @MFA 24600044
.CVT2    ANOP                                                           24610044
*********************************************************************** 24620030
*                                                                     * 24630030
*        Function=REXXTRY                                             * 24640030
*                                                                     * 24650030
*              PARM='REXXTRY,SAY DATE(,98222,J)'                      * 24660030
*                                                                     * 24670000
*********************************************************************** 24680030
REXXTRY  BEGIN_PROC OPT=YES                                             24690031
         LA    R1,OPTADDR              FIRST STMT ADDR/LEN              24700031
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         24710030
         SLR   R2,R2                   No arguments                     24720030
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              24730031
         LTR   R15,R15                 return code from IRXEXEC         24740031
         BNZ   REXXT50                 error, exit                      24750030
         LTR   R1,R1                   any value returned?              24760030
         BNP   REXXT50                 error, exit                      24770030
         STRING 'RC=',((R1),,L),INTO=SHORTMSG                           24780030
         STRING 'The EXEC ended with return-code ',((R1),,L),          X24790030
               INTO=LONGMSG                                             24800030
         BAL   R14,SETMSG           <- send message                     24810030
*                                                                       24820000
REXXT50  LA    R1,4                    r1=4: exit rc=(15)               24830031
         PR                                                             24840031
*********************************************************************** 24850019
*                                                                     * 24860000
*        Function=SYSID (ISPF 4.2 or up)                              * 24870000
*                                                                     * 24880000
*        The SYSID function uses SCRNAME to permanently display the   * 24890030
*        SMF system-id in the upper left-hand corner of the screen.   * 24900030
*                                                                     * 24910000
*        I learned the trick from Henrik Salminen who posted his      * 24920019
*        THSCRNAM EXEC on the ISPF Cforum on TALKLINK.                * 24930019
*                                                                     * 24940000
*********************************************************************** 24950019
SYSID    BEGIN_PROC LVL=42                                              24960031
         STRING 'SCRNAME OFF',INTO=COMMAND                              24970030
         CLC   =C'OFF ',OPT8           SYSID OFF ?                      24980029
         BE    SYSIDCMD                yes, jump                        24990019
         L     R1,CVTPTR(0,0)          CVT address                      25000019
         L     R4,CVTSMCA-CVTMAP(,R1)  SMCA ADDRESS                     25010019
         USING SMCABASE,R4                                              25020019
         STRING 'PANELID OFF',ZDEL,'SCRNAME ON',ZDEL,                  X25030031
               'SCRNAME ',(SMCASID,,T),'$',ZSCREEN,' PERM',            X25040031
               INTO=COMMAND                                             25050031
         DROP  R4                      was SMCA                         25060029
SYSIDCMD EQU   *                                                        25070019
         ST    R15,DWD                 store length                     25080019
         ISPLINK ($VREPLACE,=C'CMD ',DWD,COMMAND)                       25090030
         STRING 'DISPLAY PANEL(ISPSTRTP) COMMAND(CMD)',INTO=COMMAND     25100019
         BAL   R14,ISPEXEC          <- execute command                  25110031
         LA    R1,4                    r1=4: exit rc=(15)               25120031
         PR                                                             25130031
*********************************************************************** 25140018
*                                                                     * 25150000
*        Function=TIME                                                * 25160018
*                                                                     * 25170000
*        The TIME function displays the time and date in a short      * 25180019
*        message, and the Julian date in the long message.            * 25190019
*                                                                     * 25200000
*********************************************************************** 25210018
TIME     BEGIN_PROC                                                     25220031
         TIME  DEC                                                      25230018
         STM   R0,R1,TENWORDS          HHMMSSHH 0CYYDDDF                25240018
         STRING (TENWORDS+4,P,YYYY-MM-DD),1X,                          X25250018
               (TENWORDS+0,1,X),':',   HH:                             X25260048
               (TENWORDS+1,1,X),':',   HH:MM:                          X25270048
               (TENWORDS+2,1,X),       HH:MM:SS                        X25280048
               INTO=SHORTMSG                                            25290018
         L     R15,=V(JUL2DAYS)        julian-days calc rtne            25300018
         BALR  R14,R15              <- calc num of days since 1901.001  25310018
         LR    R6,R1                   POINT TO DAY-OF-THE-WEEK         25320018
         PACK  DWD,SHORTMSG+5(2)       MM                               25330018
         CVB   R1,DWD                  R1=MM                            25340018
         MH    R1,=H'3'                mult by 3                        25350018
         LA    R7,MONTHTBL-3(R1)       point at month name              25360018
*                                                                       25370048
*        Timezone: E 02.00.00 (from CVTTZ/CLOCKxx)                      25380048
*                                                                       25390048
         MVI   DWD,C'E'                east                             25400048
         L     R1,CVTPTR(0,0)          point to CVT                     25410048
         ICM   R1,B'1111',CVTTZ-CVTMAP(R1) diff between local and GMT   25420048
         BP    *+8                     positive difference              25430048
         MVI   DWD,C'W'                negative (or zero)               25440048
         SLR   R0,R0                                                    25450048
         LPR   R1,R1                   negative (or zero)               25460048
         SLDL  R0,20                   mult by 1048576                  25470048
         D     R0,=F'10000'            difference in 1/100th of a sec.  25480048
         SLR   R0,R0                                                    25490048
         D     R0,=F'00360000'         GET HOURS                        25500048
         LR    R3,R1                   HH                               25510048
         LR    R1,R0                   REMAINDER                        25520048
         SLR   R0,R0                                                    25530048
         D     R0,=F'6000'             GET MINUTES IN R1                25540048
         LR    R2,R1                   MM                               25550048
         LR    R1,R0                   REMAINDER                        25560048
         SLR   R0,R0                                                    25570048
         D     R0,=F'100'              GET SECONDS IN R1                25580048
*                                                                       25590048
         STRING ((R6),9,T),1X,         Wednesday                       X25600018
               (SHORTMSG+08,2),1X,     Wednesday 19                    X25610018
               ((R7),3),1X,            Wednesday 19 Nov                X25620018
               (SHORTMSG+0,4),2X,      Wednesday 19 Nov 1995           X25630018
               (SHORTMSG+0,4),'.',     1995.                           X25640018
               (TENWORDS+6,P,R3Z),2X,  1995.033                        X25650018
               (SHORTMSG+11,8),        HH:MM:SS                        X25660048
               '  Timezone: ',(DWD,1),'.', E/W                         X25670048
               ((R3),,R2Z),'.',        HH                              X25680048
               ((R2),,R2Z),'.',        MM                              X25690048
               ((R1),,R2Z),            SS                              X25700048
               INTO=LONGMSG                                             25710018
*                                                                       25720048
         BAL   R14,SETMSG           <- send message                     25730018
         LA    R1,4                    r1=4: exit rc=0                  25740031
         PR                                                             25750031
MONTHTBL DC    C'JanFebMarAprMayJunJulAugSepOctNovDec'                  25760018
*********************************************************************** 25770015
*                                                                     * 25780000
*        Function=FSTSO (Full-Screen TSO)                             * 25790049
*                                                                     * 25800000
*          rc=OUTTRAP("L.")                                           * 25810031
*          "command"                                                  * 25820018
*          cc=rc                                                      * 25830030
*          rc=OUTTRAP("OFF")                                          * 25840031
*          CALL STEMDISP "BROWSE","L.",,,command                      * 25850018
*          EXIT cc                                                    * 25860030
*                                                                     * 25870000
*********************************************************************** 25880015
FSTSO    BEGIN_PROC APPL=ISR                                            25890049
         LM    R7,R8,OPTADDR           addr/len of command              25900031
         LTR   R8,R8                   any parm?                        25910031
         BZ    FSTSO2P                 no, display panel(isrtso)        25920031
         CLI   PLUSSIGN,C'+'           SPLIT NEW requested?             25930034
         BNE   FSTSO1K                 no, jump                         25940034
         CH    R8,=H'1'                1-char command?                  25950034
         BE    FSTSO60                 yes, exit                        25960034
FSTSO1K  EQU   *                                                        25970034
*                                                                       25980000
*        replace %DSNAME with dsname under cursor                       25990031
*                                                                       26000000
FSTSO2   LM    R2,R3,OPTADDR           addr/len of command              26010031
*loop                                                                   26020031
FSTSO2B  CLC   =C'%DSNAME',0(R2)       Search for %DSNAME               26030031
         BE    FSTSO2F                 Search for %DSNAME               26040031
         LA    R2,1(,R2)               Search for %DSNAME               26050031
         BCT   R3,FSTSO2B              Search for %DSNAME               26060031
*endloop                                                                26070031
         B     FSTSO2X                 %DSNAME not found                26080031
*                                                                       26090000
*        Move command to work area                                      26100044
*                                                                       26110000
FSTSO2F  EQU   *                                                        26120031
         BAL   R14,CURSOR           <- get dsn at cursor location       26130031
         LTR   R1,R1                   Dsname extracted?                26140031
         BNP   FSTSO2R                 no, error                        26150031
         ALR   R8,R7                   end of command                   26160031
         STRING ((R7),(R2)),((R1),(R0)),(7(R2),(R8)),INTO=RACFWORK      26170031
         LA    R7,RACFWORK             update addr                      26180031
         LR    R8,R15                  update length                    26190031
         B     FSTSO2X                                                  26200031
*                                                                       26210000
*        Display ISRTSO panel if user did not specify a command         26220031
*                                                                       26230000
FSTSO2P  EQU   *                                                        26240031
         ISPLINK ($VGET,ISRPTCV,$PROFILE)                               26250031
*LOOP                                                                   26260046
FSTSO2Q  EQU   *                                                        26270046
         STRING 'DISPLAY PANEL(','ISRTSO)',INTO=COMMAND                 26280031
         BAL   R14,ISPEXEC          <- execute command                  26290031
         LTR   R1,R15                  END/RETURN?                      26300031
         BNZ   FSTSO50                 yes, exit                        26310031
         ISPLINK ($VPUT,ISRPTCV,$PROFILE)                               26320031
         LA    R0,L'RACFWORK           max length                       26330031
         ST    R0,DWD                  max length                       26340031
         ISPLINK ($VCOPY,=C'ZCMD ',DWD,RACFWORK,$MOVE)                  26350031
         LA    R7,RACFWORK             update addr                      26360031
         L     R8,DWD                  update length                    26370031
         LTR   R8,R8                   length=0 ?                       26380046
         BZ    FSTSO2Q                 yes, display ISRTSO panel again  26390046
*ENDLOOP                                                                26400046
         B     FSTSO2X                                                  26410031
ISRPTCV  DC    C'(PTCRET01 PTCRET02 PTCRET03 PTCRET04 PTCRET05 PTCRET06-26420031
                PTCRET07 PTCRET08 PTCRET09 PTCRET10 PTCAMODE PTCDMODE  -26430031
                PTCFMODE PTCZAO   PTCSELM  PTCWCMD)'                    26440031
*                                                                       26450000
*        Execute the command                                            26460031
*                                                                       26470000
FSTSO2X  EQU   *                                                        26480031
         CLI   PLUSSIGN,C'+'           SPLIT NEW requested?             26490034
         BE    FSTSO61                 yes, exit                        26500034
         STRING '"',((R7),(R8)),'"',INTO=LONGMSG                        26510043
         CLC   =C'FSTSO ',FUNCTION     TSO Full-screen command?         26520043
         BNE   FSTSO2Y                 no, jump                         26530043
         STRING 'rc=OUTTRAP("L.");"',                                  X26540031
               ((R7),(R8)),'";',                                       X26550031
               'cc=rc;',                                               X26560031
               'rc=OUTTRAP("OFF");',                                   X26570031
               'CALL STEMDISP "BROWSE","L.",,,"',((R7),(R8)),'";',     X26580031
               'EXIT cc',                                              X26590031
               INTO=LONGMSG                                             26600031
FSTSO2Y  EQU   *                                                        26610043
         LA    R14,LONGMSG             addr of REXX stmt                26620031
         STM   R14,R15,DWD             store addr/len                   26630015
         LA    R1,DWD                  FIRST STMT ADDR/LEN              26640015
         LA    R0,8                    LENGTH OF ADDR/LEN ARRAY         26650015
         SLR   R2,R2                   No arguments                     26660018
         BAL   R14,RUNEXEC          <- execute a REXX EXEC              26670031
         B     FSTSO50                 exit                             26680031
*                                                                       26690000
FSTSO2R  EQU   *                                                        26700031
         STRING 'Dsname not found',INTO=SHORTMSG                        26710031
         STRING 'You must position the cursor under a dsname before entX26720031
               ering this command.',                                   X26730031
               INTO=LONGMSG                                             26740031
         MVI   ALARM,C'Y'              error, beep.                     26750031
         BAL   R14,SETMSG           <- send message, set r15            26760031
FSTSO50  LA    R1,4                    r1=4: exit rc=(15)               26770031
         PR                                                             26780031
*                                                                       26790000
*        Build an updated command for ISPSTRT                           26800034
*                                                                       26810000
FSTSO60  EQU   *                                                        26820034
         SLR   R8,R8                   no command                       26830034
FSTSO61  EQU   *                                                        26840034
         STRING 'FSTSO ',((R7),(R8)),INTO=LONGMSG                       26870034
         LA    R14,LONGMSG             FSTSO command ds.name            26880034
         STM   R14,R15,CMD@            update command for NEWSCREEN     26890034
         LA    R1,16                   r1=16: start new screen          26920034
         PR                                                             26930034
*********************************************************************** 26940000
*                                                                     * 26950000
*        Function=UNLOAD (unload a module)                            * 26960030
*                                                                     * 26970000
*********************************************************************** 26980000
UNLOAD00 BEGIN_PROC OPT=YES                                             26990031
         CLC   OWNNAME,OPT8            is this FASTPATH?                27000031
         BNE   UNLOAD02                no, error                        27010031
         DELETE EPLOC=OWNNAME2         save OWNNAME for UNLOAD function 27020033
         L     R5,CDE@                 own CDE                          27030031
         LA    R0,1                    R0=1                             27040033
         CH    R0,CDUSE-CDENTRY(,R5)   own CDUSE=1 ?                    27050033
         BE    UNLOAD20                yes, error                       27060031
UNLOAD02 EQU   *                                                        27070031
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +27080030
               INEPNAME=OPT8,          ADDRESS                         +27090030
               OUTLOADPT=LOADLEN+0,    LOAD POINT                      +27100031
               OUTLENGTH=LOADLEN+4,    MODULE LENGTH IN BYTES          +27110031
               MF=(E,CSVQRYWK)         WORK AREA                        27120030
         LTR   R15,R15                 module currently loaded?         27130030
         BNZ   UNLOAD20                no, exit                         27140030
         LM    R0,R1,LOADLEN           loadpt,length                    27150031
         ALR   R1,R0                   R1=end address                   27160031
         STM   R0,R1,LOADLEN           loadpt,endaddr                   27170031
         LA    R1,UNLOAD75             address of the UNLOAD routine    27190030
         STRING ((R1),,X),INTO=URPNAME address in EBCDIC                27200030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              27210030
         BAL   R14,EXECURP          <- Execute UNLOAD75 as a URP        27220030
         LA    R1,DYNAM                pass A(DYNAM) to timer rtne      27230031
         BAL   R14,UNLOAD80         <- cancel timer                     27240031
UNLOAD17 DELETE EPLOC=OPT8             delete at ISPTASK level          27250030
         LTR   R15,R15                 LLCOUNT=0?                       27260030
         BZ    UNLOAD17                not yet, do it once more.        27270030
*                                                                       27280000
*        check if the module is still loaded                            27290031
*                                                                       27300000
         CSVQUERY SEARCH=JPALPA,       SEARCH JPAQ                     +27310031
               INEPNAME=OPT8,          ADDRESS                         +27320031
               MF=(E,CSVQRYWK)         WORK AREA                        27330031
         LTR   R15,R15                 module still loaded?             27340031
         BNZ   UNLOAD19                no, we're OK                     27350031
         CLC   OWNNAME,OPT8            is this FASTPATH?                27360031
         BNE   UNLOAD22                no, error                        27370031
         L     R5,CDE@                 own CDE                          27380033
         LA    R0,1                    R0=1                             27390031
         CH    R0,CDUSE-CDENTRY(,R5)   own CDUSE=1 ?                    27400033
         BNE   UNLOAD22                no, error                        27410031
UNLOAD19 EQU   *                                                        27420031
         STRING (OPT8,,T),' unloaded',INTO=SHORTMSG                     27430030
         STRING 'Module ',(OPT8,,T),' unloaded',                       X27440030
               INTO=LONGMSG                                             27450030
         B     UNLOAD49                issue msg, exit rc=0             27460031
*                                                                       27470000
UNLOAD20 STRING (OPT8,,T),' not found',INTO=SHORTMSG                    27480031
         STRING 'Module ',(OPT8,,T),' is not in memory at this time.', X27490030
               INTO=LONGMSG                                             27500030
         B     UNLOAD48                issue msg, exit rc=8             27510031
*                                                                       27520000
UNLOAD22 STRING (OPT8,,T),' not unloaded',INTO=SHORTMSG                 27530031
         STRING 'Module ',(OPT8,,T),' could not be unloaded.',         X27540031
               INTO=LONGMSG                                             27550031
*                                                                       27560000
UNLOAD48 EQU   *                                                        27570031
         MVI   ALARM,C'Y'              error, beep.                     27580030
UNLOAD49 EQU   *                                                        27590031
         BAL   R14,SETMSG           <- send message, set r15            27600030
*                                                                       27610000
UNLOAD50 LA    R1,4                    r1=4: exit rc=(15)               27620031
         PR                                                             27630031
*---------------------------------------------------------------------* 27640031
*                                                                     * 27650031
*        This code executes as a URP to delete modules                * 27660031
*        loaded by the PRELOAD routine.                               * 27670031
*                                                                     * 27680031
*---------------------------------------------------------------------* 27690031
         PUSH  USING                                                    27700030
         DROP                                                           27710030
UNLOAD75 BAKR  R14,0                   save regs                        27720030
         L     R10,4(,R1)              A(DYNAM)                         27730030
         L     R10,0(,R10)             A(DYNAM)                         27740030
         USING DYNAM,R10                                                27750030
         LR    R12,R15                 A(UNLOAD75)                      27760030
         USING UNLOAD75,R12                                             27770030
         LA    R1,DYNAM                pass A(DYNAM) to timer rtne      27780031
         BAL   R14,UNLOAD80         <- cancel timer                     27790031
UNLOAD77 DELETE EPLOC=OPT8             load at TMP level                27800030
         LTR   R15,R15                 LLCOUNT=0?                       27810030
         BZ    UNLOAD77                not yet, do it once more.        27820030
         PR                                                             27830030
         DROP                                                           27840031
*---------------------------------------------------------------------* 27850031
*                                                                     * 27860031
*        Cancel timer if exit addr points to module being unloaded.   * 27870031
*                                                                     * 27880031
*---------------------------------------------------------------------* 27890031
UNLOAD80 BAKR  R14,0                   save regs                        27900031
         BALR  R12,0                   base regs                        27910031
         USING *,R12                                                    27920031
         LR    R10,R1                  A(DYNAM)                         27930031
         USING DYNAM,R10                                                27940031
         L     R4,PSATOLD-PSA(0,0)     Current TCB                      27950031
         USING TCB,R4                                                   27960031
         ICM   R5,B'1111',TCBTME       any timer here?                  27970031
         BZ    UNLOAD89                no, jump                         27980031
         USING TQE,R5                                                   27990031
*loop                                                                   28000031
UNLOAD81 L     R1,TQEEXIT              EXIT ADDRESS                     28010031
         LA    R1,0(,R1)               clean up AMODE bit               28020031
         CL    R1,LOADLEN              compare to load-point            28030031
         BL    UNLOAD85                too low, iterate                 28050031
         CL    R1,LOADLEN+4            compare to end address           28060031
         BH    UNLOAD85                too high, iterate                28070031
         STIMERM CANCEL,ID=TQEID,MF=(E,STIMERL)                         28080031
         LTR   R15,R15                 STIMERM CANCEL OK?               28100031
         BNZ   UNLOAD85                no, iterate                      28110031
         LA    R5,TCBTME-(TQELINK-TQE) yes, go back to start of chain   28120031
UNLOAD85 ICM   R5,B'1111',TQELINK      end of chain?                    28130031
         BNZ   UNLOAD81                no, loop                         28140031
*endloop                                                                28150031
UNLOAD89 PR                                                             28160031
         POP   USING                                                    28170030
*********************************************************************** 28180030
*                                                                     * 28190000
*        Function=VERASE                                              * 28200030
*                                                                     * 28210000
*        This function issues VERASE to delete a variable from        * 28220030
*        the shared and/or profile pool.                              * 28230030
*                                                                     * 28240000
*********************************************************************** 28250030
VERASE   BEGIN_PROC                                                     28260031
         STRING 'VERASE ',(OPT,,T),INTO=COMMAND                         28270030
         BAL   R14,ISPEXEC          <- execute command                  28280030
         LTR   R15,R15                                                  28290030
         BNZ   VERASE6                 RC>0 (ERROR)                     28300030
         STRING 'Variable(s) deleted',INTO=SHORTMSG                     28310030
      STRING 'The specified variables have been successfully deleted.',X28320030
               INTO=LONGMSG                                             28330030
         B     VERASE49                issue message and exit with rc=0 28340031
VERASE6  CH    R15,=H'8'               severe error?                    28350030
         BH    VERASE50                RC>8 (ERROR)                     28360030
         STRING 'Variable(s) not found',INTO=SHORTMSG                   28370030
         STRING 'At least one specified variable does not exist',      X28380030
               INTO=LONGMSG                                             28390030
         MVI   ALARM,C'Y'              error, beep.                     28400030
VERASE49 BAL   R14,SETMSG           <- send message, set r15            28410030
VERASE50 LA    R1,4                    r1=4: exit rc=(15)               28420031
         PR                                                             28430031
*********************************************************************** 28440030
*                                                                     * 28450000
*        Function=ZDEL                                                * 28460030
*                                                                     * 28470000
*        This function uses an undocumented interface to retrieve     * 28480030
*        and set the command delimiter character.                     * 28490030
*                                                                     * 28500000
*        Tested in 3.5, 4.2 and 4.4.                                  * 28510030
*                                                                     * 28520000
*********************************************************************** 28530030
ZDELFUNC BEGIN_PROC                                                     28540031
         CLC   OPTLEN,=F'1'            one char specified?              28550030
         BNE   ZDELSHOW                no, display                      28560030
*                                                                       28570000
*        validate new character: anything but A-Z 0-9 = .               28580030
*                                                                       28590000
         CLI   OPT8,C'.'               valid char?                      28600030
         BE    ZDELBADC                no, bad parm                     28610030
         CLI   OPT8,C'='               valid char?                      28620030
         BE    ZDELBADC                no, bad parm                     28630030
         CLI   OPT8,C'A'               valid char? 41-C0                28640030
         BL    ZDELUPD                 yes, update                      28650030
         CLI   OPT8,C'I'               valid char?  A-I                 28660030
         BNH   ZDELBADC                no, bad parm                     28670030
         CLI   OPT8,C'J'               valid char? CA-D0                28680030
         BL    ZDELUPD                 yes, update                      28690030
         CLI   OPT8,C'R'               valid char?  J-R                 28700030
         BNH   ZDELBADC                no, bad parm                     28710030
         CLI   OPT8,C'S'               valid char? DA-E1                28720030
         BL    ZDELUPD                 yes, update                      28730030
         CLI   OPT8,C'Z'               valid char?  S-Z                 28740030
         BNH   ZDELBADC                no, bad parm                     28750030
         CLI   OPT8,C'0'               valid char? EA-EF                28760030
         BL    ZDELUPD                 yes, update                      28770030
         CLI   OPT8,C'9'               valid char?  0-9                 28780030
         BH    ZDELUPD                 yes, update                      28790030
ZDELBADC ISPLINK ($SETMSG,=C'ISPO903 ') Invalid Character               28800030
         LA    R15,8                   rc=8                             28810031
         B     ZDELF50                 exit with RC=(15)                28820031
*                                                                       28830000
*        update ZDEL in the TSV and update ISPSPROF                     28840030
*                                                                       28850000
ZDELUPD  L     R4,TLD@                 load TLD address                 28860030
         USING TLD,R4                                                   28870030
         L     R5,TLDTSVP              System Variables Table           28880030
         USING TSV,R5                                                   28890030
         MVC   TSVZDEL,OPT8            update ZDEL field in TSV         28900030
         LA    R1,TLD@                 TLD pointer                      28910030
         L     R15,TLDTSCP             ISPTSC0                          28920030
         L     R15,272(,R15)           ISPCUP (Update Profile)          28930030
         BALR  R14,R15              <- refresh ZDEL                     28940030
         STRING 'Delimiter set to ',TSVZDEL,INTO=SHORTMSG               28950030
         STRING 'Command Delimiter changed from ',ZDEL,                X28960030
               ' to ',TSVZDEL,INTO=LONGMSG                              28970030
         B     ZDELF49                 send msg, exit with RC=0         28980031
         DROP  R4,R5                   TLD,TSV                          28990030
*                                                                       29000000
*        Display current ZDEL value                                     29010030
*                                                                       29020000
ZDELSHOW CLI   OPT8,C' '               ZDEL display?                    29030030
         BNE   ZDELLENG                no, bad parm                     29040030
         STRING 'Delimiter is ',ZDEL,INTO=SHORTMSG                      29050030
         STRING 'Command Delimiter is currently set to ',ZDEL,         X29060030
               INTO=LONGMSG                                             29070030
         B     ZDELF49                 send msg, exit with RC=0         29080031
*                                                                       29090000
*        Specified parameter has invalid format                         29100030
*                                                                       29110000
ZDELLENG STRING 'Invalid Parameter',INTO=SHORTMSG                       29120030
         STRING 'Parameter must be specified as a single character.',  X29130030
               INTO=LONGMSG                                             29140030
*                                                                       29150000
ZDELF48  EQU   *                                                        29160031
         MVI   ALARM,C'Y'              error, beep.                     29170030
ZDELF49  EQU   *                                                        29180031
         BAL   R14,SETMSG           <- send message, set r15            29190030
*                                                                       29200000
ZDELF50  LA    R1,4                    r1=4: exit rc=(15)               29210031
         PR                                                             29220031
*********************************************************************** 29230038
*                                                                     * 29240031
*        Parse the parm options into OPT,PARM3,PARM4                  * 29250031
*                                                                     * 29260031
*              Input:   PARM='EDIT,abcd,efgh,ikjl'                    * 29270031
*                                                                     * 29280031
*              output:  FUNCTION='EDIT '                              * 29290031
*                       OPT='abcd'                                    * 29300031
*                       PARM3='efgh'                                  * 29310031
*                       PARM4='ijkl'                                  * 29320031
*                                                                     * 29330031
*********************************************************************** 29340038
PARSE3   BEGIN_PROC                                                     29350031
         LA    R4,OPT2                 saved options                    29360031
         L     R5,OPTLEN               length of options                29370031
         BAL   R14,PARSE_PARM       <- parse parm into function,opt     29380031
         DC    S(L'OPT,OPT)            second operand                   29390031
         DC    S(L'PARM3,PARM3)        third operand                    29400031
         DC    S(L'PARM4,PARM4)        fourth operand                   29410031
         STRING (OPT,,T),INTO=OPT2     count characters                 29420031
         ST    R15,OPTLEN              length of &OPT                   29430031
         PR                                                             29440031
         TITLE 'CURSOR: Extract Data Set Name from Screen Buffer'       29450029
*********************************************************************** 29460010
*                                                                     * 29470000
*        Scan data at the cursor position for a dsname                * 29480010
*                                                                     * 29490000
*        Some of this code has been lifted from ISPCDSN,              * 29500010
*        in file 270 of the CBT tape.                                 * 29510029
*                                                                     * 29520000
*********************************************************************** 29530010
CURSOR   BEGIN_PROC                                                     29540030
         L     R6,TLD@                 R6->TLD                          29550030
         USING TLD,R6                                                   29560028
*                                                                       29590000
*        Retrieve screen buffer address and cursor position.            29600029
*                                                                       29610000
         ICM   R15,B'1111',TLDCLSWD    screen width (zero if ISPSTRT)   29620024
         BZ    CURSOR98                zero, exit to prevent S0C9       29630024
         SLR   R0,R0                   prepare "DR"                     29640023
         L     R1,TLDCSR               get cursor offset                29650023
         DR    R0,R15                  get line $ (R0) and offset (R1)  29660024
         LR    R5,R0                   cursor offset in line            29670010
         M     R0,TLDCLSWD             get offset to current line       29680023
         AL    R1,TLDTLSP              change offset to addr            29690023
         LR    R4,R1                   Current line in screen image     29700010
*---------------------------------------------------------------------* 29710010
*                                                                     * 29720000
*        Build scan table for TRT.                                    * 29730029
*                                                                     * 29740000
*---------------------------------------------------------------------* 29750010
CURSOR21 MVI   TRNTBL,255              fill table with X'FF'            29760029
         MVC   TRNTBL+1(255),TRNTBL    fill table with X'FF'            29770029
         BAL   R1,CURSOR22             branch around table, set R1      29780010
         DC    C'$',AL1(1)             $                                29790029
         DC    C'.',AL1(1)             .                                29800029
         DC    C'#',AL1(2)             #@                               29810049
         DC    C'a',AL1(9)             a-i                              29820029
         DC    C'j',AL1(9)             j-r                              29830029
         DC    C's',AL1(8)             s-z                              29840029
         DC    C'{',AL1(1)             C0                               29850010
         DC    C'-',AL1(1)             60                               29860018
         DC    C'A',AL1(9)             A-I                              29880029
         DC    C'J',AL1(9)             J-R                              29890029
         DC    C'S',AL1(8)             S-Z                              29900029
         DC    C'0',AL1(10)            0-9                              29910029
         DC    X'00',0H'0'             end of table                     29920010
*LOOP                                                                   29930010
CURSOR22 SLR   R3,R3                   clear work reg                   29940029
         IC    R3,0(,R1)               FIRST BYTE                       29950029
         LA    R2,TRNTBL(R3)           point to TRNTBL+X'4A'            29960029
         IC    R3,1(,R1)               length                           29970029
         SLR   R15,R15                 padding=X'00'                    29980029
         MVCL  R2,R14                  clear (R3) bytes                 29990029
         LA    R1,2(,R1)               NEXT ENTRY IN TABLE              30000010
         CLI   0(R1),0                 END OF TABLE?                    30010010
         BNE   CURSOR22                NEXT STRING                      30020010
*ENDLOOP                                                                30030010
*---------------------------------------------------------------------* 30040029
*                                                                     * 30050000
*        Extend current line to facilitate dsname extraction          * 30060029
*                                                                     * 30070000
*---------------------------------------------------------------------* 30080029
         L     R1,TLDCLSWD             line length                      30090029
         STRING 56X,((R4),(R1)),INTO=LONGMSG                            30100029
         LA    R4,LONGMSG              new line                         30110029
         LA    R5,56(R5,R4)            cursor address                   30120029
         SLR   R7,R7                   no left paren                    30130029
         DROP  R6                      was TLD                          30140029
*---------------------------------------------------------------------* 30150028
*                                                                     * 30160000
*        If the cursor is placed under DSN= or DSNAME= then           * 30170028
*        move it under the 1st char to the right of the = sign.       * 30180028
*                                                                     * 30190000
*---------------------------------------------------------------------* 30200028
CURSOR30 BAL   R2,CURSOR31             branch around table              30210028
         DC    AL1(3),C'DSN='          JCL                              30220028
         DC    AL1(6),C'DSNAME='       JCL                              30230028
         DC    X'00',0H'0'             end of table                     30240029
*loop                                                                   30250028
CURSOR31 SLR   R3,R3                                                    30260028
         IC    R3,0(,R2)               length of literal                30270029
         LA    R0,1(,R3)               length of scan area              30280029
         LR    R1,R5                   current position                 30290029
         SR    R1,R3                   start of scan area               30300029
*--loop                                                                 30310028
CURSOR32 EX    R3,CURSOR36             execute CLC                      30320028
         BE    CURSOR38                found, exit                      30330028
         LA    R1,1(,R1)               bump index                       30340028
         BCT   R0,CURSOR32             scan further                     30350028
*--endloop                                                              30360028
         LA    R2,1+1(R3,R2)           next entry in literal table      30370028
         CLI   0(R2),0                 end of table?                    30380029
         BNE   CURSOR31                no, search for next literal      30390028
*endloop                                                                30400028
         B     CURSOR39                                                 30410028
CURSOR36 CLC   0(*-*,R1),1(R2)         scan for "DSN="                  30420028
CURSOR38 LA    R5,1(R3,R1)             start of dsname                  30430029
CURSOR39 EQU   *                                                        30440028
*---------------------------------------------------------------------* 30450028
*                                                                     * 30460000
*        If the cursor is positionned under a parenthesis, ignore it. * 30470029
*                                                                     * 30480000
*---------------------------------------------------------------------* 30490029
CURSOR42 EQU   *                                                        30500029
         CLI   0(R5),C'('              Is it left paren?                30510029
         BNE   CURSOR43                no, jump                         30520029
         LA    R5,1(,R5)               yes, skip to next char           30530029
         B     CURSOR42                there may be several of them     30540029
CURSOR43 EQU   *                                                        30550029
         CLI   0(R5),C')'              Is it right paren?               30560029
         BNE   CURSOR44                no, jump                         30570029
         BCTR  R5,0                    yes, try char to the left        30580029
         B     CURSOR43                there may be several of them     30590029
CURSOR44 EQU   *                                                        30600029
*---------------------------------------------------------------------* 30610029
*                                                                     * 30620000
*        Check that the cursor is under a valid dsname character      * 30630029
*                                                                     * 30640000
*---------------------------------------------------------------------* 30650029
         TRT   0(1,R5),TRNTBL          cursor under a data set name?    30660029
         BZ    CURSOR50                Yes, begin scanning for start    30670029
         CLI   0(R5),C''''             Is it a quote?                   30680029
         BNE   CURSOR98                No, cursor invalid               30690029
         MVI   QFLAG,X'80'             Yes, indicate left quote         30700010
         TRT   1(1,R5),TRNTBL          Is dsn to right of quote?        30710029
         BZ    CURSOR59                Yes, prepare to extract it       30720029
         BCTR  R5,0                    No,  check left of quote         30730029
         CLI   0(R5),C')'              'my.dsn(mymbr)' ?                30740029
         BE    CURSOR48                Yes, accept it                   30750033
         TRT   0(1,R5),TRNTBL          Was it there?                    30760029
         BNZ   CURSOR98                No,  cursor invalid              30770010
CURSOR48 MVI   QFLAG,X'01'             Yes, indicate right quote        30780029
*---------------------------------------------------------------------* 30790029
*                                                                     * 30800000
*        Scan backwards to locate beginning of dsname                 * 30810029
*                                                                     * 30820000
*        If we pass over a left parenthesis, look for a period        * 30830033
*        to determine if the parenthesis marks the beginning of       * 30840033
*        the dsname or of the member name.                            * 30850033
*                                                                     * 30860000
*---------------------------------------------------------------------* 30870029
CURSOR50 LR    R2,R5                   current position                 30880029
         SR    R2,R4                   subtract addr of pos 1           30890029
*loop                                                                   30900029
CURSOR52 BCTR  R5,0                    R5-> cursor location             30910029
         TRT   0(1,R5),TRNTBL          valid dsn char?                  30920029
         BZ    CURSOR54                yes, iterate                     30930029
         CLI   0(R5),C'('              Was delimiter left paren?        30940029
         BNE   CURSOR56                No, include parens in dsn        30950029
         MVI   TRNTBL+C'.',255         set period invalid for scan      30960029
         TRT   1(9,R5),TRNTBL          find delimiter                   30970029
         MVI   TRNTBL+C'.',0           reset period in scan table       30980029
         BZ    CURSOR54                no dlm, continue                 30990029
         CLI   0(R1),C'.'              period found?                    31000029
         BE    CURSOR61                yes, must be dsn                 31010029
         LTR   R7,R7                   first left paren?                31020029
         BNZ   CURSOR61                no, leave                        31030029
         LR    R7,R5                   yes, remember it                 31040029
CURSOR54 BCT   R2,CURSOR52             Yes, decr offset; check next     31050029
*endloop                                                                31060029
CURSOR56 LA    R0,1(,R5)               1st byte of dsname               31070029
         CLR   R0,R7                   left paren at start of dsn?      31080029
         BNE   CURSOR59                No, jump                         31090029
         SLR   R7,R7                   yes, forget all about it         31100029
         LA    R5,1(,R5)               make "(" the dlm                 31110029
*                                                                       31120000
*        R5 now points to start of dsname                               31130029
*                                                                       31140000
CURSOR59 EQU   *                                                        31150029
         CLI   0(R5),C''''             Was delimiter a quote?           31160029
         BNE   CURSOR61                No,  leave bits unchanged        31170029
         OI    QFLAG,X'80'             Yes, indicate left quote         31180010
*---------------------------------------------------------------------* 31190029
*                                                                     * 31200000
*        scan dsname to locate its right boundary                     * 31210029
*                                                                     * 31220000
*---------------------------------------------------------------------* 31230029
CURSOR61 LA    R5,1(,R5)               R5-> start of dsname             31240029
         LTR   R7,R7                   do we have a member name?        31250029
         BNZ   CURSOR65                no, do not look for right paren  31260029
*                                                                       31270000
*        no mbr name found yet, check for a left parenthesis            31280029
*                                                                       31290000
         TRT   0(56,R5),TRNTBL         Scan until not in table          31300029
         BZ    CURSOR98                end dlm not found, exit          31310029
         LR    R2,R1                   R2-> right delimiter             31320029
         CLI   0(R1),C'('              Was delimiter a left paren?      31330029
         BNE   CURSOR66                no, this is the end of the dsn   31340029
         LR    R7,R1                   R7-> start of mbr name           31350029
         CLI   1(R7),C'+'              AA.BB.CC(+1)                     31360033
         BNE   *+8                     no, jump                         31370033
 ORG *-4                                                                31380049
         BNE   CURSOR63                no, jump                         31390049
         CLI   1+1(R7),C'0'            AA.BB.CC(+1)                     31400049
         BL    CURSOR63                no, jump                         31410049
         LA    R7,1(,R7)               SKIP + SIGN                      31420033
CURSOR63 EQU   *                                                        31430049
*GILBERT.GSF.SOURCE(FA*H)                                               31440033
         MVI   TRNTBL+C'*',0           member name can be generic       31450033
         MVI   TRNTBL+C'%',0           member name can be generic       31460033
*                                                                       31470000
*        Find end of member name                                        31480029
*                                                                       31490000
CURSOR65 TRT   1(9,R7),TRNTBL          Scan for right paren             31500029
         BZ    CURSOR98                not found, ignore mbr name       31510029
         CLI   0(R1),C')'              Was delimiter a right paren?     31520029
         BNE   CURSOR98                no, ignore mbr name              31530029
         LA    R2,1(,R1)               point R2 past right paren        31540029
*                                                                       31550000
CURSOR66 EQU   *                                                        31560029
         CLI   0(R2),C''''             Was delimiter a quote?           31570010
         BNE   CURSOR68                No,  leave bits unchanged        31580029
         OI    QFLAG,X'01'             Yes, indicate right quote        31590010
CURSOR68 TM    QFLAG,X'81'             Quotes surrounding dsname ?      31600029
         BM    CURSOR98                no matching quotes               31610010
*---------------------------------------------------------------------* 31620029
*                                                                     * 31630000
*        remove LISTCAT header                                        * 31640029
*                                                                     * 31650000
*---------------------------------------------------------------------* 31660029
CURSOR80 BAL   R1,CURSOR81             branch around table              31670029
         DC    C'AIX------'                                             31680033
         DC    C'ALIAS----'                                             31690038
         DC    C'CLUSTER--'                                             31700029
         DC    C'DATA-----'                                             31710029
         DC    C'GDG------'                                             31720033
         DC    C'INDEX----'                                             31730029
         DC    C'NONVSAM--'                                             31740029
         DC    C'PATH-----'                                             31750033
         DC    C'USERCAT--'                                             31760031
         DC    C'SYMBOLIC-'            ALIAS ASSOCIATIONS               31770042
         DC    C'RESOLVED-'            ALIAS ASSOCIATIONS               31780042
         DC    C'PGSPC----'            PAGE SPACE                       31790042
         DC    X'00',0H'0'             end of table                     31800029
*loop                                                                   31810029
CURSOR81 CLC   0(9,R1),0(R5)           compare header                   31820029
         BE    CURSOR82                found, exit                      31830029
         LA    R1,9(,R1)               next entry in header table       31840029
         CLI   0(R1),0                 end of table?                    31850029
         BNE   CURSOR81                no, check next header            31860029
*endloop                                                                31870029
         B     CURSOR90                                                 31880029
CURSOR82 LA    R5,9(,R5)               skip header                      31890029
*---------------------------------------------------------------------* 31900029
*                                                                     * 31910000
*        return dsname address and length to invoking routine         * 31920029
*                                                                     * 31930000
*---------------------------------------------------------------------* 31940029
CURSOR90 LR    R0,R2                   R0 = first byte after dsname     31950029
         LR    R1,R5                   R1 = first byte of dsname        31960029
         SLR   R0,R1                   R0 = length                      31970010
         PR                            exit                             31980028
*                                                                       31990000
CURSOR98 SLR   R0,R0                   no dsname                        32000010
         SLR   R1,R1                   no dsname                        32010010
*                                                                       32020000
CURSOR99 PR                            GOBACK                           32030028
*********************************************************************** 32040023
         MACRO                                                    macro 32050023
&NAME   $LINK  &EP=,&PARAM=,&ERRET=                               macro 32060023
&NAME    LA    R0,=CL8'&EP'            EP name                          32070023
         L     R1,CVTPTR(0,0)          CVT                              32080023
         L     R1,CVTLINK-CVTMAP(,R1)  SYS1.LINKLIB                     32090023
         STM   R0,R1,12(R13)           SF=L                             32100023
         LINK  SF=(E,12(,R13)),PARAM=&PARAM,VL=1,MF=(E,TENWORDS)        32110023
         AIF   (T'&ERRET EQ 'O').MEND                             macro 32120023
         LTR   R15,R15                 Any error?                       32130023
         BNZ   &ERRET                  yes, jump                        32140023
.MEND    MEND                                                     macro 32150023
         TITLE 'SETUP: Perform Initialization'                          32160029
*********************************************************************** 32170000
*                                                                     * 32180000
*        SETUP (first time only)                                      * 32190000
*                                                                     * 32200000
*        1. Make myself permanently resident in memory.               * 32210000
*                                                                     * 32220000
*        2. Call the PRELOAD routine                                  * 32230007
*                                                                     * 32240000
*        3. Define the RESET edit macro                               * 32250000
*                                                                     * 32260000
*********************************************************************** 32270000
SETUP00  BEGIN_PROC                                                     32280030
         LA    R1,SETUP500             SETUP URP                        32300030
         STRING ((R1),,X),INTO=URPNAME SETUP URP                        32310030
         IDENTIFY EPLOC=URPNAME,ENTRY=(R1)                              32320030
         LTR   R15,R15                 First time?                      32330007
         BNZ   SETUP99                 NO, EXIT                         32340007
*                                                                       32360000
*        Invoke the PRELOAD routine.  If I've been invoked via CALL,    32370007
*        the tasklib will be first in the search sequence.              32380007
*                                                                       32390000
SETUP20  L     R15,=A(PRELOAD)         pre-load routine                 32400007
         BALR  R14,R15              <- invoke it                        32410007
*                                                                       32420000
*        Execute the SETUP500 routine as a URP to issue LOAD and        32430030
*        ensure that I stay in memory until ISPF terminates.            32440030
*                                                                       32450000
         LA    R1,SETUP500             init routine                     32460030
         BAL   R14,EXECURP          <- Execute SETUP500 as a URP        32470030
         LTR   R15,R15                 OK?                              32480000
         BNZ   SETUP90                 no, jump                         32490007
         DELETE EPLOC=OWNNAME          reduce use cnt at ISPTASK level  32500000
*---------------------------------------------------------------------* 32510007
*                                                                     * 32520000
*        Define the "RESET" EDIT macro                                * 32530007
*                                                                     * 32540000
*        Note that this will prevent you from accessing a program     * 32550007
*        or TSO CP called RESET; if it is a problem, comment out      * 32560007
*        the IDENTIFY macro below.                                    * 32570007
*                                                                     * 32580000
*---------------------------------------------------------------------* 32590007
SETUP90  EQU   *                                                        32600007
         IDENTIFY EP=RESET,ENTRY=SETUP800                               32610007
*                                                                       32620000
SETUP99  PR                                                             32630007
*---------------------------------------------------------------------* 32640030
*                                                                     * 32650030
*        Execute the routine at (R1) as a URP                         * 32660031
*                                                                     * 32670030
*        Invoke the Un-authorized Resource Processor Service Routine. * 32680030
*        It schedules an IRB at the IKJEFT09 level to execute the     * 32690030
*        routine whose address is passed in R1.                       * 32700030
*                                                                     * 32710030
*---------------------------------------------------------------------* 32720030
EXECURP  BEGIN_PROC                                                     32730030
         ST    R13,TOKEN               pass A(DYNAM)                    32740030
         L     R4,TSI@                 V(TSI)                           32750030
         USING TSI,R4                                                   32760030
        $LINK  EP=IKJURPS,                                             +32770030
               PARAM=(TSIECTP,    1    ECT ADDRESS                     +32780030
               URPNAME,           2    EP name                         +32790030
               TOKEN,             3    parameter                       +32800030
               RETCODE,           4    RETCODE FROM SETUP500           +32810030
               REASON,            5    REASON CODE FROM SETUP500       +32820030
               RETCODE2,          6    RETCODE FROM IKJURPS            +32830030
               DUMMY,             7    *DUMMY*                         +32840031
               DUMMY,             8    *DUMMY*                         +32850031
               DUMMY,             9    *DUMMY*                         +32860031
               =F'1')            10    issue messages                   32870030
         PR                                                             32880030
         DROP  R4,R12                  TSI,base                         32890033
         PUSH  USING                                                    32900000
         DROP                                                           32910016
*---------------------------------------------------------------------* 32920000
*                                                                     * 32930000
*        RESET EDIT macro                                             * 32940000
*                                                                     * 32950000
*---------------------------------------------------------------------* 32960000
SETUP800 BAKR  R14,0                   LOCAL BASE                       32970021
         LR    R12,R15                 base reg                         32980031
         USING SETUP800,R12                                             32990031
         L     R11,BASEADDR-SETUP800(,R15) literal pool                 33000031
         USING FASTPATH,R11                                             33010031
*  ISREDIT MACRO                                                        33020000
         LA    R1,ISREDIT1             ISREDIT MACRO                    33030000
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO                    33040021
*  ISREDIT RESET                                                        33050000
         LA    R1,ISREDIT2             ISREDIT RESET                    33060000
         LINK  SF=(E,ISPLINK$)         ISREDIT MACRO                    33070021
*  RETURN TO SYSTEM                                                     33080000
         SLR   R15,R15                 RETURN CODE                      33090000
         PR                            GOBACK WITH RC=00                33100021
         DROP                                                           33110000
ISREDIT1 DC    AL4($ISREDIT,F5,*+X'80000004'),C'MACRO'                  33120000
ISREDIT2 DC    AL4($ISREDIT,F5,*+X'80000004'),C'RESET'                  33130000
F5       DC    FL4'5'                                                   33140000
         DROP                                                           33150016
*---------------------------------------------------------------------* 33160000
*                                                                     * 33170000
*        URP Routine (executes under the IKJEFT09 TCB)                * 33180007
*                                                                     * 33190000
*        1. make myself resident                                      * 33200007
*        2. invoke the PRELOAD routine                                * 33210007
*        3. prime the timer to prevent S522 abends                    * 33220007
*                                                                     * 33230000
*---------------------------------------------------------------------* 33240000
SETUP500 BAKR  R14,0                   save regs                        33250030
         LR    R12,R15                 A(SETUP500)                      33260031
         USING SETUP500,R12                                             33270031
         L     R11,BASEADDR-SETUP500(,R15) literal pool                 33280031
         USING FASTPATH,R11                                             33290031
         L     R10,4(,R1)              A(DYNAM)                         33300030
         L     R10,0(,R10)             A(DYNAM)                         33310030
         USING DYNAM,R10                                                33320030
*                                                                       33330000
*        Prime the timer (unless we have TIME=1440)                     33340013
*                                                                       33350000
         L     R14,PSATOLD-PSA(0,0)    TCB of my task                   33360013
         USING TCB,R14                                                  33370013
         L     R14,TCBJSCB             job step control block           33380013
         USING IEZJSCB,R14                                              33390013
         L     R14,JSCSCT              Current step's SCT prefix        33400013
         USING INSMSCT-16,R14                                           33410013
         ICM   R14,B'0111',SCTXBTTR    address of SCTX (SCT extension)  33420013
         USING SCTXIN-16,R14                                            33430013
         CLC   SCTXSTL,=A(1440*60*100) TIME=1440?                       33440016
         BE    SETUP520                yes, do not issue STIMER         33450013
         DROP  R14                     temp base                        33460033
         L     R15,=A(STOP522)         PRIME TIMER                      33470030
         BALR  R14,R15              <- PRIME TIMER                      33480001
SETUP520 EQU   *                                                        33500013
*                                                                       33510000
         LOAD  EPLOC=OWNNAME           bump my use count                33520000
*                                                                       33530000
         L     R15,=A(PRELOAD)         jpa modules                      33540016
         BALR  R14,R15              <- preload some ISP/ISR modules     33550005
         SLR   R15,R15                 RC=0                             33560000
         PR                            goback                           33570000
BASEADDR DC    A(FASTPATH)             base addr for literal pool       33580018
         DROP                                                           33590009
*---------------------------------------------------------------------* 33600000
*                                                                     * 33610000
*        TIMER EXIT RTNE                                              * 33620001
*                                                                     * 33630000
*---------------------------------------------------------------------* 33640000
STOP522  BAKR  R14,0                   save regs                        33650030
&STOP522 SETC  'NO'                    STOP522(NO)                      33660030
         AIF   ('&SYSPARM' NE 'STOP522').STOP522X                       33670030
&STOP522 SETC  'YES'                   STOP522(YES)                     33680030
         LR    R12,R15                 A(STOP522)                       33690030
         USING STOP522,R12                                              33700030
         TIME  DEC                     R0=HHMMSSHH                      33710001
         CLM   R0,B'1100',STOP522T     PAST 19:00 ?                     33720030
         BH    STOP522X                YES, ALLOW S522 AGAIN            33730030
         LA    R10,DYNAML              length of dynamic storage area   33740016
         GETMAIN R,LV=(R10)            get dynamic storage              33750016
         LR    R13,R1                                                   33760001
         USING DYNAM,R13                                                33770009
         L     R1,CVTPTR(0,0)          CVT Address                      33780001
         L     R1,CVTSMCA-CVT(,R1)     SMF SMCA                         33790001
         L     R1,SMCAJWT-SMCABASE(,R1) JWT BIT 31 IS 1.048576 SECONDS  33800005
         LA    R0,100                  prepare MR                       33810005
         MR    R0,R0                   APPROX TIME IN 1/100 TH OF A SEC 33820005
         ST    R1,DWD                  STORE FOR STOP522 RTNE           33830030
         STIMERM SET,                                                  X33840001
               ID=DUMMY,               dummy parm                      X33850031
               BINTVL=DWD,             interval                        X33860001
               EXIT=STOP522,           exit addr                       X33870030
               MF=(E,STIMERL)                                           33880001
         FREEMAIN R,LV=(R10),A=(R13)   free dynamic storage             33890016
.STOP522X ANOP                                                          33900034
STOP522X PR                            GOBACK                           33910030
*                                                                       33920000
STOP522T DC    X'1900'                 19:00                            33930030
*                                                                       33940000
         POP   USING                                                    33950000
*********************************************************************** 33960000
*                                                                     * 33970000
*        Add Fast-path commands to ISPCMDS                            * 33980000
*                                                                     * 33990000
*********************************************************************** 34000000
ADDCMDS  BEGIN_PROC                                                     34010030
         L     R7,=V(ISPCMDS)          first table entry                34020031
         STRING ($ISPCMDS,,T),' updated',INTO=SHORTMSG                  34030043
&REST    SETC  'The following fast-path commands have been installed:'  34040007
         STRING (OWNNAME,,T),' &REL STOP522(&STOP522) - &REST',        X34050030
               INTO=LONGMSG                                             34060030
*LOOP                                                                   34070000
ADDCMDS1 LA    R1,=A($TBTOP,$ISPCMDS+VL)                                34080007
         LINK  SF=(E,ISPLINK$)         TBTOP ISPCMDS                    34090021
*                                                                       34100000
*        Build Command String for opening message                       34110018
*                                                                       34120000
         STRING (LONGMSG,,T),1X,((R7),8),INTO=LONGMSG                   34130018
*                                                                       34140000
         MVC   DWD,0(R7)               move verb                        34150018
         OC    DWD,BLANKS              ALL CAPS                         34160018
         ISPLINK ($VREPLACE,$ZCTVERB,=F'8',DWD)                         34170018
         LA    R7,8(,R7)               skip verb                        34180000
*                                                                       34190000
*        delete the table entry if it exists in ISPCMDS already         34200030
*                                                                       34210000
         LA    R1,=A($TBSCAN,$ISPCMDS,$ZCTVERB+VL)                      34220000
         LINK  SF=(E,ISPLINK$)         TBSCAN ISPCMDS ZCTVERB           34230021
         LTR   R15,R15                                                  34240000
         BNZ   ADDCMDS3                                                 34250007
         LA    R1,=A($TBDELETE,$ISPCMDS+VL)                             34260000
         LINK  SF=(E,ISPLINK$)         TBDELETE ISPCMDS                 34270021
*                                                                       34280000
*        Delete duplicate entries from SITE and USER command tables     34290030
*                                                                       34300000
ADDCMDS3 EQU   *                                                        34310030
         CLI   ISPFVM,X'42'            ISPF 4.2 or up?                  34320031
         BL    ADDCMDS5                no, jump                         34330031
         L     R4,TSI@                 R4->TSI                          34340031
         USING TSI,R4                                                   34350031
         ISPLINK ($TBTOP,TSILCTAB),ERRET=ADDCMDS4                       34360031
         ISPLINK ($TBSCAN,TSILCTAB,$ZCTVERB),ERRET=ADDCMDS4             34370031
         ISPLINK ($TBDELETE,TSILCTAB)  TBDELETE SITECMDS                34380031
ADDCMDS4 EQU   *                                                        34420030
         ISPLINK ($TBTOP,TSIUCTAB),ERRET=ADDCMDS5                       34430031
         ISPLINK ($TBSCAN,TSIUCTAB,$ZCTVERB),ERRET=ADDCMDS5             34440031
         ISPLINK ($TBDELETE,TSIUCTAB)  TBDELETE USERCMDS                34450031
         DROP  R4                      TSI                              34490031
ADDCMDS5 EQU   *                                                        34500030
         SLR   R2,R2                                                    34510030
         ISPLINK ($VREPLACE,$ZCTTRUNC,=F'1',(R7))                       34520000
         LA    R7,1(,R7)               skip trunc                       34530000
*                                                                       34540000
         IC    R2,0(,R7)               L'&ACT                           34550000
         ST    R2,DWD                  L'&ACT                           34560000
         STRING (1(R7),(R2)),INTO=COMMAND                               34570030
         CLC   =C'SELECT PGM(FASTPATH) ',COMMAND                        34580030
         BNE   *+10                                                     34590030
         MVC   COMMAND+11(L'OWNNAME),OWNNAME  FASTPATH->TESTPATH        34600030
         ISPLINK ($VREPLACE,$ZCTACT,DWD,COMMAND)                        34610030
         LA    R7,1(R2,R7)             point past &ACT                  34620000
*                                                                       34630000
         IC    R2,0(,R7)               L'&DESC                          34640000
         ST    R2,DWD                  length                           34650000
         ISPLINK ($VREPLACE,$ZCTDESC,DWD,1(R7))                         34660000
         LA    R7,1(R2,R7)             point past &DESC                 34670000
*                                                                       34680000
         LA    R1,=A($TBADD,$ISPCMDS+VL)                                34690000
         LINK  SF=(E,ISPLINK$)         TBADD ISPCMDS                    34700021
*                                                                       34710000
         CLI   0(R7),X'00'             end of table?                    34720000
         BNE   ADDCMDS1                not yet, keep doing it           34730007
*ENDLOOP                                                                34740000
         LA    R1,=A($TBTOP,$ISPCMDS+VL)                                34750000
         LINK  SF=(E,ISPLINK$)         TBTOP ISPCMDS                    34760021
         BAL   R14,SETMSG           <- send message                     34770018
*                                                                       34780000
         PR                            GOBACK                           34790001
*---------------------------------------------------------------------* 34800006
*        Issue message                                                * 34810030
*---------------------------------------------------------------------* 34820006
SETMSG   BEGIN_PROC                                                     34830030
         STRING (SHORTMSG,,T),INTO=SHORTMSG count characters in message 34840006
         ST    R15,DWD                 store length                     34850006
         ISPLINK ($VREPLACE,$ZEDSMSG,DWD,SHORTMSG)                      34860030
         STRING (LONGMSG,,T),INTO=LONGMSG count characters in message   34870006
         ST    R15,DWD                 store length                     34880006
         ISPLINK ($VREPLACE,$ZEDLMSG,DWD,LONGMSG)                       34890030
         LA    R7,0                    rc=0 (alarm=n)                   34900031
         LA    R1,=A($SETMSG,$ISRZ000,$COND+VL)                         34910030
         CLI   ALARM,C'Y'              ALARM=YES?                       34920030
         BNE   SETMSG6                 no, jump                         34930031
         LA    R7,8                    rc=8 (alarm=y)                   34940031
         LA    R1,=A($SETMSG,$ISRZ001,$COND+VL)  yes, use ISRZ001       34950030
SETMSG6  EQU   *                                                        34960031
         MVI   ALARM,C'N'              ALARM=NO (default)               34970030
         LINK  SF=(E,ISPLINK$)         SETMSG ISRZ000                   34980030
         LR    R15,R7                  pass return code                 34990031
         PR                            GOBACK                           35000006
*********************************************************************** 35010000
*                                                                     * 35020000
*        PARSE A COMMA-DELIMITED JCL PARM                             * 35030000
*                                                                     * 35040000
*        LA    R4,PARM                 PARM VALUE                     * 35050020
*        LH    R5,LENGTH               PARM LENGTH                    * 35060020
*        BAL   R14,PARSE_PARM                                         * 35070030
*        DC    S(L'PARM1,PARM1)        LENGTH,ADDR                    * 35080000
*        DC    S(L'PARM2,PARM2)        LENGTH,ADDR                    * 35090000
*                                                                     * 35100000
*********************************************************************** 35110000
PARSE_PARM BEGIN_PROC SAVE=SAVE                                         35120030
         BCTR  R4,0                    START OF PARM - 1                35130000
         ALR   R5,R4                   LAST BYTE OF PARM                35140000
*LOOP                                                                   35150000
PARSE_PARM1 SLR R0,R0                  R0 = 00000000                    35160020
         ICM   R0,B'0011',2(R14)       R0 = 0000BDDD                    35170000
         SRDL  R0,12(0)                R0 = 0000000B, R1= BBB.....      35180000
         SRL   R1,20(0)                R1 = 00000DDD DISPLACEMENT       35190000
         ALR   R1,R13                  ADD CALLER'S SAVE AREA ADDR      35200000
         LR    R6,R1                   ADDR OF TARGET FIELD             35210000
         LH    R7,0(,R14)              LENGTH OF TARGET FIELD           35220000
*                                                                       35230000
         LA    R2,1(,R4)               FIRST BYTE OF CURRENT PARAMETER  35240000
*--LOOP                                                                 35250000
PARSE_PARM2 LA R4,1(,R4)               BUMP POINTER                     35260020
         CLR   R4,R5                   END OF PARM REACHED?             35270000
         BH    PARSE_PARM3             YES, EXIT LOOP                   35280020
         CLI   0(R4),C','              DELIMITER?                       35290000
         BNE   PARSE_PARM2             NO, KEEP LOOPIN'                 35300020
*--ENDLOOP                                                              35310000
PARSE_PARM3 LR R3,R4                   POSITION OF ','                  35320020
         SR    R3,R2                   LENGTH OF SOURCE PARAM           35330000
         ICM   R3,B'1000',BLANKS       PADDING                          35340007
         MVCL  R6,R2                   MOVE SOURCE TO TARGET            35350000
         LA    R14,2+2(,R14)           NEXT TARGET                      35360020
         CLI   0(R14),0                IS THIS A FIELD DESCRIPTOR?      35370000
         BE    PARSE_PARM1             YES, PROCESS IT                  35380020
*ENDLOOP                                                                35390000
         RETURN (0,12)                 goback                           35400030
*********************************************************************** 35410015
*                                                                     * 35420000
*        Execute an in-storage REXX EXEC                              * 35430018
*                                                                     * 35440000
*          LA  R1,=A(stmt1,L'stmt1)    FIRST STMT ADDR/LEN            * 35450018
*          LA  R0,8                    LENGTH OF ADDR/LEN ARRAY       * 35460018
*          LA  R2,TENWORDS+16          ADDR OF ARG LIST OR ZERO       * 35470018
*                                                                     * 35480000
*********************************************************************** 35490015
RUNEXEC  BEGIN_PROC                                                     35500030
         LA    R6,DYNAM_INSTBLK_HEADER ADDR OF IN-STORAGE BLOCK         35510015
         USING INSTBLK_HEADER,R6                                        35520015
         ST    R1,INSTBLK_ADDRESS      STORE INTO IN-STORAGE BLOCK      35530015
         ST    R0,INSTBLK_USEDLEN      COUNT STATEMENTS                 35540015
         ST    R6,PTR_INSTBLK          ADDR OF IN-STORAGE BLOCK         35550015
         MVC   INSTBLK_ACRONYM,=C'IRXINSTB'                             35560015
         MVC   INSTBLK_HDRLEN,=A(L'INSTBLK_HEADER)                      35570015
         MVC   INSTBLK_MEMBER,BLANKS                                    35580015
         MVC   INSTBLK_DDNAME,=C'SYSIN   '                              35590015
         MVC   INSTBLK_SUBCOM,BLANKS                                    35600015
*                                                                       35610000
         LA    R7,DYNAM_EVALBLOCK      ADDR OF EVAL BLOCK               35620030
         USING EVALBLOCK,R7                                             35630030
         ST    R7,PTR_EVALBLOCK        ADDR OF EXEC BLOCK               35640030
         LA    R0,EVALBLOCK_LENGTH/8   LENGTH IN DOUBLE-WORDS           35650030
         ST    R0,EVALBLOCK_EVSIZE     LENGTH IN DOUBLE-WORDS           35660030
         LA    R0,256                  LENGTH OF DATA IN BYTES          35670030
         ST    R0,EVALBLOCK_EVLEN      LENGTH OF DATA IN BYTES          35680030
*                                                                       35690000
*?       ISPLINK ($CONTROL,$DISPLAY,$SAVE) CONTROL DISPLAY SAVE         35700046
        $LINK  EP=IRXEXEC,             REXX Interpreter                X35710025
               PARAM=(=A(0),           EXEC BLOCK                      X35720030
               (R2),                   ARGUMENTS,                      X35730015
               =X'80000000',           Invoke as a command             X35740030
               PTR_INSTBLK,            IN-STORAGE BLOCK                X35750015
               =A(0),                  CPPL                            X35760015
               PTR_EVALBLOCK,          EVAL BLOCK                      X35770030
               =A(0),                  WORK AREA                       X35780015
               =A(0))                  USER WORK AREA                   35790023
*?       ISPLINK ($CONTROL,$DISPLAY,$RESTORE) CONTROL DISPLAY RESTORE   35800046
*                                                                       35810046
         ICM   R1,B'1111',EVALBLOCK_EVLEN length of the returned data   35820030
         BNP   RUNEXEC8                no data returned, exit           35830030
         BCTR  R1,0                    for "EX"                         35840030
         EX    R1,RUNEXECP             pack the result                  35850030
         CVB   R1,DWD                  return code from EXEC            35860030
         PR                                                             35870030
RUNEXEC8 EQU   *                                                        35880030
         BSM   R1,0                    no RC, return negative value     35890030
         PR                                                             35900015
RUNEXECP PACK  DWD,EVALBLOCK_EVDATA(*-*) pack the result                35910030
         DROP  R6,R7                                                    35920030
*********************************************************************** 35930031
*                                                                     * 35940031
*        Issue RACROUTE to check level of access to a data set        * 35950031
*                                                                     * 35960031
*        Input: ZWRKDSN contains dsname                               * 35970031
*                                                                     * 35980031
*        Output: R0 = 12  access(UNKNOWN)                             * 35990031
*                R0 = 0   access(NONE)                                * 36000031
*                R0 = 4   access(READ)                                * 36010031
*                R0 = 8   access(UPDATE)                              * 36020031
*                R0 = 12  access(CONTROL)                             * 36030031
*                R0 = 16  access(ALTER)                               * 36040031
*                                                                     * 36050031
*********************************************************************** 36060031
RACHECK  BEGIN_PROC                                                     36070031
         BAL   R14,LISTDSI          <- FLAGS                            36080033
         LTR   R15,R15                 catalogued data set?             36090031
         BNZ   RACHECK9                no, use default                  36100031
*                                                                       36110034
*        Check for ACF2 or Top-Secret                                   36120034
*                                                                       36130034
         L     R6,CVTPTR(0,0)          CVT Address                      36140034
         USING CVTMAP,R6                                                36150034
         ICM   R6,B'1111',CVTRAC       RACF VECTOR TABLE                36160034
         BZ    RACHECK9                no security system, exit         36170034
         USING RCVT,R6                                                  36180034
         CLC   RCVTID,=C'ACF2'         Is this ACF2?                    36190034
         BE    RACHECK9                yes, exit                        36200034
         CLC   RCVTID,=C'RTSS'         Is this Top-secret?              36210034
         BE    RACHECK9                yes, exit                        36220034
*                                                                       36230034
*        Check if ACF2 is on the system when RACFID='RCVT'              36240034
*                                                                       36250034
         TM    RCVTSTAT,RCVTRNA        RACF Inactive?                   36260034
         BO    RACHECK9                yes, exit                        36270034
         CLI   RCVTDSNL,0              Is it really RACF?               36280034
         BZ    RACHECK9                no, exit                         36290034
*                                                                       36300000
*        Check RACF status                                              36310031
*                                                                       36320000
         LA    R6,RACF_DYN             POINT TO MY SAF PARM LIST        36330031
         USING SAFP,R6                                                  36340031
         MVC   SAFP(RACF_LEN),RACF_MOD                                  36350031
         RACROUTE REQUEST=AUTH,                                        X36360031
               ENTITY=RACFDSN,         DATA SET NAME                   X36370031
               WORKA=RACFWORK,                                         X36380031
               MF=(E,SAFP)                                              36390031
         LR    R2,R15                  save SAF return code             36400031
*                                                                       36410000
*        build a RACHECK failure message in case the invoker needs it.  36420031
*                                                                       36430000
         STRING 'Authorization Failed',INTO=SHORTMSG                    36440031
         STRING 'RACROUTE REQUEST=AUTH,STATUS=ACCESS returned the folloX36450031
               wing: R15=',((R2),,R3Z),                                X36460031
               ' SAFPRRET=',(SAFPRRET,F,R3Z),                          X36470031
               ' SAFPRREA=',(SAFPRREA,F,R3Z),                          X36480031
               ' DSNAME=''',(RACFDSN,,T),'''',                         X36490031
               INTO=LONGMSG                                             36500031
         LTR   R15,R2                  any RACF decision ?              36510031
         BNZ   RACHECK9                no, use default                  36520031
         CLI   SAFPRRET+3,20           access returned?                 36530031
         BNE   RACHECK9                no, use default                  36540031
         L     R0,SAFPRREA             access into R0                   36550031
         STC   R0,RACHECK_ACCESS       save for caller                  36560031
         PR                                                             36570031
RACHECK9 EQU   *                                                        36580031
         MVI   RACHECK_ACCESS,ACCESS_CONTROL Default access             36590031
         PR                                                             36600031
         DROP  R6                      SAFP                             36610031
*                                                                       36620000
RACF_MOD RACROUTE REQUEST=AUTH,        CHECK AUTHORIZATION             X36630031
               CLASS='DATASET',        CHECK FOR DATASET AUTHORITY     X36640031
               DSTYPE=M,               MODEL                           X36650031
               STATUS=ACCESS,          RETURN USER'S CURRENT ACCESS    X36660031
               RELEASE=1.9,            RACF LEVEL                      X36670031
               MF=L                                                     36680031
*********************************************************************** 36690033
*                                                                     * 36700033
*        Check if a data set is migrated by HSM.                      * 36710033
*        If it is, ask for permission to HRECALL it.                  * 36720033
*                                                                     * 36730033
*********************************************************************** 36740033
CHKMIGR  BEGIN_PROC                                                     36750033
         CLC   CATVOL,=C'MIGRAT'       MIGRATED BY HSM?                 36760033
         BNE   CHKMIGR9                no, exit                         36770033
         MVI   DWD,C'1'                ML1 (disk)                       36780033
         CLI   CATDEVT+2,X'80'         migrated to tape?                36790033
         BNE   *+8                     no, jump                         36800033
         MVI   DWD,C'2'                ML2 (tape)                       36810033
         STRING 'Dataset(',(ZWRKDSN,,T),                               X36820033
               ') is migrated to ML',(DWD,1),                          X36830033
               '; Enter Y to RECALL it:',                              X36840033
               INTO=STRING1                                             36850033
         TPUT  STRING1,(R15),ASIS      write message (WRITENR)          36860033
         TGET  DWD+4,1                 get reply (one byte only)        36870033
         OI    DWD+4,C' '              uppercase                        36880033
         CLI   DWD+4,C'Y'              REPLY=Y ?                        36890033
         BE    CHKMIGR9                yes, exit                        36900033
         STRING 'Migrated Data Set',INTO=SHORTMSG                       36910033
         STRING 'Dataset(',(ZWRKDSN,,T),                               X36920033
               ') is migrated to ML',(DWD,1),                          X36930033
               INTO=LONGMSG                                             36940033
         MVI   ALARM,C'Y'              error, beep.                     36950033
         BAL   R14,SETMSG           <- send message                     36960033
         LA    R15,4                   no, RC=4                         36970033
         PR                                                             36980033
CHKMIGR9 SLR   R15,R15                 not migrated (RC=0)              36990033
         PR                                                             37000033
*********************************************************************** 37010019
*                                                                     * 37020000
*        Issue LOCATE macro to check for the existence of a data set  * 37030020
*                                                                     * 37040000
*********************************************************************** 37050019
LISTDSI  BEGIN_PROC                                                     37060030
         CLI   CATVOL,0                LOCATE performed already?        37070033
         BNE   LISTDSI8                yes, exit                        37080033
*                                                                       37090000
*        Remove member name and copy dsname to RACFDSN                  37100033
*                                                                       37110000
         LA    R0,L'RACFDSN            max length of dsname             37120035
         LA    R2,ZWRKDSN              START OF DSNAME                  37130035
*loop                                                                   37140035
LISTDSI2 CLI   0(R2),C'('              member name?                     37150035
         BE    LISTDSI3                yes, exit loop                   37160033
         LA    R2,1(,R2)               bump pointer                     37170035
         BCT   R0,LISTDSI2                                              37180035
*endloop                                                                37190035
LISTDSI3 STRING (ZWRKDSN,(R2)),INTO=RACFDSN move dsname w/o mbr name    37200035
         OC    RACFDSN,BLANKS          upper-case                       37210033
*                                                                       37220000
*        Retrieve true name from catalog                                37230035
*                                                                       37240000
         L     R14,LISTDSI_CAMLST      FLAGS                            37250019
         LA    R15,RACFDSN             DSNAME                           37260033
         SLR   R0,R0                   NO CVOL                          37270019
         LA    R1,RACFWORK             265 BYTES                        37280031
         STM   R14,R1,TENWORDS         relocate CAMLST                  37290019
         LOCATE TENWORDS               read catalog                     37300019
         LTR   R15,R15                 CATALOGUED DSN?                  37310033
         BNZ   LISTDSI7                no, exit                         37320033
         MVC   CATVOL,RACFWORK+6       yes, save volser                 37330033
         MVC   CATDEVT,RACFWORK+2      yes, save device type            37340033
*                                                                       37350035
*        Rebuild DSNAME(MEMBER) with true name instead of alias         37360035
*                                                                       37370035
         STRING (RACFDSN,44,T),((R2),ZWRKDSN+L'ZWRKDSN),               X37380035
               INTO=(RACFWORK+44,L'ZWRKDSN)                             37390035
         MVC   ZWRKDSN,RACFWORK+44     true name                        37400035
         SLR   R15,R15                 rc=0 (cataloged)                 37410035
LISTDSI7 PR                                                             37420033
*                                                                       37430000
LISTDSI8 SLR   R15,R15                 rc=0 (already LOCATEd)           37440033
         PR                                                             37450033
*                                                                       37460000
LISTDSI_CAMLST CAMLST NAME,0,,0                                         37470019
*********************************************************************** 37480010
*                                                                     * 37490031
*        LMINIT/VIEW/LMFREE via DDname                                * 37500031
*                                                                     * 37510031
*        MACLIBDD contains the DDname                                 * 37520031
*        STRING1 contains the dsnames                                 * 37530031
*                                                                     * 37540031
*********************************************************************** 37550010
LMVIEW   BEGIN_PROC                                                     37560030
         DEVTYPE MACLIBDD,DWD                                           37570023
         LTR   R15,R15                 ALREADY ALLOCATED?               37580015
         BZ    LMVIEW3                 YES, JUMP                        37590015
*                                                                       37600000
*        Issue ALLOCATE command to allocate specified data sets         37610031
*                                                                       37620000
         STRING 'CMD(ALLOCATE DD(',MACLIBDD,') SHR DS(',(STRING1,,T),  X37630031
               ')) MODE(FSCR)',INTO=COMMAND                             37640031
         ST    R15,DWD                 store length                     37650015
         L     R1,CVTPTR(0,0)          CVT Address                      37660019
         L     R1,CVTLINK-CVTMAP(,R1)  DCB for SYS1.LINKLIB             37670019
         LOAD  EP=ALLOC,DCB=(R1)       pre-load ALLOCATE command        37680019
         ISPLINK ($SELECT,DWD,COMMAND),ERRET=LMVIEW9                    37690015
*                                                                       37700000
*        Issue LMINIT/VIEW/LMFREE                                       37710031
*                                                                       37720000
LMVIEW3  EQU   *                                                        37730031
         STRING 'LMINIT DATAID(ID1) DDNAME(',MACLIBDD,') ENQ(SHRW)',   X37740023
               INTO=COMMAND                                             37750015
         BAL   R14,ISPEXEC          <- execute command                  37760015
         LTR   R15,R15                 COMMAND OK ?                     37770015
         BNZ   LMVIEW9                 NO, EXIT                         37780015
         LA    R0,L'DATAID             max length                       37790015
         ST    R0,DWD                  max length                       37800015
         ISPLINK ($VCOPY,=C'ID1 ',DWD,DATAID,$MOVE),ERRET=LMVIEW9       37810031
         STRING VIEWEDIT,' DATAID(',DATAID,') MEMBER(',(OPT,,T),       X37820033
               ') PROFILE(',(PARM3,8,T),')',INTO=COMMAND                37830033
         CLI   VIEWEDIT,C'V'           VIEW?                            37840023
         BNE   LMVIEW4                 no, jump                         37850023
         CLI   ISPFVM,X'41'            ISPF 4.1 or up?                  37860015
         BNL   LMVIEW4                 yes, jump                        37870015
         STRING 'BROWSE DATAID(',DATAID,') MEMBER(',(OPT,,T),')',      X37880033
               INTO=COMMAND                                             37890015
LMVIEW4  EQU   *                                                        37900015
         BAL   R14,ISPEXEC          <- execute command                  37910015
         LR    R7,R15                  save return code                 37920015
         STRING 'LMFREE DATAID(',DATAID,')',INTO=COMMAND                37930015
         BAL   R14,ISPEXEC          <- execute command                  37940015
         LR    R15,R7                  restore return code              37950015
LMVIEW9  EQU   *                                                        37960031
         PR                                                             37970031
*********************************************************************** 37980033
*                                                                     * 37990033
*        Allocate or retrieve the XCTL Reusable Work Area             * 38000033
*                                                                     * 38010033
*********************************************************************** 38020033
XCTLGET  BEGIN_PROC                                                     38030033
         L     R1,CVTPTR(0,0)          CVT address                      38040034
         L     R2,CVTLINK-CVTMAP(,R1)  addr of SYS1.LINKLIB DCB         38050034
         LA    R3,=A(IEANT_TASK_LEVEL) SCOPE                            38060034
         LA    R4,XCTLNAME             NAME (16 bytes)                  38070034
         LA    R5,RACFWORK             TOKEN (16 bytes)                 38080034
         LA    R6,RETCODE              RETURN CODE                      38090034
         STM   R3,R6,PARMLIST          BUILD PARM LIST                  38100034
         OI    PARMLIST+12,X'80'       BUILD PARM LIST                  38110034
         LOAD  EP=IEANTRT,DCB=(R2)     SYS1.CSSLIB                      38120034
         LR    R15,R0                  pass EP addr                     38130034
         LA    R1,PARMLIST             parms for IEANTRT                38140034
         BASR  R14,R15              <- invoke IEANTRT                   38150034
         LTR   R15,R15                 already allocated?               38160033
         BZ    XCTLGET9                yes, exit                        38170033
         GETMAIN RU,LV=XCTLWORKL,LOC=ANY allocate work area             38180033
         XC    RACFWORK(16),RACFWORK   clear 16 bytes                   38190033
         ST    R1,RACFWORK                                              38200033
         LA    R6,=F'0'                PERSIST option                   38230034
         LA    R7,RETCODE              RETURN CODE                      38240034
         STM   R3,R7,PARMLIST          BUILD PARM LIST                  38250034
         OI    PARMLIST+16,X'80'       BUILD PARM LIST                  38260034
         LOAD  EP=IEANTCR,DCB=(R2)     SYS1.CSSLIB                      38270034
         LR    R15,R0                  pass EP addr                     38280034
         LA    R1,PARMLIST             parms for IEANTRT                38290034
         BASR  R14,R15              <- invoke IEANTCR                   38300034
XCTLGET9 L     R1,RACFWORK             return area address              38310033
         PR                                                             38320033
         DROP  R12                     local base                       38330033
*                                                                       38340000
XCTLNAME DC    CL16'FASTPATHXCTLWORK'  name for N/T service             38350033
IEANT_TASK_LEVEL EQU 1                                                  38360033
*                                                                       38370000
XCTLWORK DSECT                         XCTL Reusable Work Area          38380033
XCTLPARM DS    A(XCTLLEN,XCTLCMD)                                       38390033
XCTLLEN  DS    A(L'XCTLCMD)                                             38400033
XCTLCMD  DS    CL(L'COMMAND)                                            38410033
XCTLWORKL EQU  *-XCTLWORK                                               38420033
*********************************************************************** 38430000
$LTORG   LOCTR                                                          38440030
$STRING2 AH    R15,0(,R15)                                              38450034
         BR    R15                                                      38460034
ISPLINK$ LINK  EP=ISPLINK,SF=L                                          38470030
$ISPEXEC  DC   C'ISPEXEC '             PROGRAM                          38480033
$ISREDIT  DC   C'ISREDIT '             PROGRAM                          38490000
$ISRBRO   DC   C'ISRBRO  '             PROGRAM                          38500000
$ISRUDA   DC   C'ISRUDA  '             PROGRAM                          38510008
$CONTROL  DC   C'CONTROL'              FUNCTION                         38520000
$SELECT   DC   C'SELECT '              FUNCTION                         38530033
$SETMSG   DC   C'SETMSG'               FUNCTION                         38540000
$TBADD    DC   C'TBADD'                FUNCTION                         38550000
$TBDELETE DC   C'TBDELETE'             FUNCTION                         38560000
$TBSCAN   DC   C'TBSCAN'               FUNCTION                         38570000
$TBTOP    DC   C'TBTOP'                FUNCTION                         38580000
$VCOPY    DC   C'VCOPY'                FUNCTION                         38590000
$VDEFINE  DC   C'VDEFINE'              FUNCTION                         38600000
$VERASE   DC   C'VERASE'               FUNCTION                         38610030
$VGET     DC   C'VGET'                 FUNCTION                         38620000
$VPUT     DC   C'VPUT'                 FUNCTION                         38630000
$VREPLACE DC   C'VREPLACE'             FUNCTION                         38640000
$VRESET   DC   C'VRESET'               FUNCTION                         38650000
$CHAR     DC   C'CHAR'                 OPTION                           38660000
$ERRORS   DC   C'ERRORS'               OPTION                           38670000
$MOVE     DC   C'MOVE'                 OPTION                           38680000
$PROFILE  DC   C'PROFILE'              OPTION                           38690000
$RETURN   DC   C'RETURN'               OPTION                           38700000
$ZERRMSG  DC   C'ZERRMSG '             VARIABLE                         38710000
$EDBR0000 DC   C'EDBR0000'             VARIABLE                         38720000
$ISPCMDS  DC   C'ISPCMDS '             VARIABLE                         38730000
$ZCTACT   DC   C'ZCTACT '              VARIABLE                         38740018
$ZCTDESC  DC   C'ZCTDESC '             VARIABLE                         38750000
$ZCTTRUNC DC   C'ZCTTRUNC'             VARIABLE                         38760000
$ZCTVERB  DC   C'ZCTVERB '             VARIABLE                         38770000
$ISRZ000  DC   C'ISRZ000 '             MSGID (ALARM=NO)                 38780030
$ISRZ001  DC   C'ISRZ001 '             MSGID (ALARM=YES)                38790030
$ZEDLMSG  DC   C'ZEDLMSG '             VARIABLE                         38800030
$ZEDSMSG  DC   C'ZEDSMSG '             VARIABLE                         38810030
$COND     DC   C'COND '                OPTION                           38820018
VL       EQU   X'80000000'             end of list indicator            38830000
*********************************************************************** 38840000
*                                                                     * 38850000
*        Dynamic Storage           <-- R13    RMODE=24                * 38860049
*                                                                     * 38870000
*********************************************************************** 38880000
DYNAM    DSECT                                                          38890000
         DS    18F                     SAVE AREA                        38900000
TENWORDS DS    10F                     WORK AREA                        38910000
PARMLIST DS    12F                     parm list for ISPLINK/ISPEXEC    38920023
DWD      DS    D                       WORK AREA                        38930000
LLIBDCB  DS    V(IHADCB)               LIBDEF ISPLLIB DCB               38940031
CDE@     DS    V(CDENTRY)              own CDE                          38950031
TLD@     DS    V(TLD)                  ISPF TLD                         38960029
TSI@     DS    V(TSI)                  ISPF TSI                         38970030
CMD@     DS    A,F                     cmd entered by user (addr,len)   38980034
OWNNAME  DS    CL8'FASTPATH'           my own name                      38990030
OWNNAME2 DS    CL8'FASTPATH'           my own name (UNLOAD)             39000033
CMDNAME  DS    CL8'FSTSO'              Name of the ISPF command         39010034
*                                                                       39020000
ZENVIR   DS    CL32'ISPF 3.2'          CURRENT ISPF LEVEL               39030018
ZAPPLID  DS    C'ISF '                 CURRENT ISPF APPLICATION ID      39040018
ZUSER    DS    C'GILBERT'              USER ID                          39050030
ZPREFIX  DS    CL8'SYSTEM99'           Data Set Prefix                  39060030
ZSCREEN  DS    C'32'                   Screen number                    39070030
ZDEL     DS    C';'                    Command Delimiter ";"            39080030
ZSPLIT   DS    C'YES'                  Split screen                     39090030
ZWSCON   DS    CL64                    Workstation connection           39100038
*                                                                       39110000
         DS    0D                                                       39120030
FUNCTION DS    CL8                     FUNCTION                         39130000
OPT      DS    CL56                    2ND OPTION FROM PARM             39140020
PARM3    DS    CL100                   3RD OPTION FROM PARM             39150027
PARM4    DS    CL8                     4TH OPTION FROM PARM             39160020
NEWAPPL  DS    C'ISR '                 NEW ISPF APPL ID                 39170000
NEWPGM   DS    CL8                     NEXT PGM                         39180000
NEWPANEL DS    CL8                     NEXT PANEL                       39190000
NEWCMD   DS    CL8                     NEXT COMMAND                     39200013
OPT8     DS    CL8                     1st 8 chars of OPT               39210029
OPTADDR  DS    A(OPT,L'OPT)            addr of 2nd parm                 39220031
OPTLEN   EQU   OPTADDR+4,4,C'F'        length of 2nd parm               39230031
OPT2     DS    CL(L'OPT)               work area                        39240000
BLANKS   DS    CL(L'ZREFTYPE+L'ZWRKVOL+L'ZWRKDSN)' '                    39250034
         DC    0S((L'BLANKS-L'OPT-4095)/4096)  ASSERT L'BLANKS,GE,L'OPT 39260034
GAP      DS    F                       first gap found                  39270000
PRJ1     DS    CL8                   1                                  39280000
LIB1     DS    CL8                   2                                  39290000
LIB2     DS    CL8                   3                                  39300000
LIB3     DS    CL8                   4                                  39310000
LIB4     DS    CL8                   5                                  39320000
TYP1     DS    CL8                   6                                  39330000
PROF     DS    CL8                   7                                  39340000
MIX      DS    CL8                   8                                  39350000
FNAM     DS    CL8                   9                                  39360000
ZEDLOCK  DS    CL8                  10                                  39370004
ZEDLOCKP DS    CL8                  11                                  39380004
ZPCFMCN  DS    CL8                  12                                  39390004
ZVIEW    DS    CL8                  13                                  39400004
ZVIMAC   DS    CL8                  14                                  39410004
ZVPROF   DS    CL8                  15                                  39420004
ZEDITWS  DS    CL8                  16 view/edit 4.2                    39430031
ZVIEWWS  DS    CL8                  17 view/edit 4.2                    39440031
*                                                                       39450000
ZREFTYPE DS    CL1                   1 WORK-PLACE                       39460034
ZWRKVOL  DS    CL6                   2 WORK-PLACE                       39470034
ZWRKDSN  DS    CL56                  3 WORK-PLACE                       39480031
*                                                                       39490000
         DS    0D                                                       39500034
STRING1  DS    CL200,CL100                                              39510019
COMMAND  DS    CL200                                                    39520008
SHORTMSG DS    CL20                    ISREZ000                         39530030
LONGMSG  DS    CL512                   ISREZ000                         39540030
TRNTBL   EQU   RACFWORK,256,C'C'       TRT Table                        39550030
PLUSSIGN DS    C'+'                    last char of the command         39560034
ISPFVM   DS    X'35'                   CURRENT ISPF LEVEL               39570014
ALARM    DS    C'N'                    ALARM=Y/N for SETMSG rtne        39580030
QFLAG    DS    X                                                        39590010
ATTR1    DS    X                       CDATTR                           39600030
RACHECK_ACCESS DS FL1                  RACHECK                          39610031
ACCESS_READ EQU 4                      READ access                      39620031
ACCESS_UPDATE EQU 8                    UPDATE access                    39630031
ACCESS_CONTROL EQU 12                  CONTROL access                   39640031
URPNAME  DS    CL8                     name of the URP                  39650030
BRDSN    DS    CL44                    CNAEEDIT/CNAEBROW                39660030
BRMEM    DS    CL8                     CNAEEDIT/CNAEBROW                39670030
BRVOL    DS    C'VOLSER'               CNAEEDIT/CNAEBROW                39680030
CATVOL   DS    C'VOLSER'               volser from LOCATE macro         39690033
CATDEVT  DS    XL4                     device type from LOCATE macro    39700033
MACLIBDD DS    CL8'$$MACLIB'           ddname for MACLIB/PARMLIB        39710023
VIEWEDIT DS    CL4'VIEW'               VIEW/EDIT FOR MACLIB/PARMLIB     39720023
ZERRMSG  DS    C'ZERRMSG '             VARIABLE                         39730000
ZTEMPN   DS    C'ISR12345'             VARIABLE                         39740018
ZMLPS    DS    C'NO '                  VARIABLE                         39750044
ZSEQ     DS    C'12345'                VARIABLE                         39760044
EDBRNNNN DS    C'EDBRNNNN '            VARIABLE NAME                    39770000
EDBR0000 DS    C'NNNN'                 VARIABLE VALUE                   39780000
DATAID   DS    CL8                     LMINIT                           39790020
TOKEN    DS    F                       IKJURPS                          39800000
RETCODE  DS    F                       IKJURPS                          39810000
REASON   DS    F                       IKJURPS                          39820000
RETCODE2 DS    F                       IKJURPS                          39830000
REASON2  DS    F                       IKJURPS                          39840000
         CSVQUERY MF=(L,CSVQRYWK)                                       39850030
LOADLEN  DS    A,F                     load point address & length      39860031
DUMMY    DS    F                       dummy return area                39870031
STIMERL  STIMERM SET,MF=L                                               39880001
ATTACHL  ATTACH SF=L                                                    39890027
PTR_INSTBLK DS A(DYNAM_INSTBLK_HEADER)                                  39900030
DYNAM_INSTBLK_HEADER DS XL(L'INSTBLK_HEADER)                            39910015
PTR_EVALBLOCK DS A(DYNAM_EVALBLOCK)                                     39920030
DYNAM_EVALBLOCK DS XL(EVALBLOCK_LENGTH)                                 39930030
STACKL   STACK MF=L                                                     39940020
*                                                                       39950000
ZSCREEND DS    F'24'                   SCREEN DEPTH (ROWS)              39960031
ZSCREENW DS    F'80'                   SCREEN WIDTH (COLUMNS)           39970031
CURRLINE DC    F'0'                    CURRENT LINE                     39980031
*                                                                       39990000
RACF_DYN RACROUTE REQUEST=AUTH,RELEASE=1.9,MF=L                         40000029
RACF_LEN EQU   *-RACF_DYN                                               40010029
RACFWORK DS    XL512                   RACROUTE WORK AREA               40020031
RACFDSN  DS    CL44                    dsname for RACROUTE              40030031
DYNAML   EQU   *-DYNAM                                                  40040000
*                                                                       40050000
         STRING GENERATE                                                40060034
         DROP                                                           40070009
*********************************************************************** 40080000
*                                                                     * 40090000
*        Make some PDF modules resident in JPAQ                       * 40100034
*                                                                     * 40110000
*        The purpose of this routine is to speed up access            * 40120007
*        to some PDF functions (Edit, Browse) when ISPLLIB and        * 40130005
*        STEPLIB contain large numbers of libraries.                  * 40140005
*                                                                     * 40150000
*        LOAD and IDENTIFY macros are used to clone the LPDE,         * 40160005
*        create two CDEs and one XTLST for each module and chain      * 40170005
*        the CDEs to the JPAQ.  Note that the modules                 * 40180005
*        themselves are not duplicated, the only version that         * 40190005
*        exists is the one in PLPA; all we do here is to create       * 40200005
*        entries in the JPAQ that point to the PLPA modules.          * 40210005
*                                                                     * 40220000
*        Using this technique allows you to avoid time-consuming      * 40230005
*        directory searches whenever you invoke the most common       * 40240005
*        PDF functions.                                               * 40250005
*                                                                     * 40260000
*        If you're lucky enough that you have no ISPLLIB or           * 40270005
*        STEPLIB, this won't do you any good, but it won't do         * 40280005
*        you any harm either.                                         * 40290005
*                                                                     * 40300000
*        If you're so unlucky that ISPF/PDF is in the link-list       * 40310005
*        and not in the LPA on your system (shame on your system      * 40320005
*        programmers), then this will definitely help you.            * 40330005
*                                                                     * 40340000
*********************************************************************** 40350000
PRELOAD  CSECT                                                          40360005
PRELOAD  RMODE ANY                                                      40370005
         BAKR  R14,0                   save registers                   40380005
         LR    R12,R15                                                  40390034
         USING PRELOAD,R12                                              40400034
         BAL   R7,PRELOAD1          <- issue LOAD/IDENTIFY              40410005
         DC    C'ISRBRO  '             PDF 1                            40420005
         DC    C'ISREDIT '             PDF 2                            40430005
         DC    C'ISRUDA  '             PDF 3.1 & 3.2                    40440005
         DC    C'ISRUMC  '             PDF 3.3                          40450005
         DC    C'ISRUDL  '             PDF 3.4                          40460005
         DC    C'ISRPTC  '             PDF 6                            40470005
         DC    C'ISRSUBS '             PDF RMODE31 routines             40480005
         DC    C'ISRSUBX '             PDF RMODE24 routines             40490005
*                                                                       40500000
         DC    C'ISPEXEC '             ISPF application interface       40510005
         DC    C'ISPQRY  '             ISPF application interface       40520005
         DC    C'ISPSAM  '             ISPF Status Area Manager         40530031
         DC    C'ISPTUTOR'             ISPF Tutorial                    40540018
*                                                                       40550000
         DC    C'IKJURPS '             TSO/E Unauth Resource Processor  40560031
         DC    C'IEANTCR '             Name/Token Create                40570033
         DC    C'IEANTRT '             Name/Token Retrieve              40580033
*                                                                       40590000
         DC    C'IRXINIT '             REXX main pgm                    40600005
         DC    C'IRXEXEC '             REXX interpreter                 40610018
         DC    C'IRXSTAMP'             REXX stack manager               40620005
         DC    C'IRXAPPC '             REXX APPC interface              40630005
         DC    C'IRXECUSP'             REXX ?                           40640005
*                                                                       40660000
         DC    C'ALLOCATE'             TSO ALLOCATE command             40670005
         DC    C'EXEC    '             TSO EXEC command                 40680005
         DC    C'CALL    '             TSO CALL command                 40690005
         DC    C'DELETE  '             TSO DELETE command               40700005
         DC    C'IDCSATO '             IDCAMS interface for TSO         40710005
         DC    C'HELP    '             TSO HELP command                 40720005
         DC    C'SUBMIT  '             TSO SUBMIT command               40730005
         DC    C'RECEIVE '             TSO RECEIVE command              40740013
         DC    C'END     '             TSO END command                  40750031
*                                                                       40760000
*                                                                       40850000
*        Preload system programs                                        40860000
*                                                                       40870000
         DC    C'IEFEB4UV'             DEVICE TYPE SCAN ROUTINE         40880005
         DC    C'IGGCSI00'             Catalog Search Interface         40890018
*                                                                       40910000
*        Preload programs from FILE183.LOAD                             40920000
*                                                                       40930000
         DC    C'BR      '             BROWSE command                   40940005
         DC    C'COMPRESS'             COMPRESS command                 40950045
         DC    C'CUTPGM  '             CUT/PASTE EDIT macros            40960005
         DC    C'LCA     '             LCAT command                     40970050
         DC    C'RXSMS   '             RXSMS program                    40980034
         DC    C'REXXTRY '             REXXTRY command                  40990031
         DC    C'ROUTEPGM'             ROUTE EDIT macro                 41000005
         DC    C'SHOWJPAQ'             SHOWJPAQ command                 41010046
         DC    C'STEMDISP'             ALIAS of STEMEDIT (REXX)         41020015
         DC    C'STEMVIEW'             ALIAS of STEMEDIT (REXX)         41030045
         DC    C'STEMEDIT'             Name of STEMEDIT (REXX)          41040045
         DC    C'SYSDEBUG'             SYSDEBUG                         41050045
         DC    C'VV      '             VV command (VSAM VIEW)           41060045
         DC    C'XDUPPGM '             XDUP EDIT Macro                  41070046
*                                                                       41080000
         DC    X'FFFF'                 end of table                     41090005
*loop                                                                   41100005
PRELOAD1 L     R3,CVTPTR(0,0)          CVT address                      41110005
         USING CVTMAP,R3                                                41120005
         GETMAIN R,LV=80               work area for BLDL               41130007
         XC    0(16,R1),0(R1)          clear 16 bytes                   41140007
         LR    R4,R1                   pass the address                 41150007
         USING PDS2-4,R4                                                41160007
         MVI   1(R4),1                 BLDLIST                          41170005
         MVI   3(R4),80                BLDLIST                          41180007
         MVC   PDS2NAME,0(R7)          module name                      41190007
*                                                                       41210000
*        JOB PACK AREA (JPAQ)                                           41220007
*                                                                       41230000
         L     R8,PSATOLD-PSA(0,0)     Current TCB                      41240005
         L     R8,TCBJSTCB-TCB(,R8)    job-step TCB                     41250005
         LA    R8,TCBJPQ-TCB(,R8)      START OF CDE CHAIN (JPAQ)        41260005
         LR    R9,R7                   EP NAME                          41270005
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE               41280005
         BALR  R14,R15              <- USES R0, R1, R8, R9, R11         41290005
         B     PRELOAD4            +0  FOUND, re-issue LOAD             41300005
*                                                                       41310000
*        Issue BLDL                                                     41320007
*                                                                       41330000
         BLDL  0,PDS2-4                search step/task/link lib        41340007
         LTR   R15,R15                 BLDL OK?                         41350007
         BNZ   PRELOAD5                no, search LPA                   41360007
*                                                                       41370000
*        Load the module into the JPAQ                                  41380031
*                                                                       41390000
         CLI   PDS2LIBF,PDS2LJOB       found in tasklib/steplib?        41400007
         BL    PRELOAD5                no, look in LPA and LNKLST       41410007
         LOAD  EPLOC=PDS2NAME          load from tasklib/steplib        41420031
         B     PRELOAD9                next module                      41430007
*                                                                       41440000
*        Load the module in to the JPAQ                                 41450007
*                                                                       41460000
PRELOAD4 LOAD  EPLOC=PDS2NAME          bump use count                   41470031
         B     PRELOAD9                next module                      41480007
*                                                                       41490000
*        ACTIVE LPA Q                                                   41500005
*                                                                       41510000
PRELOAD5 L     R8,CVTQLPAQ             START OF CDE CHAIN (ALPAQ)       41520007
         LR    R9,R7                   EP NAME                          41530005
         L     R15,CVTQCDSR            CDE SEARCH ROUTINE               41540005
         BALR  R14,R15              <- USES R0, R1, R8, R9, R11         41550005
         B     PRELOAD9            +0  FOUND, IGNORE                    41560005
*                                                                       41570000
*        PLPA DIRECTORY                                                 41580005
*                                                                       41590000
         LM    R0,R1,PDS2NAME          EP NAME                          41610007
         L     R15,CVTLPDSR            LPA SEARCH ROUTINE               41620005
         BALR  R14,R15              <- USES R6-R9                       41630005
         B     PRELOAD7            +0  FOUND, JUMP                      41640007
*                                                                       41660000
*        LOAD from link-list                                            41670007
*                                                                       41680000
         CLI   PDS2LIBF,PDS2LLNK       found in link-list?              41690007
         BNE   PRELOAD9                no, give up                      41700007
         TM    PDS2ATR1,PDS2REUS       REUS bit on?                     41710031
         BNO   PRELOAD9                no, give up                      41720031
         L     R2,CVTLINK              DCB for SYS1.LINKLIB             41730007
         LOAD  EPLOC=PDS2NAME,DCB=(R2) load from link-list              41740007
         B     PRELOAD9                next module                      41750007
*                                                                       41760000
*        create JPAQ entries for PLPA modules                           41770005
*                                                                       41780000
PRELOAD7 EQU   *                                                        41790018
         USING LPDE,R8                 set by LPDSR                     41800018
         L     R2,LPDENTP              entry-point address              41810018
         TM    LPDEATTR,LPDEMIN        ALIAS?                           41820018
         BO    PRELOAD8                yes, issue IDENTIFY              41830018
         DROP  R8                                                       41840018
         L     R2,CVTLINK              LINKLIST DCB                     41850018
         LOAD  EPLOC=(R7),             load ISRBRO                     X41870005
               DCB=(R2)                CVTLINK                          41880005
         LR    R2,R0                   save entry point addr            41890005
         LA    R4,4(,R4)               point at member name             41900005
         MVI   3(R4),C'_'              convert ISRBRO to ISR_BRO        41910005
         MVC   4(4,R4),3(R7)           convert ISRBRO to ISR_BRO        41920005
         IDENTIFY EPLOC=(R4),ENTRY=(R2) define ISR_BRO                  41930005
         LTR   R15,R15                                                  41940005
         BNZ   PRELOAD9                                                 41950005
         LOAD  EPLOC=(R4)              load ISR_BRO                     41960005
         DELETE EPLOC=(R7)             delete ISRBRO                    41970005
PRELOAD8 EQU   *                                                        41980018
         IDENTIFY EPLOC=(R7),ENTRY=(R2) define ISRBRO onto ISR_BRO      41990005
*                                                                       42000000
PRELOAD9 LA    R7,8(,R7)               next entry                       42010005
         CLI   0(R7),X'FF'             end of table reached?            42020005
         BNE   PRELOAD1                not yet, process next entry      42030005
*endloop                                                                42040005
         FREEMAIN R,LV=80,A=(R4)       FREE BLDL WORK AREA              42050007
         PR                                                             42060005
*---------------------------------------------------------------------* 42070000
*        DSECTs                                                       * 42080000
*---------------------------------------------------------------------* 42090000
         PRINT NOGEN                                                    42100000
         YREGS                                                          42110000
         IHAECVT                       ECVT                             42120030
         AIF   (D'ECVTTCP).ECVT2                                        42130030
ECVTTCP  EQU   ECVT+X'B0',4,C'A'       TCP/IP Server Anchor Block       42140030
.ECVT2   ANOP                                                           42150030
PSA      DSECT                                                          42160031
PSATOLD  EQU   *+X'021C'               addr of current TCB              42170031
PSAAOLD  EQU   *+X'0224'               addr of current ASCB             42180031
         IHALPDE                       LPA Directory Entry              42190031
         IEESMCA                       SMF                              42200031
RCVT     ICHPRCVT                      RACF CVT                         42210034
*                                                                       42220000
         IKJTCB                        TCB                              42230000
         IKJRB                         RB                               42240031
         IHAASCB                       ASCB                             42250031
         IHAASXB                       ASXB                             42260031
         IKJEFLWA                      LWA                              42270031
         IHAPDS PDSBLDL=YES            directory entry                  42280007
         IHACDE                        Contents Directory Entry         42290021
         IKJECT                        Environment Control Table        42300028
         IHATQE                        Timer Queue Element              42310031
*                                                                       42320000
         IKJLSD                        List Source Descriptor           42330022
LSD_LENGTH EQU *-LSD                                                    42340022
*                                                                       42350000
         IEZJSCB                       Job Step Control Block           42360013
         IEFASCTB                      Step Control Block               42370013
         IEFSCTX DSECT=YES             Step Control Block Extension     42380013
         AIF   (D'SCTXSTL).SCTX2                                        42390013
SCTXSTL  EQU   SCTX+X'7C',4,C'F'       step time limit (HBB4410)        42400013
.SCTX2   ANOP                                                           42410013
         ICHSAFP DSECT=YES             RACROUTE                         42420029
         IRXINSTB                      IN-STORAGE BLOCK                 42430015
         IRXEVALB                      EVALUATION BLOCK                 42440030
         ORG   EVALBLOCK_EVDATA+256    256 bytes of data                42450030
EVALBLOCK_LENGTH EQU *-EVALBLOCK                                        42460030
*                                                                       42470000
TLD      DSECT                         ISPF LOGICAL DISPLAY TABLE       42480023
TLDTBLID DS    C'TLD'                  TLD TABLE ID                     42490023
TLDID    DS    C'1'                    TLD ID ('0','1',...)             42500023
         ORG   TLD+X'034'                                               42510030
TLDTSCP  DS    V(TSC)                  Common Subroutine Table          42520030
TLDTSIP  DS    V(TSI)                  System Interface Table           42530030
TLDTSVP  DS    V(TSV)                  System Variables Table           42540030
         ORG   TLD+X'060'                                               42550023
TLDTLSP  DS    V(TLS)                  Logical Screen Table             42560030
         ORG   TLD+X'0A4'                                               42570023
TLDCSR   DS    F                       Cursor Offset                    42580030
         ORG   TLD+X'0C0'                                               42590023
TLDCLSWD DS    F                       Current Line Width               42600030
         ORG   TLD+X'0D0'                                               42610031
TLDMPSWD DS    F                       Max Line Width                   42620031
         ORG   TLD+X'1F4'                                               42630028
TLDECTP  DS    V(ECT)                  Environment Control Table        42640028
         ORG   TLD+X'210'                                               42650028
TLDIOWA  DS    V(IORLS)                I/O routine work area            42660028
*                                                                       42670000
TSI      DSECT                         System Interface Table           42680030
TSITBLID DS    C'ISPTSI  '                                              42690030
TSIRMZ   DS    C'3.5.0000'             V.R.M                            42700030
         ORG   TSI+X'03C'                                               42710028
TSITPDP  DS    A(TPD)                  Physical Display Table           42720030
         ORG   TSI+X'0B8'                                               42730030
TSICBUFP DS    V(CBUF)                 CPPLCBUF                         42740030
TSIUPTP  DS    V(UPT)                  CPPLUPT                          42750030
TSIPSCBP DS    V(PSCB)                 CPPLPSCB                         42760030
TSIECTP  DS    V(ECT)                  CPPLECT                          42770030
         ORG   TSI+X'1BC'                                               42780030
TSIUCTAB DS    C'USERCMDS'             User command table               42790030
         DS    F'8'                    ?                                42800030
         DS    C'DT357   '             ?                                42810030
TSILCTAB DS    C'SITECMDS'             Local command table              42820030
*                                                                       42830000
TSV      DSECT                         System Variables Table           42840030
         ORG   TSV+X'018'                                               42850030
         DS    C'='                    Jump character                   42860030
         DS    C':'                    Line Command char                42870030
         DS    C'>'                    Command Table bypass             42880030
TSVZDEL  DS    C';'                    Command Delimiter                42890030
*                                                                       42900000
TPD      DSECT                         Physical Display Table           42910030
TPDTBLID DS    C'TPD     '                                              42920028
         ORG   TPD+X'080'                                               42930028
TPDDTLDP DS    A(TLD)                  DUMMY TLD (TLD0)                 42940030
         END   FASTPATH                                                 42950031
         TITLE 'JUL2DAYS - Julian-to-days conversion routine'           42960018
*********************************************************************** 42970018
*                                                                     * 42980000
*        Convert a packed julian date obtained from the TIME macro    * 42990018
*        to an integer that represents the number of days since       * 43000018
*        1900-12-31.                                                  * 43010018
*                                                                     * 43020000
*        Input: R1=YYYYDDDF    julian date from TIME macro            * 43030018
*                                                                     * 43040000
*                 The first byte of R1 is 00 for years 1900-1999      * 43050018
*                 and 01 for years 2000-2099.                         * 43060018
*                                                                     * 43070000
*        Output:  R15=day of the week (1=monday, 7=sunday)            * 43080018
*                                                                     * 43090000
*                 R0=number of days since 1900-12-31                  * 43100018
*                                                                     * 43110000
*                 R1=pointer to a 9-byte character string that        * 43120018
*                            represents the day of the week.          * 43130018
*                                                                     * 43140000
*********************************************************************** 43150018
JUL2DAYS CSECT                                                          43160018
JUL2DAYS RMODE ANY                                                      43170018
         SAVE  (14,1),,*                                                43180018
         MVO   32(8,R13),24(2,R13)     00000YYY?                        43190018
         OI    32+7(R13),X'0F'         00000YYYF                        43200018
         CVB   R14,32(,R13)            R14=YEAR                         43210018
         LA    R0,365                  number of days in a year         43220018
         LR    R1,R14                  R1=years since 1900              43230018
         MR    R0,R0                   years*365                        43240018
         BCTR  R14,0                   R14=YEAR-1                       43250018
         SRL   R14,2                   number of leap years since 1901  43260018
         AR    R14,R1                  NUMBER OF DAYS IN PREVIOUS YEARS 43270018
         XC    20(6,R13),20(R13)       zero YYYY in 00000000YYYYDDDF    43280018
         CVB   R0,20(,R13)             NUMBER OF DAYS THIS YEAR         43290018
         AR    R0,R14                  number of days since 1900-12-31  43300018
*                                                                       43310000
*        DETERMINE DAY OF THE WEEK                                      43320018
*                                                                       43330000
         SLR   R14,R14                 PREPARE DIVISION                 43340018
         LR    R15,R0                  DAYS SINCE 1900-12-31            43350018
         BCTR  R15,0                   DAYS-1                           43360018
         LA    R1,7                    NUMBER OF DAYS IN WEEK           43370018
         DR    R14,R1                  DIVIDE BY NUM OF DAYS IN WEEK    43380018
         LA    R15,1(,R14)             Day of the week (1=monday)       43390018
         BALR  R1,0                    local base                       43400018
         USING *,R1                                                     43410018
         MH    R14,JUL2D_H9            MULT BY LENGTH OF A TABLE ENTRY  43420018
         LA    R1,JUL2D_TD(R14)        POINT TO DAY-OF-THE-WEEK         43430018
         RETURN (14)                   goback                           43440018
*                                                                       43450000
JUL2D_H9 DC    H'9'                    length of a table entry          43460018
JUL2D_TD DC    C'Monday   Tuesday  WednesdayThursday Friday   Saturday X43470018
               Sunday    '                                              43480018
         YREGS                                                          43490031
**********************************************************************  43500000
         MACRO                                                          43510000
         ISPCMDS &VERB=,&TRUNC=0,&ACT=,&DESC=                           43520045
         DC    CL8'&VERB'              verb                             43530000
         DC    CL1'&TRUNC'             truncation                       43540045
&LQ      SETC  'L'''                                                    43550000
&LABEL   SETC  'ISP&SYSNDX'                                             43560000
         DC    AL1(&LQ&LABEL.A)        K'&ACT-2                         43570000
&LABEL.A DC    C&ACT                   DESCRIPTION                      43580000
         DC    AL1(&LQ&LABEL.D)        K'&ACT-2                         43590000
&LABEL.D DC    C&DESC                  DESCRIPTION                      43600000
         MEND                                                           43610000
*********************************************************************** 43620000
*                                                                     * 43630000
*        Command Table Entries                                        * 43640000
*                                                                     * 43650000
*********************************************************************** 43660000
ISPCMDS  CSECT                                                          43670000
ISPCMDS  RMODE ANY                                                      43680000
         ISPCMDS VERB=BOTtom,                                          X43690018
               TRUNC=3,                                                X43700018
               ACT='ALIAS DOWN MAX',                                   X43710018
               DESC='Abbreviated BOTTOM command'                        43720018
*                                                                       43730000
         ISPCMDS VERB=BR,                                              X43740000
               ACT='SELECT PGM(FASTPATH) PARM(BROWSE,&&ZPARM)',        X43750016
               DESC='Fast Path Command: BROWSE'                         43760000
*                                                                       43770000
         ISPCMDS VERB=CALendar,                                        X43780030
               TRUNC=3,                                                X43790030
               ACT='SELECT PGM(FASTPATH) PARM(CALENDAR)',              X43800030
               DESC='Display Calendar'                                  43810030
*                                                                       43820000
         ISPCMDS VERB=CNTL,                                            X43830000
               ACT='SELECT PGM(FASTPATH) PARM(CNTL,&&ZPARM,CNTL)',     X43840038
               DESC='Fast Path Command: CNTL'                           43850018
*                                                                       43860000
         ISPCMDS VERB=CONNECT,                                         X43870030
               TRUNC=4,                                                X43880030
               ACT='SELECT PGM(FASTPATH) PARM(WSCON)',                 X43890030
               DESC='Establish connection to work-station'              43900030
*                                                                       43910000
         ISPCMDS VERB=CRASH,                                           X43920022
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,&&ZPARM)',         X43930022
               DESC='Quick exit from ISPF'                              43940020
*                                                                       43950049
         ISPCMDS VERB=DSINFO,                                          X43960049
               TRUNC=3,                                                X43970049
               ACT='SELECT PGM(FASTPATH) PARM(DSINFO,&&ZPARM)',        X43980049
               DESC='Dataset Info'                                      43990049
*                                                                       44000000
         ISPCMDS VERB=D2X,                                             X44010030
               ACT='SELECT PGM(FASTPATH) PARM(REXXT,SAY D2X(&&ZPARM))',X44020030
               DESC='Convert decimal to hex'                            44030030
*                                                                       44040000
         ISPCMDS VERB=ED,                                              X44050000
               ACT='SELECT PGM(FASTPATH) PARM(EDIT,&&ZPARM)',          X44060016
               DESC='Fast Path Command: EDIT'                           44070000
*                                                                       44080000
         ISPCMDS VERB=FM,                                              X44090046
               ACT='SELECT CMD(%NEWAPPL FM) NEWAPPL(FMN)',             X44100046
               DESC='IBM File Manager'                                  44110046
*                                                                       44120000
         ISPCMDS VERB=FSHELP,                                          X44130046
               TRUNC=3,                                                X44140046
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,HELP &&ZPARM)',    X44150049
               DESC='Full-screen TSO HELP'                              44160046
*                                                                       44170000
         ISPCMDS VERB=FSPASTE,                                         X44180031
               ACT='SELECT PGM(FASTPATH) PARM(FSPASTE)',               X44190031
               DESC='Full-screen PASTE'                                 44200031
*                                                                       44210047
         ISPCMDS VERB=FSPRINT,                                         X44220047
               TRUNC=4,                                                X44230047
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,PRINT IDS(''%DSNAMEX44240049
               '') DUMP',                                              X44250047
               DESC='Full-screen PRINT'                                 44260047
*                                                                       44270000
         ISPCMDS VERB=FSTso,                                           X44280018
               TRUNC=3,                                                X44290018
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,&&ZPARM)',         X44300049
               DESC='Full-Screen TSO Command'                           44310018
*                                                                       44320000
&HANDBOOK SETC '&&&&ZUSER..HANDBOOK'                                    44330018
         ISPCMDS VERB=HANDBook,                                        X44340018
               TRUNC=5,                                                X44350016
               ACT='SELECT PGM(FASTPATH) PARM(B,&HANDBOOK.(&&ZPARM))', X44360017
               DESC='On-line Macro listing'                             44370016
*                                                                       44380000
         ISPCMDS VERB=ICS,                                             X44390014
               ACT='SELECT PGM(FASTPATH) PARM(ICS,&&ZPARM)',           X44400016
               DESC='ISPF Command Shell'                                44410017
*                                                                       44420000
         ISPCMDS VERB=IND$FILE,                                        X44430011
               ACT='SELECT CMD(IND$FILE &&ZPARM) MODE(FSCR)',          X44440011
               DESC='PC/3270 File Transfer'                             44450017
*                                                                       44460000
         ISPCMDS VERB=LCA,                                             X44470050
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,LISTCAT ENT(''%DSNAX44480049
               ME'') ALL',                                             X44490031
               DESC='IDCAMS LISTCAT'                                    44500031
*                                                                       44510043
&CMD     SETC  'ISPEXEC SELECT CMD(LINKMAP ''''%DSNAME'''')'            44520043
         ISPCMDS VERB=LINKMap,                                         X44530043
               TRUNC=5,                                                X44540043
               ACT='SELECT PGM(FASTPATH) PARM(TSOCMD,&CMD)',           X44550043
               DESC='LINKMAP Command'                                   44560043
         ISPCMDS VERB=LM,                                              X44570043
               ACT='SELECT PGM(FASTPATH) PARM(TSOCMD,&CMD)',           X44580043
               DESC='LINKMAP Command'                                   44590043
*                                                                       44630000
         ISPCMDS VERB=LISTBc,                                          X44640018
               TRUNC=5,                                                X44650013
               ACT='SELECT CMD(LISTBC &&ZPARM) MODE(FSCR)',            X44660013
               DESC='List Broadcast Messages'                           44670013
*                                                                       44680000
         ISPCMDS VERB=LOAD,                                            X44690030
               ACT='SELECT PGM(FASTPATH) PARM(LOAD,&&ZPARM)',          X44700030
               DESC='Load a module into memory'                         44710030
*                                                                       44720000
         ISPCMDS VERB=LOGOFf,                                          X44730020
               TRUNC=5,                                                X44740020
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,LOGOFF)',          X44750022
               DESC='Quick LOGOFF from ISPF'                            44760020
*                                                                       44770000
         ISPCMDS VERB=LOGON,                                           X44780020
               ACT='SELECT PGM(FASTPATH) PARM(CRASH,LOGON &&ZPARM)',   X44790022
               DESC='Quick re-LOGON from within ISPF'                   44800020
*                                                                       44810000
         ISPCMDS VERB=MAClib,                                          X44820018
               TRUNC=3,                                                X44830014
               ACT='SELECT PGM(FASTPATH) PARM(MACLIB,&&ZPARM,STD)',    X44840033
               DESC='Fast Path Command: MACLIB'                         44850014
*                                                                       44860000
         ISPCMDS VERB=MAIL,                                            X44870014
               ACT='SELECT CMD(%NEWAPPL MAIL)',                        X44880014
               DESC='TSOMAIL Application'                               44890014
*                                                                       44900000
         ISPCMDS VERB=OPENCmds,                                        X44910031
               TRUNC=5,                                                X44920031
               ACT='SELECT PGM(FASTPATH) PARM(OPENC,&&ZPARM)',         X44930031
               DESC='Fast Path Command: OPEN command table'             44940031
*                                                                       44950000
         ISPCMDS VERB=NETStat,                                         X44960030
               TRUNC=4,                                                X44970030
               ACT='SELECT PGM(FASTPATH) PARM(NETSTAT,&&ZPARM)',       X44980030
               DESC='Fast Path Command: NETSTAT'                        44990030
*                                                                       45000000
         ISPCMDS VERB=PARMLib,                                         X45010018
               TRUNC=5,                                                X45020018
               ACT='SELECT PGM(FASTPATH) PARM(PARMLIB,&&ZPARM,STD,E)', X45030033
               DESC='Fast Path Command: Edit Parmlib Member'            45040023
*                                                                       45050044
         ISPCMDS VERB=PROCLib,                                         X45060044
               TRUNC=5,                                                X45070044
               ACT='SELECT PGM(FASTPATH) PARM(PROCLIB,&&ZPARM,STD,E)', X45080044
               DESC='Fast Path Command: Edit Parmlib Member'            45090044
*                                                                       45100000
         ISPCMDS VERB=RECEive,                                         X45110018
               TRUNC=4,                                                X45120009
               ACT='SELECT CMD(RECEIVE &&ZPARM) MODE(FSCR)',           X45130011
               DESC='TSO Interactive Transmit/Receive Facility'         45140009
*                                                                       45150000
         ISPCMDS VERB=REXXTry,                                         X45160030
               TRUNC=5,                                                X45170030
               ACT='SELECT PGM(FASTPATH) PARM(REXXTRY,&&ZPARM)',       X45180030
               DESC='Execute REXX statement'                            45190030
*                                                                       45200000
         ISPCMDS VERB=RMFmon,                                          X45210018
               TRUNC=3,                                                X45220018
               ACT='SELECT CMD(RMFMON &&ZPARM) MODE(FSCR)',            X45230018
               DESC='RMFMON Command'                                    45240018
*                                                                       45250000
         ISPCMDS VERB=SDsf,                                            X45260018
               TRUNC=2,                                                X45270000
               ACT='SELECT PGM(FASTPATH) PARM(SDSF,&&ZPARM)',          X45280016
               DESC='Fast Path Command: SDSF'                           45290000
*                                                                       45300046
         ISPCMDS VERB=SHOWDasd,                                        X45310046
               TRUNC=5,                                                X45320046
               ACT='SELECT CMD(%SHOWDASD &&ZPARM) NEWAPPL(ISR)',       X45330046
               DESC='SHOWDASD Command to display on-line DASD'          45340046
*                                                                       45350046
         ISPCMDS VERB=SHOWJpaq,                                        X45360046
               TRUNC=5,                                                X45370046
               ACT='SELECT PGM(FASTPATH) PARM(FSTSO,SHOWJPAQ)',        X45380049
               DESC='SHOWJPAQ Command to display contents of JPAQ'      45390046
*                                                                       45400000
         ISPCMDS VERB=SHOWMvs,                                         X45410018
               TRUNC=5,                                                X45420013
               ACT='SELECT CMD(SHOWMVS &&ZPARM) MODE(FSCR)',           X45430017
               DESC='SHOWMVS Utility'                                   45440000
*                                                                       45450045
         ISPCMDS VERB=SHOWZos,                                         X45460045
               TRUNC=5,                                                X45470045
               ACT='SELECT PGM(SHOWZOS) PARM(&&ZPARM) MODE(FSCR)',     X45480045
               DESC='SHOWzOS Utility'                                   45490045
*                                                                       45500000
         ISPCMDS VERB=SYSID,                                           X45510019
               ACT='SELECT PGM(FASTPATH) PARM(SYSID,&&ZPARM)',         X45520019
               DESC='Display System ID on every panel'                  45530019
*                                                                       45540000
         ISPCMDS VERB=TIME,                                            X45550018
               ACT='SELECT PGM(FASTPATH) PARM(TIME)',                  X45560018
               DESC='Fast Path Command: TIME'                           45570018
*                                                                       45580000
         ISPCMDS VERB=UNLOAD,                                          X45590030
               ACT='SELECT PGM(FASTPATH) PARM(UNLOAD,&&ZPARM)',        X45600030
               DESC='Unload a module from memory'                       45610030
*                                                                       45620000
         ISPCMDS VERB=UTil,                                            X45630018
               TRUNC=2,                                                X45640000
               ACT='SELECT PGM(FASTPATH) PARM(UTIL,&&ZPARM)',          X45650016
               DESC='Fast Path Command: PDF Utilities'                  45660000
*                                                                       45670000
         ISPCMDS VERB=VERAse,                                          X45680030
               TRUNC=4,                                                X45690030
               ACT='SELECT PGM(FASTPATH) PARM(VERASE,&&ZPARM)',        X45700030
               DESC='Remove Variables from Shared and/or Profile Pool'  45710030
*                                                                       45720000
         ISPCMDS VERB=VI,                                              X45730004
               ACT='SELECT PGM(FASTPATH) PARM(VIEW,&&ZPARM)',          X45740016
               DESC='Fast Path Command: VIEW'                           45750004
*                                                                       45760000
         ISPCMDS VERB=WHOami,                                          X45770018
               TRUNC=3,                                                X45780018
               ACT='SELECT CMD(%WHOAMI)',                              X45790018
               DESC='Display System ID and User ID in large letters'    45800019
*                                                                       45810000
         ISPCMDS VERB=WP,                                              X45820008
               TRUNC=2,                                                X45830008
               ACT='SELECT PGM(FASTPATH) PARM(WP,&&ZPARM)',            X45840016
               DESC='Fast Path Command: Work-Place'                     45850008
*                                                                       45860000
         ISPCMDS VERB=X2D,                                             X45870030
               ACT='SELECT PGM(FASTPATH) PARM(REXXT,SAY X2D(&&ZPARM))',X45880030
               DESC='Convert hex to decimal'                            45890030
*                                                                       45900000
         ISPCMDS VERB=ZDEL,                                            X45910030
               ACT='SELECT PGM(FASTPATH) PARM(ZDEL,&&ZPARM)',          X45920030
               DESC='Display/Set Command Delimiter'                     45930030
*                                                                       45940000
         DC    X'00'                   end of table                     45950000
         END                                                            45960000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  46020000
//         DD DSN=SYS1.MODGEN,DISP=SHR             LWA/ASXB             46030000
//         DD DSN=GILBERT.FILE183.PDS,DISP=SHR     STRING MACRO         46040034
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)                                    46050000
//SYSPRINT DD SYSOUT=*                                                  46060000
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,2),DISP=(,PASS),BLKSIZE=3200          46070034
//*-------------------------------------------------------------------  46080000
//LKED    EXEC PGM=IEWL,PARM=(LIST,MAP,RENT,REFR)                       46090041
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)                        46100038
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)                                    46110000
//SYSPRINT DD SYSOUT=*                                                  46120046
//SYSLMOD  DD DSN=GILBERT.FILE183.LOAD(FASTPATH),DISP=SHR               46150046
//                                                                      46160044
//                                                                      46170044
*                                                                       46180044
*        NM Tech Support Command additions (Al Ferguson)                46190044
*                                                                       46200044
         ISPCMDS VERB=CMDList,                                         X46210044
               TRUNC=4,                                                X46220044
               ACT='SELECT CMD(%CMDLIST &&ZPARM)',                     X46230044
               DESC='Display ISPF PROFILE Commands'                     46240044
*                                                                       46250044
         ISPCMDS VERB=CMDMaint,                                        X46260044
               TRUNC=4,                                                X46270044
               ACT='SELECT CMD(%CMDMAINT &&ZPARM)',                    X46280044
               DESC='Maintain ISPF PROFILE Commands'                    46290044
*                                                                       46300044
*        ISPCMDS VERB=EJes,                                             46310044
*              TRUNC=2,                                                 46320044
*              ACT='SELECT CMD(%@EJES,&&ZPARM) NEWAPPL(EJEP)',          46330044
*              DESC='(E)JES SYSOUT Viewing'                             46340044
*                                                                       46350044
         ISPCMDS VERB=FLASHer,                                         X46360044
               TRUNC=5,                                                X46370044
               ACT='SELECT CMD(%FLASHER,&&ZPARM) NEWAPPL(TFLP)',       X46380044
               DESC='OMS-Flash SYSOUT Viewing'                          46390044
*                                                                       46400044
         ISPCMDS VERB=IPCS,                                            X46410044
               ACT='SELECT CMD(%@IPCS &&ZPARM) NOCHECK LANG(CREX)',    X46420044
               DESC='IBM IPCS Problem Analysis tool'                    46430044
*                                                                       46440044
         ISPCMDS VERB=ISPF,                                            X46450044
               ACT='SELECT PGM(ISPSTRT) PARM(&&ZPARM) NEWAPPL(ISR)',   X46460044
               DESC='Stack ISPF'                                        46470044
*                                                                       46480044
         ISPCMDS VERB=ISMF,                                            X46490044
               ACT='SELECT CMD(%ISMF &&ZPARM) NOCHECK LANG(CREX)',     X46500044
               DESC='IBM Storage Management Facility tool'              46510044
*                                                                       46520044
         ISPCMDS VERB=JCLlib,                                          X46530044
               TRUNC=3,                                                X46540044
               ACT='SELECT PGM(FASTPATH) PARM(JCLLIB,&&ZPARM,STD)',    X46550044
               DESC='Fast Path Command: JCLLIB'                         46560044
*                                                                       46570044
         ISPCMDS VERB=MXI,                                             X46580044
               ACT='SELECT CMD(%CBTSTUFF MXI &&ZPARM)',                X46590044
               DESC='MVS Extended Information'                          46600044
*                                                                       46610044
         ISPCMDS VERB=MXIDS,                                           X46620044
               TRUNC=4,                                                X46630044
               ACT='SELECT CMD(%CBTSTUFF MXI DS &&ZPARM)',             X46640044
               DESC='MVS Extended Information, Dataset Utility'         46650044
*                                                                       46660044
         ISPCMDS VERB=MUcmd,                                           X46670044
               TRUNC=2,                                                X46680044
               ACT='SELECT CMD(%MU &&ZPARM) NEWAPPL(ISP)',             X46690044
               DESC='Invoke Member Utility REXX against a PDS'          46700044
*                                                                       46710044
         ISPCMDS VERB=PDS,                                             X46720044
               ACT='SELECT PGM(PDS) PARM(PDS &&ZPARM ISPMODE)',        X46730044
               DESC='Call CBT PDS Command'                              46740044
*                                                                       46750044
         ISPCMDS VERB=PROClib,                                         X46760044
               TRUNC=4,                                                X46770044
               ACT='SELECT PGM(FASTPATH) PARM(PROCLIB,&&ZPARM,STD,E)', X46780044
               DESC='Fast Path Command: View PROCLIB Member'            46790044
*                                                                       46800044
         ISPCMDS VERB=RLISTa,                                          X46810044
               TRUNC=5,                                                X46820044
               ACT='SELECT CMD(%RLISTA &&ZPARM VIEW(TRUE))',           X46830044
               DESC='View Dataset Allocations'                          46840044
*                                                                       46850044
         ISPCMDS VERB=RMFiii,                                          X46860044
               TRUNC=3,                                                X46870044
               ACT='SELECT CMD(RMFSTART &&ZPARM) MODE(FSCR)',          X46880044
               DESC='RMF III Start Command'                             46890044
*                                                                       46900044
         ISPCMDS VERB=SMPe,                                            X46910044
               TRUNC=3,                                                X46920044
               ACT='SELECT CMD(%SMPE VERSION(CURRENT) &&ZPARM)',       X46930044
               DESC='Current version of SMP/E'                          46940044
*                                                                       46950044
         ISPCMDS VERB=USS,                                             X46960044
               ACT='SELECT CMD(%USS &&ZPARM) NEWAPPL(BPX)',            X46970044
               DESC='Display USS@PRIM Panel and allocate USS DSNs'      46980044
*                                                                       46990044
         ISPCMDS VERB=GRoup,                                           X47000044
               TRUNC=2,                                                X47010044
               ACT='SELECT PANEL(GRP@PRIM) OPT(&&ZPARM)',              X47020044
               DESC='Display GRP@PRIM Panel'                            47030044
*                                                                       47040044
         ISPCMDS VERB=USer,                                            X47050044
               TRUNC=2,                                                X47060044
               ACT='SELECT PANEL(USR@PRIM) OPT(&&ZPARM)',              X47070044
               DESC='Display USR@PRIM Panel'                            47080044
*                                                                       47090044
         ISPCMDS VERB=XL,                                              X47100044
               ACT='SELECT SUSPEND PGM(XL) MODE(FSCR) PARM(&&ZPARM)',  X47110044
               DESC='Do a DSN List using template, ala 3.4'             47120044
*                                                                       47130044
         ISPCMDS VERB=OMVS,                                            X47140044
               ACT='SELECT CMD(OMVS)',                                 X47150044
               DESC='Startup OMVS Shell'                                47160044
*                                                                       47170044
         ISPCMDS VERB=IShell,                                          X47180044
               TRUNC=2,                                                X47190044
               ACT='SELECT CMD(%$ISHELL)',                             X47200044
               DESC='Startup ISPF IShell OMVS Interface'                47210044
*                                                                       47220044
         ISPCMDS VERB=ISPFTEST,                                        X47230044
               ACT='SELECT PGM(ISPYXDR) PARM(&&ZAPPLID)',              X47240044
               DESC='Startup ISPF Dialog Test Interface'                47250044
